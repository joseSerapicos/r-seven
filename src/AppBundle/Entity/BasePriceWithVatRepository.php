<?php

namespace AppBundle\Entity;

use AppBundle\Service\HelperService;

/**
 * BasePriceWithVatRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BasePriceWithVatRepository extends BasePriceRepository
{
    /**
     * Get entity metadata
     * @return mixed
     */
    static function getMetadata()
    {
        // Process metadata only once
        if (self::$metadata) {
            return self::$metadata;
        }

        $parentMetadata = parent::getMetadata();

        $localTable = lcfirst(substr(strrchr(get_called_class(), '\\'), 1, -10));

        $localMetadata = self::$metadata = self::processMetadata(array(
            'vatCodeObj' => array('label' => 'VAT Code', 'type' => 'object', 'acl' => 'read',
                'typeDetail' => array('table' => 'vatCode', 'bundle' => 'accounting', 'type' => 'none')
            ),
            'vatCode_percentage' => array('table' => 'vatCode', 'field' => 'percentage', 'label' => '', 'type' => 'percentage',
                'acl' => 'read', 'dependency' => 'vatCodeObj', 'form' => array('type' => 'none')),
            // Overrides parent field
            'costValue' => array('label' => 'Cost', 'type' => 'number', 'acl' => 'edit',
                'form' => array('type' => 'hidden')),
            // Fake field for user type de value (with or without VAT). This fake field is used to allow if needed
            // to show all values in the form (readonly), without VAT, with VAT, total VAT, sub total, etc,
            // without interfering with the value entered by the user
            'user_costValue' => array('label' => 'Cost', 'type' => 'none', 'acl' => 'edit',
                'attr' => array(
                    '(input)' => 'onCostValueEnterKey($event.target.value)',
                    '(focusout)' => 'onCostValueEnterKey($event.target.value)'
                ),
                'form' => array('type' => 'number', 'isMapped' => false),
            ),
            // Overrides parent field
            'sellValue' => array('label' => 'Sell', 'type' => 'number', 'acl' => 'edit',
                'form' => array('type' => 'hidden')),
            // Fake field for user type de value (with or without VAT). This fake field is used to allow if needed
            // to show all values in the form (readonly), without VAT, with VAT, total VAT, sub total, etc,
            // without interfering with the value entered by the user
            'user_sellValue' => array('label' => 'Sell', 'type' => 'none', 'acl' => 'edit',
                'attr' => array(
                    '(input)' => 'onSellValueEnterKey($event.target.value)',
                    '(focusout)' => 'onSellValueEnterKey($event.target.value)'
                ),
                'form' => array('type' => 'number', 'isMapped' => false),
            ),
            'quantity' => array('label' => 'Quantity', 'type' => 'number', 'acl' => 'edit',
                'attr' => array(
                    '(input)' => 'onQuantityEnterKey($event.target.value)',
                    '(focusout)' => 'onQuantityEnterKey($event.target.value)'
                )
            ),
            // Fake field to user select if the value is with or without VAT
            'isVatIncluded' => array('label' => 'VAT included', 'type' => 'none', 'acl' => 'edit',
                'isRequired' => false, 'default' => true,
                'attr' => array('(change)' => 'onIsVatIncludedChange($event.target.checked)'),
                'form' => array('type' => 'boolean', 'isMapped' => false)),
            'vatValueCost' => array('label' => 'VAT Value', 'type' => 'none', 'acl' => 'read'
                // To simplify the form and keep some coherence with totals of document, do not include this field in form
                /*'attr' => array('readonly' => 'readonly'), 'isRequired' => false,
                'form' => array('type' => 'number', 'isMapped' => false)*/
            ),
            'vatValueSell' => array('label' => 'VAT Value', 'type' => 'none', 'acl' => 'read'
                // To simplify the form, do not include this field in form
                /*'attr' => array('readonly' => 'readonly'), 'isRequired' => false,
                'form' => array('type' => 'number', 'isMapped' => false)*/
            ),
            'subTotalCost' => array('label' => 'Sub Total', 'type' => 'none', 'acl' => 'read'
                // To simplify the form, do not include this field in form
                /*'attr' => array('readonly' => 'readonly'), 'isRequired' => false,
                'form' => array('type' => 'number', 'isMapped' => false)*/
            ),
            'subTotalSell' => array('label' => 'Sub Total', 'type' => 'none', 'acl' => 'read'
                // To simplify the form, do not include this field in form
                /*'attr' => array('readonly' => 'readonly'), 'isRequired' => false,
                'form' => array('type' => 'number', 'isMapped' => false)*/
            ),
            'totalVatCost' => array('label' => 'TAX', 'type' => 'none', 'acl' => 'read'
                // To simplify the form, do not include this field in form
                /*'attr' => array('readonly' => 'readonly'), 'isRequired' => false,
                'form' => array('type' => 'number', 'isMapped' => false)*/
            ),
            'totalVatSell' => array('label' => 'TAX', 'type' => 'none', 'acl' => 'read'
                // To simplify the form, do not include this field in form
                /*'attr' => array('readonly' => 'readonly'), 'isRequired' => false,
                'form' => array('type' => 'number', 'isMapped' => false)*/
            ),
            'totalUnitCost' => array('label' => 'Total Unit', 'type' => 'none', 'acl' => 'read'
                // To simplify the form, do not include this field in form
                /*'attr' => array('readonly' => 'readonly'), 'isRequired' => false,
                'form' => array('type' => 'number', 'isMapped' => false)*/
            ),
            'totalUnitSell' => array('label' => 'Total Unit', 'type' => 'none', 'acl' => 'read'
                // To simplify the form, do not include this field in form
                /*'attr' => array('readonly' => 'readonly'), 'isRequired' => false,
                'form' => array('type' => 'number', 'isMapped' => false)*/
            ),
            'totalCost' => array('label' => 'Total Cost', 'type' => 'monetary', 'acl' => 'edit',
                'field' => '('.$localTable.'.subTotalCost + '.$localTable.'.totalVatCost)', 'table' => '',
                'attr' => array('readonly' => 'readonly'), 'isRequired' => false,
                'form' => array('type' => 'number', 'isMapped' => false),
                'normalizer' => array('method' => 'getTotalCost')
            ),
            'totalSell' => array('label' => 'Total Sell', 'type' => 'monetary', 'acl' => 'edit',
                'field' => '('.$localTable.'.subTotalSell + '.$localTable.'.totalVatSell)', 'table' => '',
                'attr' => array('readonly' => 'readonly'), 'isRequired' => false,
                'form' => array('type' => 'number', 'isMapped' => false),
                'normalizer' => array('method' => 'getTotalSell')
            )
        ));

        $firstMerge = HelperService::pushIntoArray(
            $parentMetadata,
            array(
                'quantity' => $localMetadata['quantity'],
                'isVatIncluded' => $localMetadata['isVatIncluded'],
                'costValue' => $localMetadata['costValue'],
                'user_costValue' => $localMetadata['user_costValue']
            ),
            // Note: Push after costValue to replace this field, otherwise costValue will come later and is not replaced
            'costValue'
        );

        // Unset fields merged above
        unset(
            $localMetadata['quantity'],
            $localMetadata['isVatIncluded'],
            $localMetadata['costValue'],
            $localMetadata['user_costValue']
        );

        return self::$metadata = HelperService::pushIntoArray($firstMerge, $localMetadata, 'sellValue');
    }
}