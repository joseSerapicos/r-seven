<?php

namespace AppBundle\Entity;

/**
 * BaseCostWithVatRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
abstract class BaseCostWithVatRepository extends BaseEntityRepository
{
    /**
     * Get local metadata (it needs to be implemented by children to get static variable with local metadata from parent)
     * @return mixed
     */
    protected function getLocalMetadata()
    {
        return $this->getMetadata();
    }

    /**
     * Get entity metadata
     * @return mixed
     */
    static function getMetadata()
    {
        $localTable = lcfirst(substr(strrchr(get_called_class(), '\\'), 1, -10));

        return self::processMetadata(array(
            'id' => array('label' => 'Id', 'type' => 'none', 'acl' => 'read'),
            'vatCodeObj' => array('label' => 'VAT Code', 'type' => 'object', 'acl' => 'edit', 'typeDetail' => array(
                'table' => 'vatCode', 'bundle' => 'accounting', 'type' => 'none'),
                'form' => array('type' => 'select')
            ),
            'vatCode_percentage' => array('table' => 'vatCode', 'field' => 'percentage', 'label' => '', 'type' => 'percentage',
                'acl' => 'read', 'dependency' => 'vatCodeObj', 'form' => array('type' => 'none')),
            'vatCode_name' => array('table' => 'vatCode', 'field' => 'name', 'label' => 'VAT Code', 'type' => 'text',
                'acl' => 'read', 'dependency' => 'vatCodeObj', 'form' => array('type' => 'none')),
            'vatValueCost' => array('label' => 'VAT Value', 'type' => 'monetary', 'acl' => 'edit',
                'attr' => array('readonly' => 'readonly'), 'isRequired' => false,
                'form' => array('type' => 'number'),
            ),
            // Field to control how to show the fake field "user_[...]"
            'isVatIncluded' => array('label' => 'VAT included', 'type' => 'none', 'acl' => 'edit', 'default' => true,
                'attr' => array('(change)' => 'onIsVatIncludedChange($event.target.checked)'),
                'form' => array('type' => 'boolean')
            ),
            // Original field is hidden
            'costValue' => array('label' => 'Cost', 'type' => 'monetary', 'acl' => 'edit',
                'form' => array('type' => 'hidden')),
            // Fake field for user type the value (with or without VAT), because the original field is always without VAT
            'user_costValue' => array('label' => 'Cost', 'type' => 'none', 'acl' => 'edit',
                'attr' => array(
                    '(input)' => 'onCostValueEnterKey($event.target.value)',
                    '(focusout)' => 'onCostValueEnterKey($event.target.value)'
                ),
                'form' => array('type' => 'number', 'isMapped' => false),
            ),
            'totalCost' => array('label' => 'Total Cost', 'type' => 'monetary', 'acl' => 'edit',
                'field' => '('.$localTable.'.costValue + '.$localTable.'.vatValueCost)', 'table' => '',
                'attr' => array('readonly' => 'readonly'), 'isRequired' => false,
                'form' => array('type' => 'number', 'isMapped' => false),
                'normalizer' => array('method' => 'getTotalCost')
            ),
            'insertTime' => array('label' => 'Insert Time', 'type' => 'datetime', 'acl' => 'read', 'form' => array('type' => 'none')),
            'insertUser' => array('label' => 'Insert User', 'type' => 'text', 'acl' => 'read', 'form' => array('type' => 'none')),
            'isEnabled' => array('label' => 'Enabled', 'type' => 'boolean', 'acl' => 'edit', 'default' => true)
        ));
    }
}