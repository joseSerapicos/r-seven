<?php

namespace AccountingBundle\Entity;

use AppBundle\Entity\BaseEntityRepository;
use AppBundle\Service\HelperService;

/**
 * BaseDocumentInvoiceDetailRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
abstract class BaseDocumentInvoiceDetailRepository extends BaseEntityRepository
{
    /**
     * Get context (it needs to be implemented by children to get the correct context <client, supplier, entity>)
     * @return string
     */
    abstract protected function getContext();

    /**
     * Get local metadata (it needs to be implemented by children to get static variable with local metadata from parent)
     * @return mixed
     */
    protected function getLocalMetadata()
    {
        return $this->getMetadata();
    }

    /**
     * Get entity metadata
     * @return mixed
     */
    static function getMetadata()
    {
        $localTable = lcfirst(substr(strrchr(get_called_class(), '\\'), 1, -10));

        return self::processMetadata(array(
            'id' => array('label' => 'Id', 'type' => 'none', 'acl' => 'read'),
            'serviceObj' => array('label' => 'Service', 'type' => 'object', 'acl' => 'edit',
                'attr' => array('(onChange)' => 'onServiceChange($event)'),
                'typeDetail' => array(
                    'table' => 'service', 'bundle' => 'services', 'type' => 'none', 'fieldInView' => 'service_name'),
                'form' => array('type' => 'html-select')
            ),
            'appIconObj' => array('table' => 'service', 'label' => 'nd',
                'type' => 'object', 'acl' => 'read', 'dependency' => 'serviceObj', 'typeDetail' => array(
                    'table' => 'app_icon', 'bundle' => 'sysadmin', 'type' => 'none')
            ),
            'service_icon' => array('table' => 'app_icon', 'field' => 'icon', 'label' => '', 'type' => 'icon',
                'acl' => 'read', 'dependency' => 'appIconObj', 'form' => array('type' => 'none')),
            'service_name' => array('table' => 'service', 'field' => 'name', 'label' => '', 'type' => 'text',
                'acl' => 'read', 'dependency' => 'serviceObj', 'form' => array('type' => 'none')),
            'description' => array('label' => 'Description', 'type' => 'text', 'acl' => 'edit'),
            'vatCodeObj' => array('label' => 'VAT Code', 'type' => 'object', 'acl' => 'read',
                'typeDetail' => array('table' => 'vatCode', 'bundle' => 'accounting', 'type' => 'none')
            ),
            'vatCode_name' => array('table' => 'vatCode', 'field' => 'name', 'label' => 'VAT Code', 'type' => 'text',
                'acl' => 'read', 'dependency' => 'vatCodeObj', 'form' => array('type' => 'none')),
            'vatCode_description' => array('table' => 'vatCode', 'field' => 'description', 'label' => '', 'type' => 'text',
                'acl' => 'read', 'dependency' => 'vatCodeObj', 'form' => array('type' => 'none')),
            'vatCode_percentage' => array('table' => 'vatCode', 'field' => 'percentage', 'label' => '', 'type' => 'percentage',
                'acl' => 'read', 'dependency' => 'vatCodeObj', 'form' => array('type' => 'none')),
            'quantity' => array('label' => 'Quantity', 'type' => 'number', 'acl' => 'edit',
                'attr' => array(
                    '(input)' => 'onQuantityEnterKey($event.target.value)',
                    '(focusout)' => 'onQuantityEnterKey($event.target.value)'
                )),
            'isVatIncluded' => array('label' => 'VAT included', 'type' => 'none', 'acl' => 'edit',
                'isRequired' => false, 'default' => true,
                'attr' => array('(change)' => 'onIsVatIncludedChange($event.target.checked)'),
                'form' => array('type' => 'boolean', 'isMapped' => false)),
            'value' => array('label' => 'Value', 'type' => 'number', 'acl' => 'edit',
                'form' => array('type' => 'hidden')),
            // Fake field for user type de value (with or without VAT). This fake field is used to allow if needed
            // to show all values in the form (readonly), without VAT, with VAT, total VAT, sub total, etc,
            // without interfering with the value entered by the user
            'user_value' => array('label' => 'Value', 'type' => 'none', 'acl' => 'edit',
                'attr' => array(
                    '(input)' => 'onValueEnterKey($event.target.value)',
                    '(focusout)' => 'onValueEnterKey($event.target.value)'
                ),
                'form' => array('type' => 'number', 'isMapped' => false),
            ),
            'vatValue' => array('label' => 'VAT Value', 'type' => 'number', 'acl' => 'read'
                // To simplify the form and keep some coherence with totals of document, do not include this field in form
                /*'attr' => array('readonly' => 'readonly'), 'isRequired' => false,
                'form' => array('type' => 'number', 'isMapped' => false)*/
            ),
            'totalUnit' => array('label' => 'Total Unit', 'type' => 'monetary', 'acl' => 'read',
                'field' => 'ROUND(' . $localTable . '.value + ' . $localTable . '.vatValue, 2)', 'table' => '',
                //'attr' => array('readonly' => 'readonly'), 'isRequired' => false,
                'form' => array('type' => 'none', 'isMapped' => false),
                'normalizer' => array('method' => 'getTotalUnit')
            ),
            'subTotal' => array('label' => 'Sub Total', 'type' => 'none', 'acl' => 'edit',
                'attr' => array('readonly' => 'readonly'), 'isRequired' => false,
                'form' => array('type' => 'number', 'isMapped' => false)
            ),
            'totalVat' => array('label' => 'TAX', 'type' => 'none', 'acl' => 'edit',
                'attr' => array('readonly' => 'readonly'), 'isRequired' => false,
                'form' => array('type' => 'number', 'isMapped' => false)
            ),
            'total' => array('label' => 'Total', 'type' => 'monetary', 'acl' => 'edit',
                'field' => '(' . $localTable . '.subTotal + ' . $localTable . '.totalVat)', 'table' => '',
                'attr' => array('readonly' => 'readonly'), 'isRequired' => false,
                'form' => array('type' => 'number', 'isMapped' => false),
                'normalizer' => array('method' => 'getTotal')
            ),
            'insertTime' => array('label' => 'Insert Time', 'type' => 'datetime', 'acl' => 'read', 'form' => array('type' => 'none')),
            'insertUser' => array('label' => 'Insert User', 'type' => 'text', 'acl' => 'read', 'form' => array('type' => 'none')),
            'isEnabled' => array('label' => 'Enabled', 'type' => 'none', 'acl' => 'edit', 'default' => true)
        ));
    }

    /**
     * Set current account totals
     * @param $documentObj
     * @return mixed
     */
    public function setDocumentTotals($documentObj)
    {
        $localTable = $this->getLocalTable();

        // Entities names
        $documentEntity = HelperService::getClassName($documentObj);
        $documentTable = lcfirst($documentEntity);

        $options = array(
            'fields' => array(
                "SUM(". $localTable . ".subTotal) AS subTotal",
                "SUM(". $localTable . ".totalVat) AS totalVat"
            ),
            'criteria' => array (
                array(
                    'field' => ($documentTable . 'Obj'),
                    'expr' => 'eq',
                    'value' => $documentObj
                )
            )
        );

        $totals = $this->queryBuilder($options);
        $totals = reset($totals); // First element of array
        $documentObj->setSubTotal($totals['subTotal']);
        $documentObj->setTotalVat($totals['totalVat']);

        return $documentObj;
    }

    /**
     * Get current account total VAT split by code
     * @param $documentObj
     * @return mixed
     */
    public function getDocumentTotalVatSplitByCode($documentObj)
    {
        $localTable = $this->getLocalTable();

        // Entities names
        $documentEntity = HelperService::getClassName($documentObj);
        $documentTable = lcfirst($documentEntity);

        $options = array(
            'fields' => array(
                'vatCodeObj',
                'vatCode.name',
                'vatCode.description',
                'vatCode.percentage',
                "SUM(". $localTable . ".subTotal) AS subTotal",
                "SUM(". $localTable . ".totalVat) AS totalVat",
                "SUM(". $localTable . ".subTotal + ". $localTable . ".totalVat) AS total"
            ),
            'criteria' => array (
                array(
                    'field' => ($documentTable . 'Obj'),
                    'expr' => 'eq',
                    'value' => $documentObj
                )
            )
        );

        // Get query builder
        $qb = $this->queryBuilder($options, false);

        // Group for "SUM"
        $qb->groupBy($localTable . '.vatCodeObj');

        return $this->executeQueryBuilder($qb);
    }

    /**
     * Get remain rectification (valid value, not rectified with rectification documents)
     * @param $operation (<CREDIT, DEBIT>)
     * @param $targetDocumentObj (to filter by entity of target document)
     * @param $options (array with queryBuilder options format)
     * @param $bookingObj (to filter by booking)
     * @param $excludeRectificationId (rectification id to exclude. Used in edit mode, when you don't want include the
     * id that is in edition, in order to not consider the value of this id in calc, otherwise you can't use the total
     * value in edit, because the current value (of id in edition) is decremented here)
     * @return mixed
     */
    public function getRemainRectification($operation, $targetDocumentObj, $options = array(), $bookingObj = null, $excludeRectificationId = null)
    {
        // Validate context
        $context = $this->getContext();
        if (!in_array($context, array('client', 'supplier', 'entity'))) {
            return array();
        }

        // Entities names
        $localTable = $this->getLocalTable();
        $documentTable = ($context . 'Document');
        $documentObjField = ($documentTable . 'Obj');
        $documentTypeObjField = ($context . 'DocumentTypeObj');
        $documentTypeTable = ($context . 'DocumentType');
        $documentInvoiceRectificationTable = ($context . 'DocumentInvoiceRectification');
        $originalDocumentInvoiceDetailObjField = ('original' . ucfirst($context) . 'DocumentInvoiceDetailObj');
        $rectificationInvoiceDetailTable = ('rectification' . $localTable);
        $rectificationInvoiceDetailObjField = ($localTable . 'Obj');

        // Normalize options
        $options['fields'] = array(
            'id', $documentObjField, 'service_icon', 'service_name', 'description',
            'quantity', 'totalUnit', 'vatCode_percentage', 'vatCode_name', 'total',
            'clientDocument_code', // 'clientDocument_code' mandatory to use in search having clause (add document invoice rectification)
            (
                "((" . $localTable . ".subTotal + " . $localTable . ".totalVat)"
                . " - "
                . "(CASE WHEN (" . $documentInvoiceRectificationTable . ".id IS NOT NULL) THEN (CASE WHEN ("
                . $rectificationInvoiceDetailTable . ".id IS NOT NULL) THEN (SUM("
                . $rectificationInvoiceDetailTable . ".subTotal + " . $rectificationInvoiceDetailTable . ".totalVat)) "
                . "ELSE (0) END) "
                . "ELSE (0) END)) AS notRectifiedValue"
            ),
            (
                "((" . $localTable . ".quantity)"
                . " - "
                . "(CASE WHEN (" . $documentInvoiceRectificationTable . ".id IS NOT NULL) THEN (CASE WHEN ("
                . $rectificationInvoiceDetailTable . ".id IS NOT NULL) THEN (SUM("
                . $rectificationInvoiceDetailTable . ".quantity)) "
                . "ELSE (0) END) "
                . "ELSE (0) END)) AS notRectifiedQuantity"
            )
        );
        $getEntityObjMethod = ('get' . ucfirst($context) . 'Obj');
        $options['criteria'] = array_merge(
            (empty($options['criteria']) ? array() : $options['criteria']),
            array(
               /* array('field' => ($documentTable . '.isEnabled'), 'expr' => 'eq', 'value' => 1),
                array(
                    'field' => ($documentTable . '.' . $context . 'Obj'),
                    'expr' => 'eq',
                    'value' => $targetDocumentObj->$getEntityObjMethod()
                )*/
            )
        );
        $options['orderBy'] = array( // Get object ordered by most recent and document
            array(
                'field' => $documentTable . '.date',
                'value' => 'DESC'
            ),
            array(
                'field' => $documentObjField,
                'value' => 'DESC'
            )
        );

        // Get query builder
        $qb = $this->queryBuilder($options, false);

        // Filter by operation
        $qb->innerJoin($documentTable . '.' . $documentTypeObjField,
            $documentTypeTable,
            'WITH',
            ($documentTypeTable . ".operation = '" . $operation . "'")
        );

        // Filter by booking
        if ($bookingObj) {
            $bookingEntity = HelperService::getClassName($bookingObj);
            $bookingDocumentTable = ($bookingEntity . ucfirst($context) . 'Document');
            $qb->innerJoin('BookingBundle\Entity\\' . ucfirst($bookingDocumentTable),
                $bookingDocumentTable,
                'WITH',
                ('(' . $bookingDocumentTable . '.' . $documentObjField . ' = ' . $documentTable . '.id) AND '
                    . $bookingDocumentTable . '.' . lcfirst($bookingEntity) . 'Obj = ' . $bookingObj->getId()
                )
            );
        }

        // Rectification
        $qb->leftJoin('AccountingBundle\Entity\\' . ucfirst($documentInvoiceRectificationTable),
            $documentInvoiceRectificationTable,
            'WITH',
            $documentInvoiceRectificationTable . '.' . $originalDocumentInvoiceDetailObjField . ' = ' . $localTable . '.id'
            . ($excludeRectificationId
                ? (' AND (' . $documentInvoiceRectificationTable . '.id <> ' . $excludeRectificationId . ')')
                : '')
        );

        // Rectification Invoice Detail
        $qb->leftJoin('AccountingBundle\Entity\\' . ucfirst($localTable),
            $rectificationInvoiceDetailTable,
            'WITH',
            $rectificationInvoiceDetailTable . '.id = ' . $documentInvoiceRectificationTable . '.' . $rectificationInvoiceDetailObjField
        );

        // Group by id for "SUM"
        $qb->groupBy($localTable . '.id');

        // Remove registries already rectified
        $qb->andHaving("notRectifiedValue > 0");

        return $this->executeQueryBuilder($qb);
    }
}