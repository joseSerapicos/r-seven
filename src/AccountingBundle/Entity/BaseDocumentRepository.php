<?php

namespace AccountingBundle\Entity;

use AppBundle\Entity\BaseEntityRepository;

/**
 * BaseDocumentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
abstract class BaseDocumentRepository extends BaseEntityRepository
{
    /**
     * Get context (it needs to be implemented by children to get the correct context <client, supplier, entity>)
     * @return string
     */
    abstract protected function getContext();

    /**
     * Get local metadata (it needs to be implemented by children to get static variable with local metadata from parent)
     * @return mixed
     */
    protected function getLocalMetadata()
    {
        return $this->getMetadata();
    }

    /**
     * Get entity metadata
     * @return mixed
     */
    static function getMetadata()
    {
        $localTable = lcfirst(substr(strrchr(get_called_class(), '\\'), 1, -10));

        return self::processMetadata(array(
            'id' => array('label' => 'Id', 'type' => 'none', 'acl' => 'read'),
            'storeObj' => array('label' => 'Store', 'type' => 'object', 'acl' => 'read', 'typeDetail' => array(
                'table' => 'store', 'bundle' => 'admin', 'type' => 'none')),
            'code' => array('label' => 'Code', 'field' => 'CONCAT('.$localTable.'.codePrefix, '.$localTable.'.codeNumber)',
                'table' => '', 'type' => 'code', 'acl' => 'read',
                'normalizer' => array('method' => 'getCode')
            ),
            'date' => array('label' => 'Date', 'type' => 'date', 'acl' => 'edit', 'view' => array(
                'typeDetail' => array('rules' => array(
                    array('expr' => 'max', 'value' => 'dueDate'),
                    array('expr' => 'range', 'value' => 'dateRange'),
                ))
            )),
            'dueDate' => array('label' => 'Due Date', 'type' => 'date', 'acl' => 'edit', 'view' => array(
                'typeDetail' => array('rules' => array(array('expr' => 'min', 'value' => 'date')))
            )),
            'comments' => array('label' => 'Comments', 'type' => 'textarea', 'acl' => 'edit', 'isRequired' => false,
                'attr' => array('rows' => '3')
            ),
            'storeLegalName' => array('label' => 'Legal Name', 'type' => 'text', 'acl' => 'read', 'form' => array('type' => 'none')),
            'storeTaxNumber' => array('label' => 'Tax Number', 'type' => 'text', 'acl' => 'read', 'form' => array('type' => 'none')),
            'storeStreet1' => array('label' => 'Street 1/2', 'type' => 'text', 'acl' => 'read', 'form' => array('type' => 'none')),
            'storeStreet2' => array('label' => 'Street 2/2', 'type' => 'text', 'acl' => 'read', 'form' => array('type' => 'none')),
            'storePostCode' => array('label' => 'Post Code', 'type' => 'text', 'acl' => 'read', 'form' => array('type' => 'none')),
            'storeCity' => array('label' => 'City', 'type' => 'text', 'acl' => 'read', 'form' => array('type' => 'none')),
            'storeRegion' => array('label' => 'Region', 'type' => 'text', 'acl' => 'read', 'form' => array('type' => 'none')),
            'storeCountry' => array('label' => 'Country', 'type' => 'text', 'acl' => 'read', 'form' => array('type' => 'none')),
            'entityLegalName' => array('label' => 'Legal Name', 'type' => 'text', 'acl' => 'read', 'form' => array('type' => 'none')),
            'entityTaxNumber' => array('label' => 'Tax Number', 'type' => 'text', 'acl' => 'read', 'form' => array('type' => 'none')),
            'entityStreet1' => array('label' => 'Street 1/2', 'type' => 'text', 'acl' => 'read', 'form' => array('type' => 'none')),
            'entityStreet2' => array('label' => 'Street 2/2', 'type' => 'text', 'acl' => 'read', 'form' => array('type' => 'none')),
            'entityPostCode' => array('label' => 'Post Code', 'type' => 'text', 'acl' => 'read', 'form' => array('type' => 'none')),
            'entityCity' => array('label' => 'City', 'type' => 'text', 'acl' => 'read', 'form' => array('type' => 'none')),
            'entityRegion' => array('label' => 'Region', 'type' => 'text', 'acl' => 'read', 'form' => array('type' => 'none')),
            'entityCountry' => array('label' => 'Country', 'type' => 'text', 'acl' => 'read', 'form' => array('type' => 'none')),
            'subTotal' => array('label' => 'Sub Total', 'type' => 'monetary', 'acl' => 'edit',
                'attr' => array('readonly' => 'readonly'), 'form' => array('type' => 'number'), 'isRequired' => false
            ),
            'totalVat' => array('label' => 'Total VAT', 'type' => 'monetary', 'acl' => 'edit',
                'attr' => array('readonly' => 'readonly'), 'form' => array('type' => 'number'), 'isRequired' => false
            ),
            'total' => array('label' => 'Total', 'type' => 'monetary', 'acl' => 'edit',
                'field' => '(' . $localTable . '.subTotal + ' . $localTable . '.totalVat)', 'table' => '',
                'attr' => array('readonly' => 'readonly'), 'isRequired' => false,
                'form' => array('type' => 'number', 'isMapped' => false),
                'normalizer' => array('method' => 'getTotal')
            ),
            'settlementStatus' => array('label' => 'Status', 'type' => 'enum', 'acl' => 'read',
                'field' => "(CASE WHEN (" . $localTable . ".remainSettlement = 0) THEN 'YES'"
                    . " ELSE (CASE WHEN (" . $localTable . ".remainSettlement = ($localTable.subTotal + " . $localTable . ".totalVat)) THEN 'NO'"
                    . " ELSE ('PARTIAL') END) END)", 'table' => '',
                'typeDetail' => array(
                    'type' => 'status', 'choices' => array(
                        'value' => array(
                            'No' => 'NO', 'Partial' => 'PARTIAL', 'Yes' => 'YES'
                        )
                    )
                ),
                'form' => array('type' => 'none'),
                'normalizer' => array('method' => 'getSettlementStatus')
            ),
            'insertTime' => array('label' => 'Insert Time', 'type' => 'datetime', 'acl' => 'read', 'form' => array('type' => 'none')),
            'insertUser' => array('label' => 'Insert User', 'type' => 'text', 'acl' => 'read', 'form' => array('type' => 'none')),
            'isEnabled' => array('label' => 'Enabled', 'type' => 'none', 'acl' => 'edit', 'default' => true)
        ));
    }
}