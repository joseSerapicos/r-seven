<?php

namespace AccountingBundle\Entity;

use AppBundle\Entity\BaseEntityRepository;

/**
 * BaseDocumentTypeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BaseDocumentTypeRepository extends BaseEntityRepository
{
    static protected $metadata = null;

    /**
     * Get field metadata
     * @param $field
     * @param $attribute
     * @param $metadata (uses this metadata instead of local metadata)
     * @param $context ('view'|'form'|'none')
     * @return null
     */
    static public function getFieldMetadata($field, $attribute, $metadata = null, $context = 'none')
    {
        if (!$metadata) {
            $metadata = self::getMetadata();
        }
        return self::getLocalFieldMetadata($field, $attribute, $metadata, $context);
    }

    /**
     * Get local metadata (it needs to be implemented by children to get static variable with local metadata from parent)
     * @return mixed
     */
    protected function getLocalMetadata()
    {
        return $this->getMetadata();
    }

    /**
     * Get entity metadata
     * @return mixed
     */
    static function getMetadata()
    {
        // Process metadata only once
        if (self::$metadata) {
            return self::$metadata;
        }
        return self::$metadata = self::processMetadata(array(
            'id' => array('label' => 'Id', 'type' => 'number', 'acl' => 'read'),
            'name' => array('label' => 'Name', 'type' => 'text', 'acl' => 'edit'),
            'prefix' => array('label' => 'Prefix', 'type' => 'text', 'acl' => 'edit'),
            'type' => array('label' => 'Type', 'type' => 'enum', 'acl' => 'edit',
                'typeDetail' => array(
                    'type' => 'text', 'choices' => array(
                        'value' => array(
                            'Invoice' => 'INVOICE', 'Rectification' => "RECTIFICATION", 'Receipt' => 'RECEIPT', 'Payment' => "PAYMENT", 'Settlement' => "SETTLEMENT"
                        )
                    )),
                'form' => array('type' => 'select')
            ),
            'operation' => array('label' => 'Operation', 'type' => 'enum', 'acl' => 'edit',
                'typeDetail' => array(
                    'type' => 'text', 'choices' => array(
                        'value' => array(
                            'Debit' => 'DEBIT', 'Credit' => 'CREDIT', 'None' => 'NONE'
                        )
                    )),
                'form' => array('type' => 'select')
            ),
            'acl' => array('label' => 'Access Control List', 'type' => 'enum', 'acl' => 'edit',
                'typeDetail' => array(
                    'type' => 'text', 'choices' => array(
                        'value' => array(
                            'Read' => '1', 'Edit' => '2', 'Cancel' => '4', 'All' => '7'
                        )
                    )),
                'form' => array('type' => 'select')
            ),
            'aclTargetDocs' => array('label' => 'ACL For Docs.', 'type' => 'enum', 'acl' => 'edit',
                'typeDetail' => array(
                    'type' => 'text', 'choices' => array(
                        'value' => array(
                            'Created' => 'CREATED', 'Not Accessed' => 'NOT_ACCESSED'
                        )
                    )),
                'form' => array('type' => 'select')
            ),
            'requiresSysadminRole' => array('label' => 'Requires Sysadmin Role', 'type' => 'none', 'acl' => 'edit',
                'form' => array('type' => 'boolean')
            ),
            'insertTime' => array('label' => 'Insert Time', 'type' => 'datetime', 'acl' => 'read'),
            'insertUser' => array('label' => 'Insert User', 'type' => 'text', 'acl' => 'read'),
            'isEnabled' => array('label' => 'Enabled', 'type' => 'boolean', 'acl' => 'edit', 'default' => true,
                'view' => array('keepOriginalNormalizer' => true)
            )
        ));
    }
}