<?php

namespace AccountingBundle\Entity;

use AppBundle\Entity\BaseEntityRepository;

/**
 * BaseCurrentAccountRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BaseCurrentAccountRepository extends BaseEntityRepository
{
    static protected $metadata = null;

    /**
     * Get field metadata
     * @param $field
     * @param $attribute
     * @param $metadata (uses this metadata instead of local metadata)
     * @param $context ('view'|'form'|'none')
     * @return null
     */
    static public function getFieldMetadata($field, $attribute, $metadata = null, $context = 'none')
    {
        if (!$metadata) {
            $metadata = self::getMetadata();
        }
        return self::getLocalFieldMetadata($field, $attribute, $metadata, $context);
    }

    /**
     * Get local metadata (it needs to be implemented by children to get static variable with local metadata from parent)
     * @return mixed
     */
    protected function getLocalMetadata()
    {
        return $this->getMetadata();
    }

    /**
     * Get entity metadata
     * @return mixed
     */
    static function getMetadata()
    {
        // Process metadata only once
        if (self::$metadata) {
            return self::$metadata;
        }
        return self::$metadata = self::processMetadata(array(
            'id' => array('label' => 'Id', 'type' => 'number', 'acl' => 'read'),
            'storeObj' => array('label' => 'Store', 'type' => 'object', 'acl' => 'read', 'typeDetail' => array(
                'table' => 'store', 'bundle' => 'admin', 'type' => 'none')),
            'number' => array('label' => 'Number', 'type' => 'code', 'acl' => 'read'),
            'description' => array('label' => 'Description', 'type' => 'text', 'acl' => 'edit'),
            'date' => array('label' => 'Date', 'type' => 'date', 'acl' => 'edit', 'view' => array(
                'typeDetail' => array('rules' => array(array('expr' => 'max', 'value' => 'dueDate')))
            )),
            'dueDate' => array('label' => 'Due Date', 'type' => 'date', 'acl' => 'edit', 'view' => array(
                'typeDetail' => array('rules' => array(array('expr' => 'min', 'value' => 'date')))
            )),
            'storeLegalName' => array('label' => 'Legal Name', 'type' => 'text', 'acl' => 'read'),
            'storeTaxNumber' => array('label' => 'Tax Number', 'type' => 'text', 'acl' => 'read'),
            'storeStreet1' => array('label' => 'Street 1/2', 'type' => 'text', 'acl' => 'read'),
            'storeStreet2' => array('label' => 'Street 2/2', 'type' => 'text', 'acl' => 'read'),
            'storeCity' => array('label' => 'City', 'type' => 'text', 'acl' => 'read'),
            'storePostCode' => array('label' => 'Post Code', 'type' => 'text', 'acl' => 'read'),
            'storeRegion' => array('label' => 'Region', 'type' => 'text', 'acl' => 'read'),
            'storeCountry' => array('label' => 'Country', 'type' => 'text', 'acl' => 'read'),
            'entityLegalName' => array('label' => 'Legal Name', 'type' => 'text', 'acl' => 'edit'),
            'entityTaxNumber' => array('label' => 'Tax Number', 'type' => 'text', 'acl' => 'edit'),
            'entityStreet1' => array('label' => 'Street 1/2', 'type' => 'text', 'acl' => 'edit'),
            'entityStreet2' => array('label' => 'Street 2/2', 'type' => 'text', 'acl' => 'edit'),
            'entityCity' => array('label' => 'City', 'type' => 'text', 'acl' => 'edit'),
            'entityPostCode' => array('label' => 'Post Code', 'type' => 'text', 'acl' => 'edit'),
            'entityRegion' => array('label' => 'Region', 'type' => 'text', 'acl' => 'edit'),
            'entityCountry' => array('label' => 'Country', 'type' => 'text', 'acl' => 'edit'),
            'total' => array('label' => 'Total', 'type' => 'monetary', 'acl' => 'read'),
            'totalVat' => array('label' => 'Total VAT', 'type' => 'monetary', 'acl' => 'read'),
            'insertTime' => array('label' => 'Insert Time', 'type' => 'datetime', 'acl' => 'read'),
            'insertUser' => array('label' => 'Insert User', 'type' => 'text', 'acl' => 'read'),
            'isEnabled' => array('label' => 'Enabled', 'type' => 'boolean', 'acl' => 'edit', 'default' => true)
        ));
    }
}