<?php

namespace AccountingBundle\Entity;

use AppBundle\Entity\BaseEntityRepository;

/**
 * VatCodeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VatCodeRepository extends BaseEntityRepository {
    static protected $metadata = null;

    /**
     * Get field metadata
     * @param $field
     * @param $attribute
     * @param $metadata (uses this metadata instead of local metadata)
     * @param $context ('view'|'form'|'none')
     * @return null
     */
    static public function getFieldMetadata($field, $attribute, $metadata = null, $context = 'none')
    {
        if (!$metadata) {
            $metadata = self::getMetadata();
        }
        return self::getLocalFieldMetadata($field, $attribute, $metadata, $context);
    }

    /**
     * Get local metadata (it needs to be implemented by children to get static variable with local metadata from parent)
     * @return mixed
     */
    protected function getLocalMetadata()
    {
        return $this->getMetadata();
    }

    /**
     * Get entity metadata
     * @return mixed
     */
    static function getMetadata()
    {
        // Process metadata only once
        if (self::$metadata) {
            return self::$metadata;
        }
        return self::$metadata = self::processMetadata(array(
            'id' => array('label' => 'Id', 'type' => 'number', 'acl' => 'read'),
            'name' => array('label' => 'Code', 'type' => 'text', 'acl' => 'edit'),
            'description' => array('label' => 'Description', 'type' => 'text', 'acl' => 'edit'),
            'percentage' => array('label' => 'Percentage', 'type' => 'percentage', 'acl' => 'edit'),
            'insertTime' => array('label' => 'Insert Time', 'type' => 'datetime', 'acl' => 'read'),
            'insertUser' => array('label' => 'Insert User', 'type' => 'text', 'acl' => 'read'),
            'isEnabled' => array('label' => 'Enabled', 'type' => 'boolean', 'acl' => 'edit', 'default' => true)
        ));
    }

    /**
     * Check if object is in use by documents
     * @param $object
     * @return mixed
     */
    public function isInUseByDocuments($object)
    {
        $options = array(
            'fields' => array('id'),
            'limit' => 1
        );

        // Clients
        $qb = $this->queryBuilder($options, false);
        $qb->innerJoin('AccountingBundle\Entity\ClientDocumentInvoiceDetail',
            'clientDocumentInvoiceDetail',
            'WITH',
            ('clientDocumentInvoiceDetail.vatCodeObj = ' . $object->getId())
        );
        $result = $this->executeQueryBuilder($qb);

        /*if (empty($result)) { // @TODO ENABLE THIS CODE WHEN TABLES ARE DEFINED
            // Suppliers
            $qb = $this->queryBuilder($options, false);
            $qb->innerJoin('AccountingBundle\Entity\SupplierDocumentInvoiceDetail',
                'supplierDocumentInvoiceDetail',
                'WITH',
                ('supplierDocumentInvoiceDetail.vatCodeObj = ' . $object->getId())
            );
            $result = $this->executeQueryBuilder($qb);
        }

        if (empty($result)) {
            // Entities
            $qb = $this->queryBuilder($options, false);
            $qb->innerJoin('AccountingBundle\Entity\EntityDocumentInvoiceDetail',
                'entityDocumentInvoiceDetail',
                'WITH',
                ('entityDocumentInvoiceDetail.vatCodeObj = ' . $object->getId())
            );
            $result = $this->executeQueryBuilder($qb);
        }*/

        return (!empty($result));
    }
}