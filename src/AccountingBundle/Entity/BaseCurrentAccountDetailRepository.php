<?php

namespace AccountingBundle\Entity;

use AppBundle\Entity\BaseEntityRepository;
use AppBundle\Service\HelperService;

/**
 * BaseCurrentAccountDetailRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BaseCurrentAccountDetailRepository extends BaseEntityRepository
{
    static protected $metadata = null;

    /**
     * Get field metadata
     * @param $field
     * @param $attribute
     * @param $metadata (uses this metadata instead of local metadata)
     * @param $context ('view'|'form'|'none')
     * @return null
     */
    static public function getFieldMetadata($field, $attribute, $metadata = null, $context = 'none')
    {
        if (!$metadata) {
            $metadata = self::getMetadata();
        }
        return self::getLocalFieldMetadata($field, $attribute, $metadata, $context);
    }

    /**
     * Get local metadata (it needs to be implemented by children to get static variable with local metadata from parent)
     * @return mixed
     */
    protected function getLocalMetadata()
    {
        return $this->getMetadata();
    }

    /**
     * Get entity metadata
     * @return mixed
     */
    static function getMetadata()
    {
        // Process metadata only once
        if (self::$metadata) {
            return self::$metadata;
        }
        return self::$metadata = self::processMetadata(array(
            'id' => array('label' => 'Id', 'type' => 'none', 'acl' => 'read'),
            'serviceObj' => array('label' => 'Service', 'type' => 'object', 'acl' => 'edit',
                'attr' => array('(onChange)' => 'onServiceChange($event)'),
                'typeDetail' => array(
                    'table' => 'service', 'bundle' => 'services', 'type' => 'none', 'fieldInView' => 'service_name'),
                'form' => array('type' => 'html-select')
            ),
            'appIconObj' => array('table' => 'service', 'label' => 'nd',
                'type' => 'object', 'acl' => 'read', 'dependency' => 'serviceObj', 'typeDetail' => array(
                    'table' => 'app_icon', 'bundle' => 'sysadmin', 'type' => 'none')
            ),
            'service_icon' => array('table' => 'app_icon', 'field' => 'icon', 'label' => '', 'type' => 'icon',
                'acl' => 'read', 'dependency' => 'appIconObj', 'form' => array('type' => 'none')),
            'service_name' => array('table' => 'service', 'field' => 'name', 'label' => '', 'type' => 'text',
                'acl' => 'read', 'dependency' => 'serviceObj', 'form' => array('type' => 'none')),
            'description' => array('label' => 'Description', 'type' => 'text', 'acl' => 'edit'),
            'vatCodeObj' => array('label' => 'VAT Code', 'type' => 'object', 'acl' => 'read',
                'typeDetail' => array('table' => 'vatCode', 'bundle' => 'accounting', 'type' => 'none')
            ),
            'vatCode_name' => array('table' => 'vatCode', 'field' => 'name', 'label' => 'VAT Code', 'type' => 'text',
                'acl' => 'read', 'dependency' => 'vatCodeObj', 'form' => array('type' => 'none')),
            'vatCode_description' => array('table' => 'vatCode', 'field' => 'description', 'label' => '', 'type' => 'text',
                'acl' => 'read', 'dependency' => 'vatCodeObj', 'form' => array('type' => 'none')),
            'vatCode_percentage' => array('table' => 'vatCode', 'field' => 'percentage', 'label' => '', 'type' => 'percentage',
                'acl' => 'read', 'dependency' => 'vatCodeObj', 'form' => array('type' => 'none')),
            'quantity' => array('label' => 'Quantity', 'type' => 'number', 'acl' => 'edit',
                'attr' => array(
                    '(input)' => 'onQuantityEnterKey($event.target.value)',
                    '(focusout)' => 'onQuantityEnterKey($event.target.value)'
                )),
            'isVatIncluded' => array('label' => 'VAT included', 'type' => 'none', 'acl' => 'edit',
                'isRequired' => false, 'default' => true,
                'attr' => array('(change)' => 'onIsVatIncludedChange($event.target.checked)'),
                'form' => array('type' => 'boolean', 'isMapped' => false)),
            'value' => array('label' => 'Value', 'type' => 'number', 'acl' => 'edit',
                'form' => array('type' => 'hidden')),
            // Fake field for user type de value (with or without VAT). This fake field is used to allow if needed
            // to show all values in the form (readonly), without VAT, with VAT, total VAT, sub total, etc,
            // without interfering with the value entered by the user
            'user_value' => array('label' => 'Value', 'type' => 'none', 'acl' => 'edit',
                'attr' => array(
                    '(input)' => 'onValueEnterKey($event.target.value)',
                    '(focusout)' => 'onValueEnterKey($event.target.value)'
                ),
                'form' => array('type' => 'number', 'isMapped' => false),
            ),
            'vatValue' => array('label' => 'VAT Value', 'type' => 'number', 'acl' => 'read'
                // To simplify the form and keep some coherence with totals of document, do not include this field in form
                /*'attr' => array('readonly' => 'readonly'), 'isRequired' => false,
                'form' => array('type' => 'number', 'isMapped' => false)*/
            ),
            'totalUnit' => array('label' => 'Total Unit', 'type' => 'monetary', 'acl' => 'read',
                'field' => 'ROUND(clientCurrentAccountDetail.value + clientCurrentAccountDetail.vatValue, 2)', 'table' => '',
                //'attr' => array('readonly' => 'readonly'), 'isRequired' => false,
                'form' => array('type' => 'none', 'isMapped' => false),
                'normalizer' => array('method' => 'getTotalUnit')
            ),
            'subTotal' => array('label' => 'Sub Total', 'type' => 'none', 'acl' => 'edit',
                'attr' => array('readonly' => 'readonly'), 'isRequired' => false,
                'form' => array('type' => 'number', 'isMapped' => false)
            ),
            'totalVat' => array('label' => 'TAX', 'type' => 'none', 'acl' => 'edit',
                'attr' => array('readonly' => 'readonly'), 'isRequired' => false,
                'form' => array('type' => 'number', 'isMapped' => false)
            ),
            'total' => array('label' => 'Total', 'type' => 'monetary', 'acl' => 'edit',
                'field' => '(clientCurrentAccountDetail.subTotal + clientCurrentAccountDetail.totalVat)', 'table' => '',
                'attr' => array('readonly' => 'readonly'), 'isRequired' => false,
                'form' => array('type' => 'number', 'isMapped' => false),
                'normalizer' => array('method' => 'getTotal')
            ),
            'insertTime' => array('label' => 'Insert Time', 'type' => 'datetime', 'acl' => 'read', 'form' => array('type' => 'none')),
            'insertUser' => array('label' => 'Insert User', 'type' => 'text', 'acl' => 'read', 'form' => array('type' => 'none')),
            'isEnabled' => array('label' => 'Enabled', 'type' => 'none', 'acl' => 'edit', 'default' => true)
        ));
    }

    /**
     * Set current account totals
     * @param $currentAccountObj
     * @return mixed
     */
    public function setCurrentAccountTotals($currentAccountObj)
    {
        $localTable = $this->getLocalTable();

        // Entities names
        $currentAccountEntity = HelperService::getClassName($currentAccountObj);
        $currentAccountTable = lcfirst($currentAccountEntity);

        $options = array(
            'fields' => array(
                "SUM(". $localTable . ".subTotal) AS subTotal",
                "SUM(". $localTable . ".totalVat) AS totalVat"
            ),
            'criteria' => array (
                array(
                    'field' => ($currentAccountTable . 'Obj'),
                    'expr' => 'eq',
                    'value' => $currentAccountObj
                )
            )
        );

        $totals = $this->queryBuilder($options);
        $totals = reset($totals); // First element of array
        $currentAccountObj->setSubTotal($totals['subTotal']);
        $currentAccountObj->setTotalVat($totals['totalVat']);

        return $currentAccountObj;
    }

    /**
     * Get current account total VAT split by code
     * @param $currentAccountObj
     * @return mixed
     */
    public function getCurrentAccountTotalVatSplitByCode($currentAccountObj)
    {
        $localTable = $this->getLocalTable();

        // Entities names
        $currentAccountEntity = HelperService::getClassName($currentAccountObj);
        $currentAccountTable = lcfirst($currentAccountEntity);

        $options = array(
            'fields' => array(
                'vatCodeObj',
                'vatCode.name',
                'vatCode.description',
                'vatCode.percentage',
                "SUM(". $localTable . ".subTotal) AS subTotal",
                "SUM(". $localTable . ".totalVat) AS totalVat",
                "SUM(". $localTable . ".subTotal + ". $localTable . ".totalVat) AS total"
            ),
            'criteria' => array (
                array(
                    'field' => ($currentAccountTable . 'Obj'),
                    'expr' => 'eq',
                    'value' => $currentAccountObj
                )
            )
        );

        // Get query builder
        $qb = $this->queryBuilder($options, false);

        // Group for "SUM"
        $qb->groupBy($localTable . '.vatCodeObj');

        return $this->executeQueryBuilder($qb);
    }
}