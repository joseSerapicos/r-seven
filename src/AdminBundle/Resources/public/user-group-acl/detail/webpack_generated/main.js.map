{"version":3,"sources":["webpack:///./src/AdminBundle/Resources/public/user-group-acl/detail/ts/main.ts","webpack:///./src/AdminBundle/Resources/public/user-group-acl/detail/ts/main.module.ts","webpack:///./~/@angular/forms/bundles/forms.umd.js","webpack:///./~/rxjs/operator/toPromise.js","webpack:///./~/rxjs/observable/fromPromise.js","webpack:///./~/rxjs/observable/PromiseObservable.js","webpack:///./src/AppBundle/Resources/public/ts/search/search.module.ts","webpack:///./src/AppBundle/Resources/public/ts/expander/expander.module.ts","webpack:///./src/AppBundle/Resources/public/ts/expander/expander.component.ts","webpack:///./src/AppBundle/Resources/public/ts/search/search-fields.component.ts","webpack:///./src/AppBundle/Resources/public/ts/search/search-order-by.component.ts","webpack:///./src/AppBundle/Resources/public/ts/search/search-criteria.component.ts","webpack:///./src/AppBundle/Resources/public/ts/search/search.component.ts","webpack:///./src/AppBundle/Resources/public/ts/actions/actions.service.ts","webpack:///./src/AppBundle/Resources/public/ts/post.service.ts","webpack:///./src/AppBundle/Resources/public/modal/ts/modal.service.ts","webpack:///./src/AppBundle/Resources/public/ts/dynamic-component-loader.service.ts","webpack:///./src/AppBundle/Resources/public/modal/ts/modal-dialog.extension-module.ts","webpack:///./src/AppBundle/Resources/public/modal/ts/modal-dialog.component.ts","webpack:///./src/AppBundle/Resources/public/modal/ts/base-modal-popup.ts","webpack:///./src/AppBundle/Resources/public/ts/base/base.extension-component.ts","webpack:///./src/AppBundle/Resources/public/modal/ts/modal-wrapper.component.ts","webpack:///./src/AppBundle/Resources/public/modal/ts/modal-wrapper.extension-module.ts","webpack:///./src/AppBundle/Resources/public/ts/data-service/data.service.ts","webpack:///./src/AppBundle/Resources/public/ts/nav-manager/nav-manager.service.ts","webpack:///./src/AppBundle/Resources/public/ts/helper.ts","webpack:///./src/AdminBundle/Resources/public/user-group-acl/detail/ts/main.component.ts","webpack:///./src/AppBundle/Resources/public/ts/data-service/tree-view-data.service.ts","webpack:///./src/AppBundle/Resources/public/ts/form/form.service.ts","webpack:///./src/AppBundle/Resources/public/ts/tabs/tabs.component.ts","webpack:///./src/AppBundle/Resources/public/ts/base/base.component.ts","webpack:///./src/AppBundle/Resources/public/ts/tree-view/tree-view-form-acl.extension-module.ts","webpack:///./src/AppBundle/Resources/public/ts/tree-view/tree-view-form.component.ts","webpack:///./src/AppBundle/Resources/public/ts/tree-view/tree-view.component.ts","webpack:///./src/AppBundle/Resources/public/ts/data-box/data-box.component.ts","webpack:///./src/AppBundle/Resources/public/ts/data-box/data-box.extension-component.ts","webpack:///./src/AppBundle/Resources/public/ts/box/box.extension-component.ts","webpack:///./src/AppBundle/Resources/public/ts/tree-view/tree-view-node.component.ts","webpack:///./src/AppBundle/Resources/public/ts/tree-view/controls/tree-view-control-form-type-acl.component.ts","webpack:///./src/AdminBundle/Resources/public/user-group-acl-user/ts/main.extension-module.ts","webpack:///./src/AppBundle/Resources/public/ts/form/field-types/field-types.extension-module.ts","webpack:///./src/AppBundle/Resources/public/ts/form/field-types/field-type-auto-complete.component.ts","webpack:///./src/AppBundle/Resources/public/ts/form/field-types/password.component.ts","webpack:///./src/AppBundle/Resources/public/ts/form/field-types/field-type-multi-checkbox.directive.ts","webpack:///./src/AppBundle/Resources/public/ts/form/field-types/field-type-html-select.directive.ts","webpack:///./src/AppBundle/Resources/public/ts/form/field-types/field-type-date-picker.directive.ts","webpack:///./src/AdminBundle/Resources/public/user-group-acl-user/ts/main.component.ts"],"names":[],"mappings":";;;;;AAAA,yDAAyE;AACzE,6CAAyC;AAEzC,kDAAsB,EAAE,CAAC,eAAe,CAAC,wBAAU,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHrD,qCAAuC;AACvC,kDAAwD;AACxD,oFAAmF;AACnF,kFAAiF;AACjF,uCAAgE;AAChE,+CAAkG;AAClG,iDAAwG;AACxG,8CAAyF;AACzF,+CAAiG;AACjG,uDAA0G;AAC1G,kEAA+H;AAC/H,8CAAsG;AACtG,qDAAkH;AAClH,wCAA8E;AAC9E,gDAA+C;AAyB/C,KAAa,UAAU;KAAvB;KAAyB,CAAC;KAAD,iBAAC;AAAD,EAAC;AAAb,WAAU;KAtBtB,eAAQ,CAAC;SACN,OAAO,EAAE;aACL,gCAAa;aACb,mBAAW;aACX,2BAAmB;aACnB,4BAAY;aACZ,gCAAc;UACjB;SACD,YAAY,EAAE;aACV,8BAAa;UAChB;SACD,SAAS,EAAE;aACP,0BAAW;aACX,4BAAY;aACZ,2CAAmB;aACnB,gEAA6B;aAC7B,EAAC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,0BAAW,EAAC;aAC/C,uCAAiB;aACjB,EAAC,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,eAAM,EAAC;UAC/C;SACD,SAAS,EAAE,CAAC,8BAAa,CAAC;MAC7B,CAAC;IACW,UAAU,CAAG;AAAb,iCAAU;;;;;;;ACvCvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAAyC,yCAAyC;AAClF,EAAC,0HAA0H;;AAE3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA8B,kCAAkC,EAAE;AAClE;AACA;AACA,UAAS;AACT;AACA,+BAA8B,4DAA4D,EAAE;AAC5F;AACA;AACA,UAAS;AACT;AACA,+BAA8B,4DAA4D,EAAE;AAC5F;AACA;AACA,UAAS;AACT;AACA,+BAA8B,8DAA8D,EAAE;AAC9F;AACA;AACA,UAAS;AACT;AACA,+BAA8B,8DAA8D,EAAE;AAC9F;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,UAAS;AACT;AACA,+BAA8B,+DAA+D,EAAE;AAC/F;AACA;AACA,UAAS;AACT;AACA,+BAA8B,4DAA4D,EAAE;AAC5F;AACA;AACA,UAAS;AACT;AACA,+BAA8B,8DAA8D,EAAE;AAC9F;AACA;AACA,UAAS;AACT;AACA,+BAA8B,gEAAgE,EAAE;AAChG;AACA;AACA,UAAS;AACT;AACA,+BAA8B,+DAA+D,EAAE;AAC/F;AACA;AACA,UAAS;AACT;AACA,+BAA8B,8DAA8D,EAAE;AAC9F;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,UAAS;AACT;AACA,+BAA8B,aAAa,EAAE;AAC7C;AACA;AACA,UAAS;AACT;AACA,oCAAmC,mBAAmB;AACtD;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA,4CAA2C,gBAAgB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA8B,aAAa,EAAE;AAC7C;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,+BAA8B,aAAa,EAAE;AAC7C;AACA;AACA,UAAS;AACT;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAwC,gCAAgC;AACxE,2CAA0C,+BAA+B;AACzE;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAkD,gBAAgB;AAClE;AACA;AACA;AACA,mDAAkD,gBAAgB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,4BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAA+B,qBAAqB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,4BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,iDAAgD,kBAAkB;AAClE;AACA;AACA;AACA;AACA;AACA,SAAQ;AACR;AACA;AACA;AACA;AACA,8DAA6D,kBAAkB;AAC/E;AACA;AACA;AACA;AACA,aAAY,oBAAoB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAmD,kBAAkB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAuD,mBAAmB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAgC;AAChC;AACA;AACA;AACA,sBAAqB,eAAe,sDAAsD,EAAE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB,eAAe,sDAAsD,EAAE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA,sBAAqB,aAAa,+DAA+D;AACjG;AACA;AACA;AACA;AACA;AACA,kDAAiD,aAAa;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,6CAA4C,mBAAmB,EAAE;AACjE;AACA;AACA,6CAA4C,mBAAmB,EAAE;AACjE;AACA;AACA;AACA;AACA,UAAS,IAAI;AACb;AACA;;AAEA;AACA,2BAA0B,2BAA2B;AACrD;AACA,aAAY,2BAA2B;AACvC;AACA;AACA;;AAEA;AACA;AACA,4DAA2D,qCAAqC,EAAE;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C;AAC1C,2CAA0C;AAC1C;AACA;AACA;AACA;AACA,kFAAiF,oBAAoB;AACrG,mFAAkF,qBAAqB;AACvG;AACA;AACA;AACA;AACA,cAAa;AACb;AACA,gCAA+B,yEAAyE;AACxG;AACA,sBAAqB,IAAI;AACzB;AACA;AACA;AACA,cAAa,gCAAgC;AAC7C,cAAa,kCAAkC;AAC/C;AACA;AACA,MAAK;;AAEL;AACA;AACA,4DAA2D,6BAA6B,EAAE;AAC1F;AACA;AACA;AACA;AACA,SAAQ,cAAc,GAAG,2BAA2B,OAAO,sBAAsB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C;AAC1C,2CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA,0EAAyE,oBAAoB;AAC7F,2EAA0E,qBAAqB;AAC/F;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,gCAA+B,sEAAsE;AACrG;AACA,sBAAqB,IAAI;AACzB;AACA;AACA;AACA,cAAa,gCAAgC;AAC7C,cAAa,kCAAkC;AAC/C;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC,8BAA8B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC,8BAA8B;AAC/D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4DAA2D,4BAA4B,EAAE;AACzF;AACA;AACA;AACA;AACA,SAAQ,cAAc,GAAG,2BAA2B,OAAO,sBAAsB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C;AAC1C,2CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA8C,4CAA4C;AAC1F;AACA,0EAAyE,qBAAqB;AAC9F;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA,sBAAqB,IAAI;AACzB;AACA;AACA;AACA,cAAa,gCAAgC;AAC7C,cAAa,kCAAkC;AAC/C;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA8B,wBAAwB,EAAE;AACxD;AACA;AACA,UAAS;AACT;AACA,+BAA8B,wBAAwB,EAAE;AACxD;AACA;AACA,UAAS;AACT;AACA,MAAK;;AAEL;AACA;AACA,4DAA2D,kCAAkC,EAAE;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA2B,4BAA4B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,iCAAiC;AAC9C;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA,iBAAgB,cAAc,GAAG,2BAA2B,OAAO;AACnE,0CAAyC,kBAAkB;AAC3D;AACA;AACA;AACA,kCAAiC,kBAAkB,SAAS,0BAA0B;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQ;AACR;AACA;AACA;AACA;AACA,SAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAAyC;AACzC,2CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,wEAAuE,6BAA6B;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA4E,wBAAwB;AACpG,gFAA+E,qBAAqB;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA,gCAA+B,oDAAoD;AACnF;AACA,sBAAqB,IAAI;AACzB;AACA;AACA;AACA,cAAa,gCAAgC;AAC7C,cAAa,kCAAkC;AAC/C,cAAa,8BAA8B;AAC3C,cAAa,gCAAgC;AAC7C;AACA;AACA,uBAAsB,4BAA4B;AAClD,kCAAiC,4BAA4B;AAC7D,wBAAuB,4BAA4B;AACnD;AACA;AACA,MAAK;;AAEL;AACA;AACA,4DAA2D,mCAAmC,EAAE;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB,cAAc,GAAG,2BAA2B,OAAO;AACnE,0CAAyC,kBAAkB;AAC3D;AACA;AACA;AACA,kCAAiC,kBAAkB,SAAS,0BAA0B;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQ;AACR;AACA;AACA;AACA;AACA;AACA,SAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C;AAC1C,2CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAgF,qBAAqB;AACrG;AACA;AACA;AACA;AACA,6EAA4E,uCAAuC;AACnH;AACA;AACA,oEAAmE,gBAAgB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA,gCAA+B,uEAAuE;AACtG;AACA,sBAAqB,IAAI;AACzB;AACA;AACA;AACA,cAAa,gCAAgC;AAC7C,cAAa,kCAAkC;AAC/C;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,sBAAqB,iCAAiC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,wCAAwC,qBAAqB,IAAI;AAC9E;AACA;AACA;AACA,cAAa,kCAAkC;AAC/C,cAAa,gCAAgC;AAC7C,cAAa,iDAAiD,+BAA+B,GAAG,2BAA2B,IAAI;AAC/H;AACA;AACA,0BAAyB,gDAAgD;AACzE,wBAAuB,8CAA8C;AACrE;AACA;AACA,MAAK;;AAEL;AACA;AACA,4DAA2D,2CAA2C,EAAE;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C;AAC1C,2CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAA+C,8BAA8B,EAAE;AAC/E,wDAAuD,kDAAkD,EAAE;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAmC,oBAAoB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAmC,oBAAoB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAwF,qBAAqB;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAmE,gBAAgB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA,gCAA+B,iEAAiE;AAChG;AACA,sBAAqB,IAAI;AACzB;AACA;AACA;AACA,cAAa,gCAAgC;AAC7C,cAAa,kCAAkC;AAC/C;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,wCAAwC,qBAAqB,IAAI;AAC9E;AACA;AACA;AACA,cAAa,kCAAkC;AAC/C,cAAa,gCAAgC;AAC7C,cAAa,yDAAyD,+BAA+B,GAAG,2BAA2B,IAAI;AACvI;AACA;AACA,0BAAyB,gDAAgD;AACzE,wBAAuB,8CAA8C;AACrE;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAwC,+BAA+B;AACvE,UAAS;AACT;AACA,0DAAyD,gCAAgC,EAAE;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA,qEAAoE,gDAAgD,EAAE;AACtH;AACA;AACA;AACA;AACA,kEAAiE,yCAAyC,EAAE;AAC5G,UAAS;AACT;AACA;AACA,kEAAiE,yCAAyC,EAAE;AAC5G,UAAS;AACT;AACA;AACA,yDAAwD,6BAA6B,EAAE;AACvF,0DAAyD,6BAA6B,EAAE;AACxF,0DAAyD,kDAAkD,EAAE;AAC7G,+DAA8D,kDAAkD,EAAE;AAClH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAoD,wCAAwC,EAAE;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA,sDAAqD,mBAAmB,MAAM,oBAAoB;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAwB,gBAAgB;AACxC;AACA,+BAA8B,8CAA8C,EAAE;AAC9E;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,+BAA8B,6CAA6C,EAAE;AAC7E;AACA;AACA,UAAS;AACT;AACA;AACA,yBAAwB,WAAW;AACnC;AACA,+BAA8B,yDAAyD,EAAE;AACzF;AACA;AACA,UAAS;AACT;AACA,+BAA8B,4CAA4C,EAAE;AAC5E;AACA;AACA,UAAS;AACT;AACA,+BAA8B,sDAAsD,EAAE;AACtF;AACA;AACA,UAAS;AACT;AACA,8EAA6E;AAC7E;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,UAAS;AACT;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,wCAAwC,mFAAmF,IAAI;AAC5I;AACA;AACA;AACA,cAAa,gCAAgC,2BAA2B,IAAI;AAC5E;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,sBAAqB,IAAI;AACzB;AACA;AACA;AACA,cAAa,uCAAuC,2BAA2B,IAAI;AACnF;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAqC,iBAAiB;AACtD;AACA;AACA;AACA,yDAAwD,yCAAyC;AACjG;AACA;AACA,2CAA0C,aAAa;AACvD,2CAA0C,aAAa;AACvD;AACA;AACA,6CAA4C,oCAAoC,EAAE;AAClF,kBAAiB,qBAAqB,6BAA6B;AACnE;AACA,gEAA+D,yBAAyB,mCAAmC,EAAE,EAAE,EAAE;AACjI,yCAAwC,4BAA4B;AACpE;AACA;AACA,gEAA+D,yBAAyB,mCAAmC,EAAE,EAAE,EAAE;AACjI,sCAAqC,4BAA4B;AACjE;AACA;AACA;AACA,kEAAiE,yBAAyB,+BAA+B,EAAE,EAAE,EAAE;AAC/H,uCAAsC,wBAAwB;AAC9D;AACA;AACA,0DAAyD,yBAAyB,mBAAmB,EAAE,EAAE,EAAE,mBAAmB,YAAY;AAC1I;AACA;AACA;AACA,uDAAsD,yBAAyB,mBAAmB,EAAE,EAAE,EAAE,gBAAgB,YAAY;AACpI;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAA+C,kBAAkB,GAAG,gBAAgB;AACpF,SAAQ,gBAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA8B,oBAAoB,EAAE;AACpD;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA8B,qBAAqB,EAAE;AACrD;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA8B,+BAA+B,EAAE;AAC/D;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA8B,iCAAiC,EAAE;AACjE;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA8B,gCAAgC,EAAE;AAChE;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA8B,kCAAkC,EAAE;AAClE;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA8B,kCAAkC,EAAE;AAClE;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,+BAA8B,qBAAqB,EAAE;AACrD;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA8B,uBAAuB,EAAE;AACvD;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA8B,uBAAuB,EAAE;AACvD;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,+BAA8B,sBAAsB,EAAE;AACtD;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,+BAA8B,uBAAuB,EAAE;AACvD;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,+BAA8B,2BAA2B,EAAE;AAC3D;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,+BAA8B,4BAA4B,EAAE;AAC5D;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAiE,uBAAuB;AACxF;AACA;AACA;AACA,uEAAsE,4BAA4B;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA8C;AAC9C;AACA;AACA,6CAA4C,qBAAqB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA8C;AAC9C;AACA,oDAAmD,0BAA0B,iBAAiB,EAAE,EAAE;AAClG;AACA,8CAA6C,qBAAqB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA8C;AAC9C;AACA;AACA,2CAA0C,qBAAqB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA8C;AAC9C;AACA,oDAAmD,yBAAyB,iBAAiB,EAAE,EAAE;AACjG;AACA,+CAA8C,qBAAqB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,+CAA8C;AAC9C;AACA;AACA,6CAA4C,qBAAqB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAuC;AACvC;AACA;AACA,oDAAmD,kBAAkB,iBAAiB,EAAE,EAAE;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA,iEAAgE,uBAAuB,EAAE;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAuC;AACvC;AACA,oDAAmD,iBAAiB,iBAAiB,EAAE,EAAE;AACzF,0CAAyC,uCAAuC;AAChF;AACA,iEAAgE,wBAAwB,EAAE;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAiE,uBAAuB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA,wCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAqD,2CAA2C;AAChG;AACA;AACA;AACA;AACA,+CAA8C,kBAAkB;AAChE,iDAAgD,kCAAkC,uBAAuB,EAAE,EAAE;AAC7G,0CAAyC,uCAAuC;AAChF;AACA,oEAAmE,+DAA+D;AAClI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAmC,uBAAuB,8BAA8B,uBAAuB,EAAE,EAAE,EAAE;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAY;AACZ;AACA;AACA,0CAAyC,kBAAkB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C;AAC3C;AACA;AACA;AACA,iDAAgD;AAChD;AACA,0DAAyD,+BAA+B;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAkC,aAAa;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAkC,aAAa;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAAyD,kCAAkC,EAAE;AAC7F;AACA;AACA;AACA,0DAAyD,sBAAsB,EAAE;AACjF;AACA;AACA;AACA,0DAAyD,wBAAwB,EAAE;AACnF;AACA;AACA;AACA,+CAA8C;AAC9C;AACA;AACA,+CAA8C,qBAAqB;AACnE;AACA;AACA;AACA;AACA,+CAA8C;AAC9C;AACA;AACA,8CAA6C,qBAAqB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAA+E,+BAA+B;AAC9G;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,SAAQ,gBAAgB,MAAM,gBAAgB;AAC9C;AACA;AACA;AACA,8BAA6B,kBAAkB;AAC/C;AACA;AACA;AACA;AACA,gCAA+B;AAC/B;AACA;AACA;AACA;AACA,6DAA4D;AAC5D;AACA;AACA;AACA,sCAAqC,6BAA6B;AAClE,gCAA+B;AAC/B,iCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAA+B;AAC/B,iCAAgC;AAChC;AACA;AACA,6BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAuC,kBAAkB;AACzD,wCAAuC,kBAAkB;AACzD,6CAA4C,uBAAuB;AACnE;AACA;AACA;AACA;AACA,0CAAyC,mCAAmC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAuC;AACvC;AACA;AACA,6DAA4D,gEAAgE,EAAE;AAC9H;AACA,0CAAyC,2CAA2C;AACpF;AACA;AACA;AACA;AACA,uDAAsD,2BAA2B;AACjF,yCAAwC,2BAA2B;AACnE;AACA;AACA;AACA,sCAAqC,cAAc;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA,gCAA+B,+BAA+B;AAC9D;AACA,4CAA2C;AAC3C,6CAA4C;AAC5C;AACA;AACA;AACA,wCAAuC,kBAAkB;AACzD,+CAA8C;AAC9C;AACA,kCAAiC,qBAAqB;AACtD,mCAAkC,qBAAqB;AACvD,yCAAwC,qBAAqB;AAC7D;AACA;AACA;AACA;AACA,2DAA0D;AAC1D;AACA;AACA;AACA,oEAAmE,cAAc;AACjF;AACA;AACA;AACA,mEAAkE,sBAAsB;AACxF;AACA;AACA;AACA,iEAAgE,yBAAyB;AACzF;AACA;AACA;AACA;AACA;AACA;AACA,qDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA6D;AAC7D;AACA;AACA;AACA,oDAAmD,mCAAmC;AACtF,kCAAiC,mCAAmC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA,uEAAsE;AACtE;AACA;AACA,2DAA0D,kBAAkB;AAC5E;AACA;AACA;AACA;AACA;AACA,oBAAmB,kBAAkB,MAAM,gBAAgB;AAC3D;AACA;AACA;AACA,8BAA6B,gBAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQ;AACR;AACA,gCAA+B,OAAO,qBAAqB;AAC3D,iCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQ;AACR;AACA;AACA;AACA;AACA,wBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAuC,kBAAkB;AACzD,6CAA4C,uBAAuB;AACnE;AACA;AACA;AACA;AACA,0CAAyC,mCAAmC;AAC5E;AACA;AACA;AACA;AACA;AACA,2CAA0C,2BAA2B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA6E,EAAE;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA6E,EAAE;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,0BAA0B;AACvE;AACA;AACA;AACA;AACA;AACA,oCAAmC,gBAAgB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,qCAAoC,OAAO;AAC3C;AACA,4BAA2B,6BAA6B;AACxD,qCAAoC,OAAO;AAC3C;AACA;AACA;AACA;AACA;AACA,+CAA8C;AAC9C;AACA;AACA;AACA,6DAA4D,iBAAiB;AAC7E,cAAa;AACb,0CAAyC,qBAAqB;AAC9D;AACA;AACA,uCAAsC,gBAAgB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,qCAAoC,OAAO;AAC3C;AACA,8BAA6B,eAAe;AAC5C,qCAAoC,OAAO;AAC3C;AACA;AACA;AACA;AACA;AACA,+CAA8C;AAC9C;AACA;AACA,mEAAkE,iBAAiB;AACnF;AACA,cAAa;AACb,0CAAyC,qBAAqB;AAC9D;AACA;AACA,wBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA4B,iCAAiC;AAC7D;AACA,yCAAwC,MAAM;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB,8BAA8B;AACnD;AACA,aAAY;AACZ;AACA,yCAAwC,MAAM;AAC9C,uDAAsD;AACtD;AACA;AACA;AACA,oCAAmC,YAAY;AAC/C,+CAA8C;AAC9C;AACA,6CAA4C,iBAAiB;AAC7D,cAAa;AACb,0CAAyC,qBAAqB;AAC9D,mCAAkC,qBAAqB;AACvD,kCAAiC,qBAAqB;AACtD;AACA;AACA,wCAAuC,gBAAgB;AACvD;AACA;AACA;AACA;AACA;AACA,2CAA0C;AAC1C;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA6D,iCAAiC,EAAE;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,yDAAwD,mCAAmC;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,2CAA0C;AAC1C;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,0DAAyD,8BAA8B,EAAE;AACzF;AACA;AACA;AACA;AACA,8DAA6D,gBAAgB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,MAAK;AACL;AACA,wEAAuE;AACvE;AACA;AACA,2DAA0D,kBAAkB;AAC5E;AACA;AACA;AACA;AACA,oBAAmB,kBAAkB,MAAM,gBAAgB;AAC3D;AACA;AACA;AACA,8BAA6B,gBAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA8B;AAC9B,gCAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAuC,kBAAkB;AACzD,6CAA4C,uBAAuB;AACnE;AACA;AACA;AACA;AACA,0CAAyC,mCAAmC;AAC5E;AACA;AACA,qBAAoB,sBAAsB;AAC1C;AACA,oDAAmD,6BAA6B;AAChF;AACA,0BAAyB,sBAAsB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB,sBAAsB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA8E,EAAE;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA8E,EAAE;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA8B,6BAA6B,EAAE;AAC7D;AACA;AACA,UAAS;AACT;AACA,oCAAmC,gBAAgB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAmC;AACnC;AACA;AACA,oCAAmC;AACnC;AACA;AACA;AACA;AACA,+CAA8C;AAC9C;AACA;AACA;AACA,qDAAoD,iBAAiB;AACrE,cAAa;AACb,0CAAyC,qBAAqB;AAC9D;AACA;AACA,uCAAsC,gBAAgB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAmC;AACnC;AACA;AACA,oCAAmC;AACnC;AACA;AACA;AACA;AACA,+CAA8C;AAC9C;AACA;AACA,2DAA0D,iBAAiB;AAC3E;AACA,cAAa;AACb,0CAAyC,qBAAqB;AAC9D;AACA;AACA,wBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,eAAc,8BAA8B;AAC5C;AACA;AACA;AACA,wCAAuC;AACvC,gDAA+C;AAC/C;AACA;AACA;AACA,oCAAmC,YAAY;AAC/C,+CAA8C;AAC9C;AACA,8CAA6C,iBAAiB;AAC9D,cAAa;AACb,0CAAyC,qBAAqB;AAC9D,mCAAkC,qBAAqB;AACvD,kCAAiC,qBAAqB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAuD,8CAA8C,sBAAsB,EAAE,EAAE;AAC/H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA6D,oBAAoB,EAAE;AACnF;AACA;AACA;AACA;AACA,oEAAmE,0CAA0C,EAAE;AAC/G,0CAAyC,sBAAsB,EAAE;AACjE;AACA;AACA;AACA,2DAA0D,8CAA8C,EAAE;AAC1G;AACA;AACA;AACA;AACA,oDAAmD,wCAAwC,EAAE;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,iDAAgD,gBAAgB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA,4DAA2D,eAAe,EAAE;AAC5E;AACA;AACA;AACA,yCAAwC,gBAAgB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQ,gBAAgB;AACxB;AACA;AACA;AACA,sEAAqE,cAAc;AACnF,6CAA4C,mBAAmB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,SAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAgC;AAChC;AACA;AACA,+BAA8B,wBAAwB,EAAE;AACxD;AACA;AACA,UAAS;AACT;AACA,+BAA8B,aAAa,EAAE;AAC7C;AACA;AACA,UAAS;AACT;AACA,+BAA8B,kBAAkB,EAAE;AAClD;AACA;AACA,UAAS;AACT;AACA,+BAA8B,WAAW,EAAE;AAC3C;AACA;AACA,UAAS;AACT;AACA,+BAA8B,2BAA2B,EAAE;AAC3D;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,qDAAoD,mBAAmB;AACvE,cAAa;AACb;AACA,uDAAsD,gCAAgC;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,6CAA4C;AAC5C;AACA;AACA,+CAA8C,mBAAmB;AACjE,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA,yDAAwD,gCAAgC;AACxF;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA,uDAAsD,8BAA8B;AACpF;AACA;AACA;AACA;AACA;AACA,iDAAgD,kBAAkB;AAClE;AACA,oCAAmC,mBAAmB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,gCAA+B,yDAAyD;AACxF;AACA;AACA,sBAAqB,IAAI;AACzB;AACA;AACA;AACA,cAAa,4BAA4B,+BAA+B,GAAG,2BAA2B,GAAG,qDAAqD,IAAI;AAClK,cAAa,4BAA4B,+BAA+B,GAAG,2BAA2B,GAAG,2DAA2D,IAAI;AACxK;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mLAAkL,4CAA4C,EAAE;AAChO,2OAA0O,gCAAgC,+BAA+B,QAAQ,EAAE;AACnT,yJAAwJ,0LAA0L,oCAAoC,qCAAqC,EAAE;AAC7Z;AACA,sLAAqL,iBAAiB;AACtM;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kVAAiV,iBAAiB;AAClW;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA,4DAA2D,qBAAqB,EAAE;AAClF;AACA;AACA,yCAAwC,gBAAgB;AACxD;AACA;AACA;AACA,uDAAsD,aAAa;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,wCAAwC,wFAAwF,IAAI;AACjJ;AACA;AACA;AACA,cAAa,uCAAuC,2BAA2B,GAAG,+BAA+B,IAAI;AACrH,cAAa,4BAA4B,+BAA+B,GAAG,2BAA2B,GAAG,qDAAqD,IAAI;AAClK,cAAa,4BAA4B,+BAA+B,GAAG,2BAA2B,GAAG,2DAA2D,IAAI;AACxK;AACA;AACA,uBAAsB,qDAAqD;AAC3E;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA,4DAA2D,gBAAgB,EAAE;AAC7E;AACA;AACA;AACA,+BAA8B,kBAAkB;AAChD;AACA;AACA,aAAY,kBAAkB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAiD,aAAa;AAC9D;AACA;AACA;AACA;AACA;AACA,iEAAgE,kBAAkB;AAClF;AACA;AACA;AACA;AACA,uDAAsD,+BAA+B;AACrF;AACA;AACA;AACA,SAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQ;AACR;AACA;AACA;AACA,0BAAyB;AACzB,oBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAqD,8DAA8D;AACnH;AACA,+BAA8B,sBAAsB,EAAE;AACtD;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,UAAS;AACT;AACA,+BAA8B,yDAAyD,EAAE;AACzF;AACA;AACA,UAAS;AACT;AACA,+BAA8B,+CAA+C,EAAE;AAC/E;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAkD,mBAAmB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAgD,gCAAgC,+BAA+B,EAAE,EAAE;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,sBAAqB,IAAI;AACzB;AACA;AACA;AACA,cAAa,uCAAuC,+BAA+B,GAAG,2BAA2B,IAAI;AACrH,cAAa,4BAA4B,+BAA+B,GAAG,2BAA2B,GAAG,qDAAqD,IAAI;AAClK,cAAa,4BAA4B,+BAA+B,GAAG,2BAA2B,GAAG,2DAA2D,IAAI;AACxK,cAAa,4BAA4B,+BAA+B,GAAG,2BAA2B,GAAG,yDAAyD,IAAI;AACtK;AACA;AACA,uBAAsB,4BAA4B;AAClD,6BAA4B,iDAAiD;AAC7E,wBAAuB,gDAAgD;AACvE,0BAAyB,uDAAuD;AAChF,yBAAwB,uDAAuD;AAC/E;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sZAAqZ,kCAAkC,+BAA+B,4FAA4F,EAAE;AACpjB;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA,4DAA2D,6BAA6B,EAAE;AAC1F;AACA;AACA,wCAAuC,kBAAkB;AACzD;AACA,+EAA8E;AAC9E;AACA;AACA,SAAQ,kBAAkB;AAC1B;AACA;AACA;AACA,iEAAgE,kBAAkB;AAClF,yBAAwB,kBAAkB;AAC1C,SAAQ,2BAA2B;AACnC;AACA,gFAA+E,sBAAsB;AACrG,uCAAsC,kBAAkB;AACxD,SAAQ,gBAAgB,qCAAqC,yBAAyB;AACtF;AACA;AACA;AACA,SAAQ,kBAAkB;AAC1B,SAAQ,sBAAsB;AAC9B;AACA,oFAAmF,kBAAkB;AACrG,wDAAuD,+BAA+B;AACtF,SAAQ,iCAAiC;AACzC;AACA;AACA,0BAAyB,mCAAmC;AAC5D,SAAQ,oCAAoC;AAC5C;AACA;AACA;AACA;AACA,SAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAwC,sCAAsC,EAAE;AAChF;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,mDAAkD,mBAAmB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA8B,WAAW,EAAE;AAC3C;AACA;AACA,UAAS;AACT;AACA,+BAA8B,+CAA+C,EAAE;AAC/E;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,UAAS;AACT;AACA,+BAA8B,kBAAkB,EAAE;AAClD;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,wCAAwC,mFAAmF,IAAI;AAC5I;AACA;AACA;AACA,cAAa,4BAA4B,+BAA+B,GAAG,2BAA2B,GAAG,qDAAqD,IAAI;AAClK,cAAa,4BAA4B,+BAA+B,GAAG,2BAA2B,GAAG,2DAA2D,IAAI;AACxK,cAAa,4BAA4B,+BAA+B,GAAG,2BAA2B,GAAG,yDAAyD,IAAI;AACtK;AACA;AACA,uBAAsB,oDAAoD;AAC1E,wBAAuB,gDAAgD;AACvE,yBAAwB,uDAAuD;AAC/E,6BAA4B,iDAAiD;AAC7E;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA,4DAA2D,2BAA2B,EAAE;AACxF;AACA;AACA,uCAAsC,gBAAgB;AACtD;AACA;AACA;AACA,4CAA2C,gBAAgB;AAC3D,SAAQ,gBAAgB,8BAA8B,kBAAkB,GAAG,gBAAgB;AAC3F,aAAY,gBAAgB,qBAAqB,sBAAsB,GAAG,oBAAoB;AAC9F,aAAY,oBAAoB;AAChC;AACA;AACA,SAAQ,gBAAgB,sDAAsD,gBAAgB;AAC9F,SAAQ,+BAA+B,KAAK,iCAAiC;AAC7E;AACA;AACA,gBAAe,gBAAgB,IAAI,mCAAmC;AACtE,aAAY,oCAAoC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQ;AACR;AACA;AACA;AACA,uBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA8B,wBAAwB,EAAE;AACxD;AACA;AACA,UAAS;AACT;AACA,+BAA8B,aAAa,EAAE;AAC7C;AACA;AACA,UAAS;AACT;AACA,+BAA8B,kBAAkB,EAAE;AAClD;AACA;AACA,UAAS;AACT;AACA,+BAA8B,WAAW,EAAE;AAC3C;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,0CAAyC,mBAAmB;AAC5D;AACA;AACA;AACA,mEAAkE,gCAAgC;AAClG,sEAAqE,0CAA0C;AAC/G;AACA;AACA;AACA,0CAAyC,mBAAmB;AAC5D;AACA,wEAAuE;AACvE,qEAAoE,gCAAgC;AACpG;AACA;AACA;AACA,0CAAyC,mBAAmB;AAC5D;AACA,wEAAuE;AACvE,qEAAoE,gCAAgC;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA4D,kBAAkB;AAC9E;AACA,oCAAmC,mBAAmB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,4CAA2C,mBAAmB;AAC9D;AACA;AACA;AACA,gEAA+D,gCAAgC,EAAE;AACjG;AACA,wEAAuE,EAAE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,gCAA+B,yDAAyD;AACxF;AACA,sBAAqB,IAAI;AACzB;AACA;AACA;AACA,cAAa,4BAA4B,+BAA+B,GAAG,2BAA2B,GAAG,qDAAqD,IAAI;AAClK,cAAa,4BAA4B,+BAA+B,GAAG,2BAA2B,GAAG,2DAA2D,IAAI;AACxK;AACA;AACA,uBAAsB,kDAAkD;AACxE,2BAA0B,6BAA6B;AACvD;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA,4DAA2D,sBAAsB,EAAE;AACnF;AACA;AACA,oCAAmC,gBAAgB;AACnD;AACA;AACA;AACA,uDAAsD,yBAAyB;AAC/E;AACA;AACA,kDAAiD,gBAAgB;AACjE,yBAAwB,gBAAgB;AACxC,SAAQ,gBAAgB,2BAA2B,yBAAyB;AAC5E;AACA;AACA;AACA;AACA;AACA,6DAA4D,gBAAgB;AAC5E,SAAQ,0BAA0B;AAClC;AACA;AACA;AACA;AACA;AACA,SAAQ,gBAAgB,8CAA8C,sBAAsB;AAC5F;A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ACA;AACA;AACA,yCAAwC,sCAAsC,EAAE;AAChF;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA8B,6CAA6C,EAAE;AAC7E;AACA;AACA,UAAS;AACT;AACA,+BAA8B,yDAAyD,EAAE;AACzF;AACA;AACA,UAAS;AACT;AACA,+BAA8B,+CAA+C,EAAE;AAC/E;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,UAAS;AACT;AACA,+BAA8B,sBAAsB,EAAE;AACtD;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,wCAAwC,iEAAiE,IAAI;AAC1H;AACA;AACA;AACA,cAAa,uCAAuC,+BAA+B,GAAG,2BAA2B,GAAG,+BAA+B,IAAI;AACvJ,cAAa,4BAA4B,+BAA+B,GAAG,2BAA2B,GAAG,qDAAqD,IAAI;AAClK,cAAa,4BAA4B,+BAA+B,GAAG,2BAA2B,GAAG,2DAA2D,IAAI;AACxK,cAAa,4BAA4B,+BAA+B,GAAG,2BAA2B,GAAG,yDAAyD,IAAI;AACtK;AACA;AACA,uBAAsB,wDAAwD;AAC9E,wBAAuB,gDAAgD;AACvE,yBAAwB,uDAAuD;AAC/E,6BAA4B,iDAAiD;AAC7E;AACA;AACA,MAAK;;AAEL;AACA;AACA,4DAA2D,0BAA0B,EAAE;AACvF;AACA;AACA;AACA;AACA,uCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA8B,uBAAuB,EAAE;AACvD;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,gFAA+E,qBAAqB;AACpG;AACA,cAAa;AACb;AACA;AACA,gCAA+B;AAC/B,sBAAqB,IAAI;AACzB;AACA;AACA;AACA;AACA,2BAA0B,4BAA4B;AACtD;AACA;AACA,MAAK;AACL;AACA,6BAA4B,yBAAyB,KAAK,oBAAoB;AAC9E;AACA;AACA;AACA,SAAQ;AACR;AACA;AACA;AACA,4DAA2D,2BAA2B,EAAE;AACxF;AACA;AACA;AACA,wCAAuC,yBAAyB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAgF,qBAAqB;AACrG;AACA,cAAa;AACb;AACA;AACA,gCAA+B;AAC/B,sBAAqB,IAAI;AACzB;AACA;AACA;AACA;AACA,4BAA2B,4BAA4B;AACvD;AACA;AACA,MAAK;AACL;AACA,6BAA4B,yBAAyB,KAAK,oBAAoB;AAC9E;AACA;AACA;AACA,SAAQ;AACR;AACA;AACA;AACA,4DAA2D,2BAA2B,EAAE;AACxF;AACA;AACA;AACA,wCAAuC,yBAAyB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAgF,qBAAqB;AACrG;AACA,cAAa;AACb;AACA;AACA,gCAA+B;AAC/B,sBAAqB,IAAI;AACzB;AACA;AACA;AACA;AACA,4BAA2B,4BAA4B;AACvD;AACA;AACA,MAAK;AACL;AACA;AACA,4DAA2D,yBAAyB,EAAE;AACtF;AACA;AACA;AACA;AACA,sCAAqC,oBAAoB;AACzD;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAmE,oDAAoD;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA8E,qBAAqB;AACnG;AACA,cAAa;AACb;AACA;AACA,gCAA+B;AAC/B,sBAAqB,IAAI;AACzB;AACA;AACA;AACA;AACA,0BAAyB,4BAA4B;AACrD;AACA;AACA,MAAK;;AAEL;AACA,gCAA+B,sBAAsB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQ;AACR;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA4B,gBAAgB;AAC5C;AACA;AACA,qBAAoB,gBAAgB;AACpC;AACA;AACA,oCAAmC,cAAc;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,6BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAuC,kBAAkB;AACzD,6CAA4C,uBAAuB;AACnE;AACA;AACA;AACA,yBAAwB,gBAAgB;AACxC;AACA;AACA;AACA;AACA,wCAAuC,kBAAkB;AACzD,6CAA4C,uBAAuB;AACnE,6DAA4D,gCAAgC,EAAE;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,iCAAiC;AAC9C;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa,uCAAuC,wEAAwE,IAAI;AAChI;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,sBAAqB,IAAI;AACzB;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,sBAAqB,IAAI;AACzB;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAC;;;;;;;ACp1ID;AACA;AACA;AACA;AACA,aAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAsC,kBAAkB,EAAE,kBAAkB,oBAAoB,EAAE,eAAe,uBAAuB,EAAE;AAC1I,MAAK;AACL;AACA;AACA,sC;;;;;;AC3BA;AACA;AACA;AACA,wC;;;;;;ACHA;AACA;AACA;AACA,oBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,cAAa;AACb;AACA,gBAAe,WAAW;AAC1B,gBAAe,UAAU;AACzB;AACA,iBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,yDAAwD,WAAW,EAAE;AACrE,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iEAAgE,4CAA4C;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA4E,uCAAuC;AACnH;AACA,kBAAiB;AACjB;AACA,8EAA6E,mCAAmC;AAChH;AACA,kBAAiB;AACjB;AACA;AACA,yDAAwD,WAAW,EAAE;AACrE,kBAAiB;AACjB;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8C;;;;;;;;;;;;;ACxHA,qCAAuC;AACvC,wCAA6C;AAC7C,uCAA2C;AAC3C,iDAA2D;AAC3D,yDAAgE;AAChE,2DAAmE;AACnE,2DAAoE;AACpE,kDAAmD;AAanD,KAAa,YAAY;KAAzB;KAA2B,CAAC;KAAD,mBAAC;AAAD,EAAC;AAAf,aAAY;KAVxB,eAAQ,CAAC;SACN,OAAO,EAAE,CAAC,qBAAY,EAAE,mBAAW,EAAE,gCAAc,CAAC;SACpD,YAAY,EAAE;aACV,kCAAe;aACf,mDAAuB;aACvB,kDAAsB;aACtB,+CAAqB;UACxB;SACD,OAAO,EAAE,CAAC,kCAAe,CAAC;MAC7B,CAAC;IACW,YAAY,CAAG;AAAf,qCAAY;;;;;;;;;;;;;;ACpBzB,qCAAuC;AACvC,wCAA6C;AAC7C,oDAAuD;AAQvD,KAAa,cAAc;KAA3B;KAA6B,CAAC;KAAD,qBAAC;AAAD,EAAC;AAAjB,eAAc;KAL1B,eAAQ,CAAC;SACN,OAAO,EAAE,CAAC,qBAAY,CAAC;SACvB,YAAY,EAAE,CAAC,sCAAiB,CAAC;SACjC,OAAO,EAAE,CAAC,sCAAiB,CAAC;MAC/B,CAAC;IACW,cAAc,CAAG;AAAjB,yCAAc;;;;;;;;;;;;;;;;;ACV3B,qCAAqE;AAErE,aAAY;AAUZ,KAAa,iBAAiB;KAT9B;SAWa,eAAU,GAAY,KAAK,CAAC;SAE5B,YAAO,GAAY,IAAI,CAAC;SACxB,gBAAW,GAAW,EAAE,CAAC,CAAC,0DAA0D;SACnF,aAAQ,GAAG,IAAI,mBAAY,EAAE,CAAC;KAY5C,CAAC;KAVG;;;QAGG;KACO,wCAAY,GAAtB,UAAuB,MAAM;SAEzB,MAAM,CAAC,cAAc,EAAE,CAAC;SACxB,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC;SACnC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KACxC,CAAC;KACL,wBAAC;AAAD,EAAC;AAhBY;KAAR,YAAK,EAAE;;sDAA6B;AAC5B;KAAR,YAAK,EAAE;;iDAAe;AACd;KAAR,YAAK,EAAE;;mDAAyB;AACxB;KAAR,YAAK,EAAE;;uDAA0B;AACxB;KAAT,aAAM,EAAE;;oDAA+B;AAN/B,kBAAiB;KAT7B,gBAAS,CAAC;SACP,QAAQ,EAAE,aAAa;SACvB,QAAQ,EAAE,gRAKT;MACJ,CAAC;IACW,iBAAiB,CAkB7B;AAlBY,+CAAiB;;;;;;;;;;;;;;;;;;;;ACZ9B,qCAA6E;AAG7E,aAAY;AAkBZ,KAAa,qBAAqB;KAW9B,+BACc,WAAuB,EACA,cAAmB,EACP,YAAiB;SAFpD,gBAAW,GAAX,WAAW,CAAY;SACA,mBAAc,GAAd,cAAc,CAAK;SACP,iBAAY,GAAZ,YAAY,CAAK;SAblE,+FAA+F;SACtF,aAAQ,GAAQ,IAAI,CAAC;SAE9B,6DAA6D;SACnD,iBAAY,GAAa,CAAC,UAAU,CAAC,CAAC;SAItC,gBAAW,GAAY,KAAK,CAAC;KAMpC,CAAC;KAEJ;;;QAGG;KACO,gDAAgB,GAA1B,UAA2B,MAAM;SAE7B,IAAI,CAAC,WAAW,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;KACzC,CAAC;KAED;;;QAGG;KACO,+CAAe,GAAzB,UAA0B,MAAM;SAE5B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;aAC1D,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;SAC7B,CAAC;KACL,CAAC;KAED;;QAEG;KACH,wCAAQ,GAAR;SAEI,iDAAiD;SACjD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;aAChB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;SACzD,CAAC;SAED,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,kBAAkB,EAAE,CAAC;SACtD,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;SAC3D,IAAI,CAAC,eAAe,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;KAC3E,CAAC;KACL,4BAAC;AAAD,EAAC;AAjDY;KAAR,YAAK,EAAE;;wDAAsB;AAFrB,sBAAqB;KAjBjC,gBAAS,CAAC;SACP,QAAQ,EAAE,iBAAiB;SAC3B,QAAQ,EAAE,upBAUT;SACD,IAAI,EAAE;aACF,kBAAkB,EAAE,yBAAyB;UAChD;MACJ,CAAC;KAcO,wBAAM,CAAC,eAAe,CAAC;KACvB,0BAAQ,EAAE,GAAE,wBAAM,CAAC,aAAa,CAAC;sCAFX,iBAAU;IAZ5B,qBAAqB,CAmDjC;AAnDY,uDAAqB;;;;;;;;;;;;;;;;;;;;ACrBlC,qCAA6E;AAG7E,aAAY;AAgCZ,KAAa,sBAAsB;KAW/B,gCACc,WAAuB,EACA,cAAmB,EACP,YAAiB;SAFpD,gBAAW,GAAX,WAAW,CAAY;SACA,mBAAc,GAAd,cAAc,CAAK;SACP,iBAAY,GAAZ,YAAY,CAAK;SAblE,+FAA+F;SACtF,aAAQ,GAAQ,IAAI,CAAC;SAE9B,iEAAiE;SACvD,iBAAY,GAAa,CAAC,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;SAIvE,gBAAW,GAAY,KAAK,CAAC;KAMpC,CAAC;KAEJ;;;QAGG;KACO,oCAAG,GAAb,UAAc,MAAa;SAAb,sCAAa;SAEvB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;aACT,MAAM,CAAC,cAAc,EAAE,CAAC;aACxB,MAAM,CAAC,eAAe,EAAE,CAAC;SAC7B,CAAC;SAED,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;aACpB,KAAK,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;aACxD,KAAK,EAAE,KAAK;UACf,CAAC,CAAC;KACP,CAAC;KAED;;;;QAIG;KACO,oCAAG,GAAb,UAAc,MAAM,EAAE,KAAa;SAE/B,MAAM,CAAC,cAAc,EAAE,CAAC;SACxB,MAAM,CAAC,eAAe,EAAE,CAAC;SACzB,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;KACxC,CAAC;KAED;;;QAGG;KACO,iDAAgB,GAA1B,UAA2B,MAAM;SAE7B,IAAI,CAAC,WAAW,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;KACzC,CAAC;KAED;;;QAGG;KACO,gDAAe,GAAzB,UAA0B,MAAM;SAE5B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;aAC1D,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;SAC7B,CAAC;KACL,CAAC;KAED;;QAEG;KACH,yCAAQ,GAAR;SAEI,iDAAiD;SACjD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;aAChB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;SACzD,CAAC;SAED,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,sBAAsB,CAAC,SAAS,CAAC,CAAC;SACzE,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;SAC3D,IAAI,CAAC,eAAe,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;SAEvE,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;aAChC,IAAI,CAAC,GAAG,EAAE,CAAC;SACf,CAAC;KACL,CAAC;KACL,6BAAC;AAAD,EAAC;AAlFY;KAAR,YAAK,EAAE;;yDAAsB;AAFrB,uBAAsB;KA/BlC,gBAAS,CAAC;SACP,QAAQ,EAAE,kBAAkB;SAC5B,QAAQ,EAAE,qkDAwBT;SACD,IAAI,EAAE;aACF,kBAAkB,EAAE,yBAAyB;UAChD;MACJ,CAAC;KAcO,wBAAM,CAAC,eAAe,CAAC;KACvB,0BAAQ,EAAE,GAAE,wBAAM,CAAC,aAAa,CAAC;sCAFX,iBAAU;IAZ5B,sBAAsB,CAoFlC;AApFY,yDAAsB;;;;;;;;;;;;;;;;;;;;ACnCnC,qCAA6E;AAI7E;;IAEG;AACH;KAAA;SACI,uBAAuB;SACb,aAAQ,GAAG;aACjB,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,EAAE;aAC7B,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE;aACzB,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE;aAC3B,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE;UAC9B,CAAC;SAEF,wCAAwC;SAC9B,qBAAgB,GAAG;aACzB,MAAM,EAAE,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC,EAAC,EAAE,CAAC,CAAC;aAChD,SAAS,EAAE,CAAC;UACf,CAAC;SAEF,6CAA6C;SACnC,oBAAe,GAAG;aACxB,MAAM,EAAE,QAAQ;aAChB,MAAM,EAAE,QAAQ;aAChB,MAAM,EAAE,KAAK;aACb,SAAS,EAAE,IAAI;UAClB,CAAC;KA8BN,CAAC;KA5BG;;;QAGG;KACI,sCAAU,GAAjB;SAEI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;KACzB,CAAC;KAED;;;;QAIG;KACI,0CAAc,GAArB,UAAsB,IAAmB;SAAnB,kCAAmB;SAErC,MAAM,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;KACtF,CAAC;KAED;;;;QAIG;KACI,2CAAe,GAAtB,UAAuB,IAAmB;SAAnB,kCAAmB;SAEtC,MAAM,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;KACtF,CAAC;KACL,wBAAC;AAAD,EAAC;AAnDY,+CAAiB;AAqD9B,aAAY;AA+CZ,KAAa,uBAAuB;KAYhC,iCACc,WAAuB,EACA,cAAmB,EACP,YAAiB;SAFpD,gBAAW,GAAX,WAAW,CAAY;SACA,mBAAc,GAAd,cAAc,CAAK;SACP,iBAAY,GAAZ,YAAY,CAAK;SAdlE,+FAA+F;SACtF,aAAQ,GAAQ,IAAI,CAAC;SAE9B,mEAAmE;SACzD,iBAAY,GAAa,CAAC,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;SAIvE,gBAAW,GAAY,KAAK,CAAC;SAQnC,IAAI,CAAC,kBAAkB,GAAG,IAAI,iBAAiB,EAAE,CAAC;KACtD,CAAC;KAED;;;;QAIG;KACO,6CAAW,GAArB,UAAsB,QAAa,EAAE,KAAoB;SAApB,oCAAoB;SAErD,KAAK,GAAG,CAAC,KAAK,IAAI,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;SACrC,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;aAChC,QAAQ,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;aAC/F,QAAQ,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;SACrG,CAAC;KACL,CAAC;KAED;;;QAGG;KACO,qCAAG,GAAb,UAAc,MAAa;SAAb,sCAAa;SAEvB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;aACT,MAAM,CAAC,cAAc,EAAE,CAAC;aACxB,MAAM,CAAC,eAAe,EAAE,CAAC;SAC7B,CAAC;SAED,IAAI,QAAQ,GAAG;aACX,KAAK,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;aACjD,IAAI,EAAE,IAAI;aACV,KAAK,EAAE,IAAI;UACd,CAAC;SAEF,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;SAEjC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KACrC,CAAC;KAED;;;;QAIG;KACO,qCAAG,GAAb,UAAc,MAAM,EAAE,KAAa;SAE/B,MAAM,CAAC,cAAc,EAAE,CAAC;SACxB,MAAM,CAAC,eAAe,EAAE,CAAC;SACzB,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;KACvC,CAAC;KAED;;;QAGG;KACO,kDAAgB,GAA1B,UAA2B,MAAM;SAE7B,IAAI,CAAC,WAAW,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;KACzC,CAAC;KAED;;;;QAIG;KACO,+CAAa,GAAvB,UAAwB,MAAM,EAAE,QAAa;SAEzC,yFAAyF;SACzF,IAAI,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI,CAAC;SACxC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;KACtC,CAAC;KAED;;;QAGG;KACO,iDAAe,GAAzB,UAA0B,MAAM;SAE5B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;aAC1D,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;SAC7B,CAAC;KACL,CAAC;KAED;;QAEG;KACH,0CAAQ,GAAR;SAEI,iDAAiD;SACjD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;aAChB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;SACzD,CAAC;SAED,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;SACzE,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;SAC3D,IAAI,CAAC,eAAe,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;SAEvE,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;aAC/B,IAAI,CAAC,GAAG,EAAE,CAAC;SACf,CAAC;KACL,CAAC;KACL,8BAAC;AAAD,EAAC;AApHY;KAAR,YAAK,EAAE;;0DAAsB;AAFrB,wBAAuB;KA9CnC,gBAAS,CAAC;SACP,QAAQ,EAAE,mBAAmB;SAC7B,QAAQ,EAAE,mkFAuCT;SACD,IAAI,EAAE;aACF,kBAAkB,EAAE,yBAAyB;UAChD;MACJ,CAAC;KAeO,wBAAM,CAAC,eAAe,CAAC;KACvB,0BAAQ,EAAE,GAAE,wBAAM,CAAC,aAAa,CAAC;sCAFX,iBAAU;IAb5B,uBAAuB,CAsHnC;AAtHY,2DAAuB;;;;;;;;;;;;;;;;;;;;AC3GpC,qCAA2E;AAE3E,iDAA0D;AAE1D,aAAY;AAYZ,KAAa,eAAe;KAIxB,yBACiD,YAAiB,EACxC,eAA+B;SADR,iBAAY,GAAZ,YAAY,CAAK;SACxC,oBAAe,GAAf,eAAe,CAAgB;SALzD,+FAA+F;SACtF,aAAQ,GAAQ,IAAI,CAAC;KAK3B,CAAC;KAEJ;;;QAGG;KACI,sCAAY,GAAnB,UAAoB,MAAW;SAE3B,MAAM,CAAC,cAAc,EAAE,CAAC;SACxB,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;KAC/B,CAAC;KAED;;QAEG;KACH,kCAAQ,GAAR;SAEI,iDAAiD;SACjD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;aAChB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;aACrD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,gCAAc,CAAC,CAAC;SAC7D,CAAC;KACL,CAAC;KACL,sBAAC;AAAD,EAAC;AA5BY;KAAR,YAAK,EAAE;;kDAAsB;AAFrB,gBAAe;KAX3B,gBAAS,CAAC;SACP,QAAQ,EAAE,WAAW;SACrB,QAAQ,EAAE,0WAOT;MACJ,CAAC;KAMO,0BAAQ,EAAE,GAAE,wBAAM,CAAC,aAAa,CAAC;KACjC,0BAAQ,EAAE;8CAA4B,gCAAc;IANhD,eAAe,CA8B3B;AA9BY,2CAAe;;;;;;;;;;;;;;;;;;;;AChB5B,qCAAiD;AAQjD,KAAa,cAAc;KA8DvB,wBAC8C,SAAiC;SAAjC,cAAS,GAAT,SAAS,CAAwB;SA9D/E,8EAA8E;SAC9E,sGAAsG;SAC5F,SAAI,GAAG;aACb,IAAI,EAAE,WAAW;aACjB,SAAS,EAAE,KAAK;UACnB,CAAC;SACQ,QAAG,GAAG;aACZ,IAAI,EAAE,SAAS;aACf,SAAS,EAAE,KAAK;UACnB,CAAC;SACQ,SAAI,GAAG;aACb,IAAI,EAAE,SAAS;aACf,SAAS,EAAE,KAAK;UACnB,CAAC;SACQ,cAAS,GAAG;aAClB,IAAI,EAAE,cAAc;aACpB,SAAS,EAAE,KAAK;UACnB,CAAC;SACQ,WAAM,GAAG;aACf,IAAI,EAAE,SAAS;aACf,SAAS,EAAE,KAAK;UACnB,CAAC;SACQ,WAAM,GAAG;aACf,IAAI,EAAE,QAAQ;aACd,SAAS,EAAE,KAAK;UACnB,CAAC;SACQ,WAAM,GAAG;aACf,IAAI,EAAE,YAAY;aAClB,SAAS,EAAE,KAAK;UACnB,CAAC;SACQ,WAAM,GAAG;aACf,IAAI,EAAE,WAAW;aACjB,SAAS,EAAE,KAAK;UACnB,CAAC;SACQ,YAAO,GAAG;aAChB,IAAI,EAAE,YAAY;aAClB,SAAS,EAAE,IAAI;UAClB,CAAC;SACQ,aAAQ,GAAG;aACjB,SAAS,EAAE,KAAK;UACnB,CAAC;SACQ,cAAS,GAAG;aAClB,IAAI,EAAE,YAAY;aAClB,SAAS,EAAE,KAAK;UACnB,CAAC;SACQ,aAAQ,GAAG;aACjB,IAAI,EAAE,mBAAmB;aACzB,SAAS,EAAE,KAAK;UACnB,CAAC;SACQ,YAAO,GAAG;aAChB,IAAI,EAAE,oBAAoB;aAC1B,SAAS,EAAE,KAAK;UACnB,CAAC;SACQ,cAAS,GAAG;aAClB,IAAI,EAAE,sBAAsB;aAC5B,SAAS,EAAE,KAAK;UACnB,CAAC;SAEQ,iBAAY,GAAa,CAAC,SAAS,EAAE,WAAW,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC,sCAAsC;SAC5G,mBAAc,GAAa,CAAC,SAAS,EAAE,WAAW,EAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,oCAAoC;SAK1J,EAAE,EAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;aAChB,GAAG,CAAC,CAAC,IAAI,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;iBAChC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;qBACb,KAAK,OAAO;yBACR,IAAI,CAAC,SAAS,CAAC,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;yBACtD,IAAI,CAAC,WAAW,CAAC,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;yBACxD,KAAK,CAAC;qBACV;yBACI,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;6BACf,IAAI,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;yBACvD,CAAC;iBACT,CAAC;aACL,CAAC;SACL,CAAC;KACL,CAAC;KAED;;;;;QAKG;KACI,sCAAa,GAApB,UAAqB,MAAc,EAAE,SAAiB;SAElD,EAAE,EAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;aAC7C,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC;SACnC,CAAC;SACD,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;QAGG;KACI,uCAAc,GAArB;SAEI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;KAC7B,CAAC;KAED;;;QAGG;KACI,yCAAgB,GAAvB;SAEI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;KAC/B,CAAC;KACL,qBAAC;AAAD,EAAC;AAhHY,eAAc;KAD1B,iBAAU,EAAE;KAgEJ,wBAAM,CAAC,wBAAwB,CAAC;;IA/D5B,cAAc,CAgH1B;AAhHY,yCAAc;;;;;;;;;;;;;;;;;ACR3B,qCAAyC;AACzC,uDAA+E;AAY/E,WAAU;AAEV,KAAa,WAAW;KACpB,qBACY,oBAAyC;SAAzC,yBAAoB,GAApB,oBAAoB,CAAqB;KAClD,CAAC;KAEJ;;;;;QAKG;KACI,0BAAI,GAAX,UAAY,GAAW,EAAE,IAAS;SAE9B,IAAI,IAAI,GAAG,IAAI,CAAC;SAEhB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM;aACvC,MAAM,CAAC,CAAC,CAAC,IAAI,CACT,GAAG,EACH,IAAI,EACJ,sBAAY;iBACR,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;iBACvC,IAAI,SAAS,GAAG,CAAC,YAAY,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;iBAC3C,OAAO,YAAY,CAAC,MAAM,CAAC,CAAC,uBAAuB;iBAEnD,UAAU;iBACV,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;qBAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC;iBAAC,CAAC;iBAEhE,QAAQ;iBACR,IAAI,MAAM,GAAG,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;iBAC5C,iCAAiC;iBACjC,EAAE,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;qBACvB,EAAE,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;yBACpC,MAAM,CAAC,WAAW,CAAC,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,CAAC;qBAC5D,CAAC;qBACD,EAAE,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;yBACjC,MAAM,CAAC,QAAQ,CAAC,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC;qBACtD,CAAC;iBACL,CAAC;iBACD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;aAE1B,CAAC,CACJ,CAAC;SACN,CAAC,CAAC,CAAC;SAEH;;;;;;;;;;;cAWK;KACT,CAAC;KAED;;;;QAIG;KACK,yCAAmB,GAA3B,UAA4B,YAA0B;SAElD,iDAAiD;SACjD,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC;aAC9B,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAC7B,sDAAsD,EACtD,eAAe,EACf,yCAAiB,CAAC,KAAK,CAC1B,CAAC;SACN,CAAC;SAED,iBAAiB;SACjB,EAAE,CAAC,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,CAAC;aAC7B,GAAG,CAAC,CAAqB,UAA0B,EAA1B,iBAAY,CAAC,aAAa,EAA1B,cAA0B,EAA1B,IAA0B;iBAA9C,IAAI,YAAY;iBACjB,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAC7B,YAAY,CAAC,IAAI,EACjB,YAAY,CAAC,IAAI,EACjB,YAAY,CAAC,IAAI,CACpB,CAAC;cACL;aACD,OAAO,YAAY,CAAC,aAAa,CAAC,CAAC,yBAAyB;SAChE,CAAC;SAED,MAAM,CAAC,YAAY,CAAC;KACxB,CAAC;KACL,kBAAC;AAAD,EAAC;AAxFY,YAAW;KADvB,iBAAU,EAAE;sCAGyB,2CAAmB;IAF5C,WAAW,CAwFvB;AAxFY,mCAAW;;;;;;;;;;;;;;;;;ACfxB,qCAA+E;AAC/E,kEAAwF;AACxF,+DAA2E;AAC3E,kDAA+D;AAI1C,4DAAc;AAHnC,yDAA4E;AAGvC,2DAAU;AAe/C,eAAc;AACH,mBAAU,GAAG;KACpB,OAAO,EAAE,SAAS;KAClB,IAAI,EAAE,MAAM;KACZ,OAAO,EAAE,SAAS;KAClB,KAAK,EAAE,OAAO;EACjB,CAAC;AAGF,wBAAuB;AACvB,gEAA6E;AAG7E;;;IAGG;AAEH,KAAa,YAAY;KAOrB,sBACc,8BAA6D;SAA7D,mCAA8B,GAA9B,8BAA8B,CAA+B;SALjE,kBAAa,GAAW,CAAC,CAAC,CAAC,uDAAuD;SAElF,aAAQ,GAAY,KAAK,CAAC,CAAC,0BAA0B;KAI5D,CAAC;KAEJ;;;;QAIG;KACI,2BAAI,GAAX,UAAY,gBAAkC;SAE1C,wBAAwB;SACxB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;aAAC,MAAM,CAAC,IAAI,CAAC;SAAC,CAAC;SAEnC,IAAI,IAAI,GAAG,IAAI,CAAC;SAEhB,gCAAgC;SAChC,IAAI,CAAC,8BAA8B,CAAC,mBAAmB,CAAC,4DAA2B,EAAE,uBAAuB,CAAC,CAAC,IAAI,CAC9G,0BAAgB;aACZ,IAAI,CAAC,sBAAsB,GAAG,gBAAgB,CAAC;SACnD,CAAC,CAAC,CAAC;SAEP,4BAA4B;SAC5B,IAAI,CAAC,qBAAqB,GAAG,gBAAgB,CAAC;SAE9C,mBAAmB;SACnB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC;SAExB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;SACrB,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;;;;;;;;;;;;;;;;;QAmBG;KACI,4BAAK,GAAZ,UAAa,KAAY,EAAE,QAAe;SAAf,0CAAe;SAEtC,IAAI,IAAI,GAAG,IAAI,EACX,iBAAiB,GAAG,IAAI,CAAC,qBAAqB,CAAC,eAAe,CAC1D,IAAI,CAAC,sBAAsB,EAC3B,IAAI,CAAC,qBAAqB,CAAC,MAAM,EACjC,IAAI,EACJ,EAAE,CACL,EACD,sBAAsB,GAA0B,iBAAiB,CAAC,QAAQ,CAAC;SAE/E;;mCAE0B;SAE1B,iBAAiB;SACjB,sBAAsB,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SAE3C,iBAAiB;SACjB,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,KAAK,CAAC,CAAC,CAAC,CAAC;aAC3B,wBAAwB;aACxB,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;SAC3C,CAAC;SACD,IAAI,CAAC,aAAa,EAAE,CAAC;SAErB,kBAAkB;SAClB,EAAE,CAAC,CAAC,QAAQ,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;aAC9B,IAAI,mBAAmB,GAAG,CAAC,KAAK,CAAC,SAAS,IAAI,EAAE,CAAC,EAC7C,iBAAiB,GAAG,yBAAkB,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;aACxE,KAAK,CAAC,QAAQ,GAAG,yBAAkB,CAAC,qBAAqB,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAC;SAC3F,CAAC;SAED,eAAe;SACf,MAAM,CAAC,IAAI,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM;aACvC,IAAI,CAAC,8BAA8B,CAAC,IAAI,CACpC,KAAK,CAAC,MAAM,EACZ,KAAK,CAAC,SAAS,EACf,sBAAsB,CAAC,oBAAoB,EAAE,EAC7C,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,CAC3B,CAAC,IAAI,CACF,sBAAY;iBACR,IAAI,cAAc,GAAG,IAAI,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM;qBACrD,kBAAkB;qBAClB,IAAI,qBAAqB,GAAG,YAAY,CAAC,QAAQ,CAAC,gBAAgB,CAAC,SAAS,CACxE,cAAI;yBACA,qBAAqB,CAAC,WAAW,EAAE,CAAC;yBAEpC,mBAAmB;yBACnB,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;yBACzE,8DAA8D;yBAC9D,+BAA+B;yBAE/B,iBAAiB;yBACjB,IAAI,CAAC,aAAa,EAAE,CAAC;yBACrB,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,KAAK,CAAC,CAAC,CAAC,CAAC;6BAC3B,yBAAyB;6BACzB,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;yBAC9C,CAAC;yBAED,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;qBACzB,CAAC,CACJ,CAAC;iBACN,CAAC,CAAC,CAAC;iBAEH,aAAa;iBACb,sBAAsB,CAAC,IAAI,EAAE,CAAC;iBAE9B,MAAM,CAAC,OAAO,CAAC;qBACX,YAAY,EAAE,YAAY;qBAC1B,cAAc,EAAE,cAAc;kBACjC,CAAC,CAAC;aACP,CAAC,EACD,gBAAM;iBACF,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;iBACpB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;aACxB,CAAC,CACJ,CAAC;SACN,CAAC,CAAC,CAAC;KACP,CAAC;KAED;;;;;;QAMG;KACI,6BAAM,GAAb,UACI,IAA8B,EAC9B,KAAyB,EACzB,IAAoB;SAFpB,6CAA8B;SAC9B,yCAAyB;SACzB,8BAAO,oCAAU,CAAC,EAAE;SAEpB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;KACrD,CAAC;KAED;;;;;;QAMG;KACI,4BAAK,GAAZ,UACI,IAA8B,EAC9B,KAAyB,EACzB,IAAoB;SAFpB,6CAA8B;SAC9B,yCAAyB;SACzB,8BAAO,oCAAU,CAAC,EAAE;SAEpB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;KACtD,CAAC;KAED;;;;;;;;;;;;;;;;;QAiBG;KACO,kCAAW,GAArB,UACI,IAA8B,EAC9B,KAAyB,EACzB,QAAwB,EACxB,IAAoB;SAHpB,6CAA8B;SAC9B,yCAAyB;SACzB,0CAAwB;SACxB,8BAAO,oCAAU,CAAC,EAAE;SAEpB,IAAI,IAAI,GAAG,IAAI,CAAC;SAEhB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM;aACvC,IAAI,KAAK,GAAU;iBACf,MAAM,EAAE,0DAA0B;iBAClC,SAAS,EAAE,sBAAsB;iBACjC,IAAI,EAAE,IAAI;cACb,CAAC;aAEF,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAClB,cAAI;iBACA,uBAAuB;iBACvB,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;iBAC/E,IAAI,CAAC,cAAc,CAAC,IAAI,CACpB,qBAAW,IAAM,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAC/C,gBAAM,IAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAC3D,CAAC;aACN,CAAC,EACD,gBAAM,IAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAC3D,CAAC;SACN,CAAC,CAAC,CAAC;KACP,CAAC;KAED;;;;QAIG;KACO,yCAAkB,GAA5B,UAA6B,IAAY;SACrC,MAAM,CAAC,CAAC,kBAAU,CAAC,IAAI,CAAC,IAAI,kBAAU,CAAC,IAAI,CAAC,CAAC;KACjD,CAAC;KACL,mBAAC;AAAD,EAAC;AAhOY,aAAY;KADxB,iBAAU,EAAE;sCASqC,gEAA6B;IARlE,YAAY,CAgOxB;AAhOY,qCAAY;;;;;;;;;;;;;;;;;ACxCzB,qCAAmG;AAEnG,WAAU;AAEV,KAAa,6BAA6B;KACtC,uCACc,SAAmB;SAAnB,cAAS,GAAT,SAAS,CAAU;KAC9B,CAAC;KAEJ;;;;;;;;;;;;;;;QAeG;KACI,4CAAI,GAAX,UAAY,MAAW,EAAE,SAAiB,EAAE,gBAAkC,EAAE,QAAyB;SAAzB,0CAAyB;SAErG,IAAI,IAAI,GAAG,IAAI,CAAC;SAEhB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM;aACvC,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,IAAI,CAC5C,0BAAgB;iBACZ,IAAI,YAAY,GAAG,gBAAgB,CAAC,eAAe,CAAC,gBAAgB,EAAE,CAAC,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;iBACvF,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;aACjC,CAAC,CAAC,CAAC;SACX,CAAC,CAAC,CAAC;KACP,CAAC;KAED;;;;;QAKG;KACI,2DAAmB,GAA1B,UAA2B,MAAW,EAAE,SAAiB;SAErD,IAAI,IAAI,GAAG,IAAI,CAAC;SAEhB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM;aACvC,IAAI,CAAC,SAAS,CAAC,kCAAkC,CAAC,MAAM,CAAC,CAAC,IAAI,CAC1D,uBAAa;iBACT,IAAI,gBAAgB,GAAG,aAAa,CAAC,kBAAkB,CAAC,IAAI,CACxD,6BAAmB,IAAI,0BAAmB,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,SAAS,EAAvD,CAAuD,CACjF,CAAC;iBACF,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;aACrC,CAAC,CAAC,CAAC;SACX,CAAC,CAAC,CAAC;KACP,CAAC;KACL,oCAAC;AAAD,EAAC;AAtDY,8BAA6B;KADzC,iBAAU,EAAE;sCAGgB,eAAQ;IAFxB,6BAA6B,CAsDzC;AAtDY,uEAA6B;;;;;;;;;;;;;;ACJ1C,qCAAuC;AACvC,wCAA6C;AAE7C,wDAA8D;AAQ9D,KAAa,0BAA0B;KAAvC;KAAyC,CAAC;KAAD,iCAAC;AAAD,EAAC;AAA7B,2BAA0B;KALtC,eAAQ,CAAC;SACN,OAAO,EAAE,CAAC,qBAAY,CAAC;SACvB,YAAY,EAAE,CAAC,6CAAoB,CAAC;SACpC,OAAO,EAAE,CAAC,6CAAoB,CAAC;MAClC,CAAC;IACW,0BAA0B,CAAG;AAA7B,iEAA0B;;;;;;;;;;;;;;;;;;;;;;ACXvC,qCAA8D;AAC9D,kDAAkD;AAelD,KAAa,oBAAoB;KAAS,wCAAc;KAMpD,8BACI,UAAsB,EACtB,QAAkB;SAFtB,YAII,kBACI,UAAU,EACV,QAAQ,EACR,IAAI,CACP,SACJ;SAbS,WAAK,GAAW,SAAS,CAAC;SAC1B,UAAI,GAAW,cAAc,CAAC;SAC9B,cAAQ,GAAY,IAAI,CAAC;;KAWnC,CAAC;KAED;;;;QAIG;KACI,uCAAQ,GAAf,UAAgB,KAAa;SAEzB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACnB,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;;QAIG;KACI,sCAAO,GAAd,UAAe,IAAY;SAEvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SACjB,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;;QAIG;KACI,0CAAW,GAAlB,UAAmB,QAAiB;SAEhC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;SACzB,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KACL,2BAAC;AAAD,EAAC,CAjDyC,iCAAc,GAiDvD;AAjDY,qBAAoB;KAbhC,gBAAS,CAAC;SACP,QAAQ,EAAE,iBAAiB;SAC3B,QAAQ,EACR,gZAQC;MACJ,CAAC;sCAQkB,iBAAU;SACZ,eAAQ;IARb,oBAAoB,CAiDhC;AAjDY,qDAAoB;;;;;;;;;;;;;AChBjC,qCAA4E;AAC5E,0DAA4F;AAgB5F;;;;IAIG;AACH;KAA6C,kCAAsB;KAI/D,wBACI,UAAsB,EACtB,QAAkB;SAClB,+DAA+D;SAC/D,oGAAoG;SACpG,QAAsB;SAL1B;SAOI,wBAAwB;SACxB,iBAAO,SAMV;SAhBD,sBAAgB,GAAsB,IAAI,mBAAY,EAAE,CAAC;SAWrD,iBAAM,0BAA0B,aAC5B,UAAU,EACV,QAAQ,EACR,QAAQ,CACX,CAAC;;KACN,CAAC;KAED;;;;QAIG;KACI,oCAAW,GAAlB,UAAmB,MAAkB,EAAE,IAAgB;SAApC,sCAAkB;SAAE,kCAAgB;SAEnD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;aAAC,MAAM,CAAC,cAAc,EAAE,CAAC;SAAC,CAAC;SACxC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACrC,CAAC;KACL,qBAAC;AAAD,EAAC,CA9B4C,iDAAsB,GA8BlE;AA9BqB,yCAAc;;;;;;;;;;;;;;ACtBpC,qCAA8D;AAO9D;;IAEG;AAKH,KAAsB,sBAAsB;KAA5C;KA+DA,CAAC;KAzDG;;;;;QAKG;KACI,2DAA0B,GAAjC,UACI,UAAsB,EACtB,QAAkB;SAClB,+DAA+D;SAC/D,oGAAoG;SACpG,QAAsB;SAEtB,mBAAmB;SACnB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;SAC9B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;SAC1B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;SAE1B,eAAe;SACf,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;aAClB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;SACxB,CAAC;SAED,iBAAiB;SACjB,IAAI,SAAS,GAAG,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;SACvD,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;aACZ,IAAI,CAAC,SAAS,CAAC,eAAe,CAC1B,IAAI,CAAC,WAAW,CAAC,aAAa,EAC9B,SAAS,EACT,IAAI,CACP,CAAC;SACN,CAAC;KACL,CAAC;KAED;;;;QAIG;KACO,gDAAe,GAAzB,UAA0B,SAAiB;SAEvC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC;KAC7C,CAAC;KAED;;;;QAIG;KACI,yDAAwB,GAA/B,UAAgC,SAAiB;SAE7C,MAAM,CAAC,CACH,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,CAAC;eACjE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC;eACtC,IAAI,CACb,CAAC;KACN,CAAC;KACL,6BAAC;AAAD,EAAC;AA/DqB,uBAAsB;KAJ3C,gBAAS,CAAC;SACP,QAAQ,EAAE,UAAU;SACpB,QAAQ,EAAE,EAAE;MACf,CAAC;IACoB,sBAAsB,CA+D3C;AA/DqB,yDAAsB;;;;;;;;;;;;;;;;;ACd5C,qCAAuF;AAGvF,eAAc;AACH,mBAAU,GAAG;KACpB,EAAE,EAAE,IAAI;KACR,EAAE,EAAE,IAAI;EACX,CAAC;AAGF;;;IAGG;AAiBH,KAAa,qBAAqB;KAM9B,+BACc,WAAuB;SAAvB,gBAAW,GAAX,WAAW,CAAY;KAClC,CAAC;KAEJ;;;QAGG;KACI,uCAAO,GAAd,UAAe,IAAY;SAEvB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;SAC3C,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;QAGG;KACI,oDAAoB,GAA3B;SAEI,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;KACjC,CAAC;KAED;;QAEG;KACI,oCAAI,GAAX;SAEI,oBAAoB;SACpB,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;KAC5E,CAAC;KAED;;;;QAIG;KACO,kDAAkB,GAA5B,UAA6B,IAAY;SACrC,MAAM,CAAC,CAAC,kBAAU,CAAC,IAAI,CAAC,IAAI,kBAAU,CAAC,EAAE,CAAC,CAAC;KAC/C,CAAC;KAED;;QAEG;KACO,+CAAe,GAAzB;SAEI,wFAAwF;SACxF,uBAAuB;SACvB,MAAM,CAAC;KACX,CAAC;KACL,4BAAC;AAAD,EAAC;AAtD6D;KAAzD,gBAAS,CAAC,mBAAmB,EAAE,EAAC,IAAI,EAAE,uBAAgB,EAAC,CAAC;+BAAmB,uBAAgB;gEAAC;AAFpF,sBAAqB;KAhBjC,gBAAS,CAAC;SACP,QAAQ,EAAE,UAAU;SACpB,QAAQ,EAAE,iSAST;SACD,IAAI,EAAE;aACF,kBAAkB,EAAE,yBAAyB;UAChD;MACJ,CAAC;sCAQ6B,iBAAU;IAP5B,qBAAqB,CAwDjC;AAxDY,uDAAqB;;;;;;;;;;;;;;AC9BlC,qCAAuC;AACvC,wCAA6C;AAC7C,yDAAgE;AAQhE,KAAa,2BAA2B;KAAxC;KAA0C,CAAC;KAAD,kCAAC;AAAD,EAAC;AAA9B,4BAA2B;KALvC,eAAQ,CAAC;SACN,OAAO,EAAE,CAAC,qBAAY,CAAC;SACvB,YAAY,EAAE,CAAC,+CAAqB,CAAC;SACrC,OAAO,EAAE,CAAC,+CAAqB,CAAC;MACnC,CAAC;IACW,2BAA2B,CAAG;AAA9B,mEAA2B;;;;;;;;;;;;;;;;;;;;ACVxC,qCAA+D;AAC/D,kDAAuD;AACvD,8CAA4C;AAQ5C,cAAa;AACF,mBAAU,GAAG;KACpB,EAAE,EAAE,IAAI;KACR,IAAI,EAAE,MAAM;EACf,CAAC;AAIF,KAAa,WAAW;KAmBpB,qBACc,YAAyB,EACA,cAAmB,EACb,SAA8B,EAC/D,UAAwB;SAHtB,iBAAY,GAAZ,YAAY,CAAa;SACA,mBAAc,GAAd,cAAc,CAAK;SACb,cAAS,GAAT,SAAS,CAAqB;SAC/D,eAAU,GAAV,UAAU,CAAc;SAtBpC,gCAAgC;SACtB,iBAAY,GAAW,IAAI,CAAC,CAAC,0EAA0E;SACvG,YAAO,GAAQ,IAAI,CAAC,CAAC,aAAa;SAClC,sBAAiB,GAAQ,IAAI,CAAC,CAAC,gCAAgC;SAEzE,yFAAyF;SACzF,qFAAqF;SAC3E,qBAAgB,GAAQ,IAAI,CAAC;SAE7B,gBAAW,GAAa,EAAE,CAAC,CAAC,4EAA4E;SACxG,mBAAc,GAAa,EAAE,CAAC,CAAC,oDAAoD;SAczF,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;aACxB,IAAI,CAAC,WAAW,EAAE,CAAC;SACvB,CAAC;SAED,IAAI,CAAC,sBAAsB,GAAG,IAAI,mBAAY,EAAE,CAAC;SACjD,IAAI,CAAC,uBAAuB,GAAG,IAAI,mBAAY,EAAE,CAAC;SAElD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;SAE9C,wBAAwB;SACxB,IAAI,CAAC,UAAU,EAAE,CAAC;KACtB,CAAC;KAED;;;;;QAKG;KACO,iCAAW,GAArB;SAEI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;SACvE,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;QAGG;KACI,+BAAS,GAAhB;SAEI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;KACxB,CAAC;KAED;;;QAGG;KACI,oCAAc,GAArB;SAEI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;KAC7B,CAAC;KAED;;;QAGG;KACI,yCAAmB,GAA1B;SAEI,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;KAClC,CAAC;KAED;;;QAGG;KACI,mCAAa,GAApB;SAEI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;KAC/B,CAAC;KAED;;;QAGG;KACI,8CAAwB,GAA/B;SACI,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC;KACvC,CAAC;KAED;;;QAGG;KACI,+CAAyB,GAAhC;SACI,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC;KACxC,CAAC;KAED;;;;QAIG;KACI,8BAAQ,GAAf,UAAgB,KAAa;SAEzB,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;aAChC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC;SAC9C,CAAC;SACD,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;;;QAKG;KACI,8BAAQ,GAAf,UAAgB,KAAa,EAAE,GAAW;SAEtC,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;aAChC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;SAC7C,CAAC;SACD,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;QAGG;KACI,mCAAa,GAApB;SAEI,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;SAEpD,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;aACL,IAAI,MAAI,GAAG,IAAI,EACX,KAAK,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;aAE5D,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAC1D,cAAI;iBACA,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC;iBAChC,iBAAiB;iBACjB,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;qBACN,MAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,MAAI,CAAC,YAAY,CAAC,CAAC;iBACnD,CAAC;aACL,CAAC,EACD,gBAAM,IAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CACrC,CAAC;SACN,CAAC;SAED,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;;QAIG;KACI,kCAAY,GAAnB,UAAoB,KAAU;SAE1B,IAAI,IAAI,GAAG,IAAI,CAAC;SAEhB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM;aACvC,kCAAkC;aAClC,EAAE,EAAC,KAAK,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;iBAC5B,IAAI,eAAe,GAAG,CAAC,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;iBAExE,IAAI,CAAC,YAAY,CAAC,IAAI,CAClB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,eAAe,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,EACvE,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAC1C,CAAC,IAAI,CACF,cAAI;qBACA,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,CAAC,iDAAiD;qBAC5E,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;qBACjC,6FAA6F;qBAC7F,sEAAsE;qBACtE,IAAI,CAAC,mBAAmB,EAAE,CAAC;qBAC3B,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;iBACzB,CAAC,EACD,gBAAM,IAAM,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACtC,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aACzB,CAAC;SACL,CAAC,CAAC,CAAC;KACP,CAAC;KAED;;;;;;QAMG;KACI,+BAAS,GAAhB,UAAiB,MAAW,EAAE,KAAiB;SAAjB,oCAAiB;SAE3C,+BAA+B;SAC/B,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;SACvE,IAAI,CAAC,0BAA0B,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;SAE1D,EAAE,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACzB,IAAI,eAAe,GAAG,CAAC,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;aAExE,wBAAwB;aACxB,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;iBAC5C,yBAAyB;iBACzB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;iBAC1B,eAAe,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC;iBAChD,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,CAAC,0BAA0B;aAC1E,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,6DAA6D;iBAC7D,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,gCAAgC;iBACvD,IAAI,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE,IAAI,CAAC,CAAC;iBACnD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,mBAAmB;iBAC3D,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,CAAC,0BAA0B;aACvE,CAAC;SACL,CAAC;SAAC,IAAI,CAAC,CAAC;aACJ,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;SAC7B,CAAC;SAED,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;SAE5B,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;;;QAKG;KACI,yCAAmB,GAA1B,UAA2B,MAAkB;SAAlB,sCAAkB;SAEzC,IAAI,eAAe,GAAG,CAAC,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;SACxE,MAAM,GAAG,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;SAElC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;aACT,+BAA+B;aAC/B,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;aACvE,IAAI,CAAC,0BAA0B,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;aAE1D,+CAA+C;aAC/C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,IAAI,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;iBACpE,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC;aAChE,CAAC;SACL,CAAC;SAED,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;;;QAKG;KACO,oCAAc,GAAxB,UAAyB,MAAW;SAEhC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;SACtB,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC/C,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;QAGG;KACO,gCAAU,GAApB;SAEI,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,CAAC;SACxF,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;;;QAKG;KACI,+BAAS,GAAhB,UAAiB,KAAU,EAAE,SAAwB;SAAxB,4CAAwB;SAEjD,EAAE,CAAC,CAAC,SAAS,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;aACpD,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC;SAC7C,CAAC;SAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;aACnB,MAAM,CAAC,IAAI,CAAC,CAAC,oBAAoB;SACrC,CAAC;SAAC,IAAI,CAAC,CAAC;aACJ,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,KAAK,CAAC;SAClC,CAAC;SAED,0BAA0B;SAC1B,IAAI,CAAC,UAAU,EAAE,CAAC;SAElB,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;;QAIG;KACI,+BAAS,GAAhB,UAAiB,SAAwB;SAAxB,4CAAwB;SAErC,EAAE,CAAC,CAAC,SAAS,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;aACpD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;SAC5C,CAAC;SAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;aACnB,MAAM,CAAC,IAAI,CAAC,CAAC,oBAAoB;SACrC,CAAC;SACD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;KACjC,CAAC;KAED;;;;QAIG;KACI,+BAAS,GAAhB,UAAiB,SAAwB;SAAxB,4CAAwB;SAErC,EAAE,CAAC,CAAC,SAAS,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;aACpD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;SAC5C,CAAC;SAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;aACnB,MAAM,CAAC,IAAI,CAAC,CAAC,oBAAoB;SACrC,CAAC;SACD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;KACjC,CAAC;KAED;;;;;QAKG;KACI,gCAAU,GAAjB,UAAkB,OAAY,EAAE,OAAwB;SAAxB,yCAAwB;SAEpD,OAAO,GAAG,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;SAE1B,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;SAEzC,gBAAgB;SAChB,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;aACV,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;SAChC,CAAC;SAAC,IAAI,CAAC,CAAC;aACJ,IAAI,CAAC,YAAY,EAAE,CAAC;aACpB,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;aAC5B,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAE,mEAAmE;aACtF,UADmB,mEAAmE;iBACtF,IAAI,IAAK,CAAC,EACV,gBAAM,IAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CACrC,CAAC;SACN,CAAC;SAED,gBAAgB;SAChB,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAE3C,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;QAGG;KACO,kCAAY,GAAtB;SACI,IAAI,CAAC,SAAS,CAAC,OAAO,GAAG,EAAE,CAAC;SAC5B,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;SACtB,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;SACzB,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;;;QAKG;KACO,mCAAa,GAAvB,UAAwB,OAAY,EAAE,OAAwB;SAAxB,yCAAwB;SAE1D,IAAI,uDAAuD;SACvD,eAAe,GAAG,CAAC,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;SAExE,GAAG,CAAC,CAAY,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO;aAAlB,IAAI,GAAG;aACR,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;iBACtE,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;qBACV,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;iBACjC,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;iBAC9B,CAAC;iBACD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aAE/C,CAAC;UACJ;SAED,gBAAgB;SAChB;;YAEG;SAEH,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;;QAIG;KACO,qCAAe,GAAzB,UAA0B,KAAU;SAEhC,IAAI,eAAe,GAAG,CAAC,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EACnE,KAAK,GAAG,QAAQ,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;SAEnD,eAAe,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;SAEjC,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;aAC7E,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;SACtC,CAAC;SACD,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;aAChF,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;SACzC,CAAC;SAED,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;;;QAKG;KACI,oCAAc,GAArB,UAAsB,KAAa,EAAE,GAAU;SAAV,gCAAU;SAE3C,wCAAwC;SACxC,EAAE,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;aACtD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;SAC7D,CAAC;SACD,MAAM,CAAC,IAAI;KACf,CAAC;KAED;;;;;QAKG;KACI,yCAAmB,GAA1B,UAA2B,KAAa,EAAE,SAAiB;SAEvD,+CAA+C;SAC/C,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;aAC5F,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,CAAC;SAC1D,CAAC;SACD,MAAM,CAAC,IAAI;KACf,CAAC;KAED;;;;QAIG;KACI,qCAAe,GAAtB,UAAuB,KAAa;SAEhC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC;KAChE,CAAC;KAED;;;;QAIG;KACI,sCAAgB,GAAvB,UAAwB,aAAa;SAEjC,IAAI,CAAC,SAAS,CAAC,aAAa,GAAG,aAAa,CAAC;SAC7C,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;;;QAKG;KACI,uCAAiB,GAAxB,UAAyB,SAAiB,EAAE,KAAU;SAElD,EAAE,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;aAC9B,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;iBACrB,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,KAAK,CAAC,CAAC;SAC3E,CAAC;SACD,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;;;QAKG;KACI,qCAAe,GAAtB,UAAuB,SAAiB,EAAE,KAAU;SAEhD,EAAE,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;aAC9B,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC;SACtC,CAAC;SACD,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;;QAIG;KACI,qCAAe,GAAtB,UAAuB,SAAiB;SAEpC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC;KAC7C,CAAC;KAED;;;;QAIG;KACI,8CAAwB,GAA/B,UAAgC,SAAiB;SAE7C,MAAM,CAAC,CACH,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,CAAC;eACjE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC;eACtC,IAAI,CACb,CAAC;KACN,CAAC;KAED;;;QAGG;KACI,wCAAkB,GAAzB;SAEI,MAAM,CAAC,CAAC,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,CAAC;KAC3C,CAAC;KAED;;;;QAIG;KACI,4CAAsB,GAA7B,UAA8B,SAAiB;SAE3C,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC;KACpD,CAAC;KAED;;;QAGG;KACO,sCAAgB,GAA1B;SAEI,EAAE,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;aAC1C,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;iBACxD,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;aAClD,CAAC;SACL,CAAC;SACD,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;;;;QAMG;KACO,gDAA0B,GAApC,UAAqC,OAAmB,EAAE,MAAoB;SAAzC,wCAAmB;SAAE,sCAAoB;SAE1E,OAAO,GAAG,CAAC,OAAO,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;SAC9C,MAAM,GAAG,CAAC,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;SAEnD,EAAE,EAAC,OAAO,IAAI,MAAM,CAAC,CAAC,CAAC;aACnB,GAAG,CAAC,CAAc,UAAM,EAAN,iBAAM,EAAN,oBAAM,EAAN,IAAM;iBAAnB,IAAI,KAAK;iBACV,IAAI,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC;iBAC7D,EAAE,CAAC,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;qBAAC,QAAQ,CAAC;iBAAC,CAAC;iBAElD,MAAM,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;qBAC5B,KAAK,SAAS,CAAC;qBACf,KAAK,MAAM,CAAC;qBACZ,KAAK,YAAY,CAAC;qBAClB,KAAK,UAAU,CAAC;qBAChB,KAAK,MAAM,CAAC;qBACZ,KAAK,MAAM,CAAC;qBACZ,KAAK,KAAK,CAAC;qBACX,KAAK,QAAQ,CAAC;qBACd,KAAK,QAAQ;yBACT,GAAG,CAAC,CAAY,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO;6BAAlB,IAAI,GAAG;6BACR,EAAE,CAAC,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC;iCACnC,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;6BAC9C,CAAC;0BACJ;yBACD,KAAK,CAAC;iBACd,CAAC;iBAED,oEAAoE;iBACpE,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa;wBACzB,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC;wBACnC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,OAAO,CAClD,CAAC,CAAC,CAAC;qBACC,IAAI,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC;qBAC3D,GAAG,CAAC,CAAY,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO;yBAAlB,IAAI,GAAG;yBACR,GAAG,CAAC,CAAC,IAAI,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC;6BAC1B,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;iCACjC,GAAG,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;6BACzB,CAAC;yBACL,CAAC;sBACJ;iBACL,CAAC;cACJ;SACL,CAAC;SACD,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;;;QAKG;KACI,iCAAW,GAAlB,UAAmB,KAAa,EAAE,MAAW;SAEzC,qBAAqB;SACrB,IAAI,aAAa,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,EAClE,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;SAE1B,oCAAoC;SACpC,EAAE,EAAC,aAAa,CAAC,CAAC,CAAC;aACf,MAAM,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;iBAC5B,KAAK,SAAS;qBACV,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;yBAC3C,MAAM,CAAC,CAAC,6BAA6B,CAAC,CAAC;qBAC3C,CAAC;qBAAC,IAAI,CAAC,CAAC;yBACJ,MAAM,CAAC,CAAC,2BAA2B,CAAC,CAAC;qBACzC,CAAC;iBACL,KAAK,MAAM;qBACP,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC;4BACf,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,QAAQ,CAAC;4BAC1C,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CACpE,CAAC,CAAC,CAAC;yBACC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAE,+BAA+B;yBAC3E,+CAA+C;+BAC7C,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC;+BACvE,IAAI,GAAG,KAAK,GAAG,SAAS,CAC7B,CAAC;qBACN,CAAC;qBACD,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC;iBACnB,KAAK,YAAY;qBACb,MAAM,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC;iBACzB,KAAK,UAAU;qBACX,MAAM,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC;iBACzB,KAAK,MAAM;qBACP,MAAM,CAAC,CAAC,eAAe,GAAG,KAAK,GAAG,QAAQ,CAAC,CAAC;iBAChD,KAAK,MAAM;qBACP,MAAM,CAAC,CAAC,WAAW,GAAG,KAAK,GAAG,oBAAoB,GAAG,KAAK,GAAG,MAAM,CAAC,CAAC;iBACzE,KAAK,KAAK,CAAC;iBACX,KAAK,QAAQ;qBACT,IAAI,UAAU,GAAG,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,QAAQ,CAAC,GAAG,YAAY,GAAG,WAAW,CAAC,CAAC;qBACpF,MAAM,CAAC,CAAC,KAAK;2BACP,CAAC,YAAY,GAAC,aAAa,CAAC,OAAO,CAAC,GAAC,WAAW,GAAC,UAAU,GAAC,SAAS;+BACjE,CAAC,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC;+BACtD,IAAI,CAAC;2BACT,IAAI,CAAC,CAAC;iBAChB,KAAK,QAAQ;qBACT,IAAI,SAAS,GAAG,EAAC,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAC,CAAC;qBACzE,MAAM,CAAC,CAAC,uBAAuB,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,GAAG,WAAW,CAAC,CAAC;aACxF,CAAC;SACL,CAAC;SAED,MAAM,CAAC,KAAK,CAAC;KACjB,CAAC;KAED;;;;QAIG;KACI,+BAAS,GAAhB,UAAiB,KAAiB;SAAjB,oCAAiB;SAC9B,IAAI,IAAI,GAAG,IAAI,CAAC;SAEhB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM;aACvC,IAAI,MAAM,GAAG,EAAE,CAAC;aAChB,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;iBAChB,IAAI,eAAe,GAAG,CAAC,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;iBAExE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CACzB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,eAAe,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,EACvE,IAAI,CAAC,cAAc,EAAE,CACxB,CAAC,IAAI,CACF,cAAI;qBACA,GAAG,CAAC,CAAc,UAA6B,EAA7B,SAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,EAA7B,cAA6B,EAA7B,IAA6B;yBAA1C,IAAI,KAAK;yBACV,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,MAAM,CAAC;+BACnE,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC;+BAC7D,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,CACrC,CAAC;yBACF,uDAAuD;yBACvD,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC,aAAa,CAAC,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;6BAC3E,IAAI,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC,aAAa,CAAC,CAAC;6BAC1E,MAAM,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;yBACnD,CAAC;sBACJ;qBACD,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;qBACvB,IAAI,CAAC,gBAAgB,EAAE,CAAC;qBACxB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;iBACzB,CAAC,EACD,gBAAM,IAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAC3D,CAAC;aACN,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,GAAG,CAAC,CAAc,UAA6B,EAA7B,SAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,EAA7B,cAA6B,EAA7B,IAA6B;qBAA1C,IAAI,KAAK;qBACV,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,CAAC;kBACjF;iBACD,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;iBACvB,IAAI,CAAC,gBAAgB,EAAE,CAAC;iBACxB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aACzB,CAAC;SACL,CAAC,CAAC,CAAC;KACP,CAAC;KAED;;;;;;QAMG;KACI,0BAAI,GAAX,UAAY,IAAS,EAAE,EAAS,EAAE,KAAY;SAAvB,8BAAS;SAAE,oCAAY;SAE1C,IAAI,IAAI,GAAG,IAAI,CAAC;SAEhB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM;aACvC,4DAA4D;aAC5D,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;iBACT,KAAK,GAAG,CAAC,EAAE;uBACD,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;uBACnC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC;2BACxB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC;2BAClC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,CAC5C,CACJ,CAAC;aACN,CAAC;aACD,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;iBAAC,KAAK,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC;aAAC,CAAC;aAEhC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAC5C,cAAI;iBACA,sBAAsB;iBACtB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;qBACf,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBAClC,CAAC;iBAED,yBAAyB;iBACzB,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;qBACrB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;iBAC9C,CAAC;iBAED,2CAA2C;iBAC3C,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;qBACpB,IAAI,CAAC,SAAS,CAAC,SAAS;yBACpB,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;iBACtF,CAAC;iBAED,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC;iBAChC,iBAAiB;iBACjB,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;qBACN,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;iBACnD,CAAC;iBAED,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;aACxB,CAAC,EACD,gBAAM;iBACF,yFAAyF;iBACzF,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;qBACtB,IAAI,CAAC,SAAS,CAAC,SAAS;yBACpB,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;qBACpF,OAAO,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,yBAAyB;iBACzD,CAAC;iBAED,iBAAiB;iBACjB,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;qBACnB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;qBACpD,OAAO,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,yBAAyB;iBACtD,CAAC;iBAED,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;aAC1B,CAAC,CACJ,CAAC;SACN,CAAC,CAAC,CAAC;KACP,CAAC;KAED;;;QAGG;KACI,4BAAM,GAAb;SAEI,yCAAyC;SACzC,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;aACrF,MAAM,CAAC,IAAI,CAAC;SAChB,CAAC;SAED,gBAAgB;SAChB,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;SACxF,kBAAkB;SAClB,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;KAC1B,CAAC;KAED;;;QAGG;KACI,6BAAO,GAAd;SAEI,IAAI,IAAI,GAAG,IAAI,CAAC;SAEhB,kCAAkC;SAClC,IAAI,CAAC,eAAe,EAAE,CAAC;SAEvB,IAAI,CAAC,IAAI,CACL,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,EAClC,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,KAAK,CAAC,CACnC,CAAC,IAAI,CACF,cAAI;aACA,yBAAyB;aACzB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC;aACtC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,CAAC;SACtD,CAAC,EACD,gBAAM,IAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CACrC,CAAC;SAEF,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;QAGG;KACI,oCAAc,GAArB;SAEI,IAAI,IAAI,GAAG,IAAI,CAAC;SAEhB,IAAI,CAAC,IAAI,CACL,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,EAClC,IAAI,CAAC,cAAc,EAAE,CACxB,CAAC,IAAI,CACF,cAAI;aACA,yBAAyB;aACzB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC;SAC9C,CAAC,EACD,gBAAM,IAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CACrC,CAAC;SAEF,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;QAGG;KACI,6BAAO,GAAd;SAEI,IAAI,IAAI,GAAG,IAAI,EACX,OAAO,GAAG,IAAI,CAAC;SAEnB,yCAAyC;SACzC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;aACtF,gBAAgB;aAChB,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;aACxF,kCAAkC;aAClC,IAAI,CAAC,eAAe,EAAE,CAAC;aACvB,mBAAmB;aACnB,OAAO,GAAG,KAAK,CAAC;SACpB,CAAC;SAED,IAAI,CAAC,IAAI,CACL,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,EACtC,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,OAAO,CAAC,CACrC,CAAC,IAAI,CACF,cAAI;aACA,yBAAyB;aACzB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;SACjD,CAAC,EACD,gBAAM,IAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CACrC,CAAC;SAEF,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;;QAIG;KACI,4BAAM,GAAb,UAAc,KAAU;SAEpB,IAAI,IAAI,GAAG,IAAI,EACX,eAAe,GAAG,CAAC,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;SAExE,MAAM,CAAC,IAAI,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM;aACvC,IAAI,CAAC,IAAI,CACL,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,eAAe,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,EAC1E,IAAI,CAAC,cAAc,EAAE,CACxB,CAAC,IAAI,CACF,cAAI;iBACA,sBAAsB;iBACtB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;qBACf,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBAClC,CAAC;iBAED,yBAAyB;iBACzB,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;qBACrB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;iBAC9C,CAAC;iBAED,wBAAwB;iBACxB,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;iBAE5B,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CACjB,cAAI,IAAK,CAAC,EACV,gBAAM,IAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CACrC,CAAC;iBAEF,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aACzB,CAAC,EACD,gBAAM,IAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAC5D,CAAC;SACN,CAAC,CAAC,CAAC;KACP,CAAC;KAED;;;;;QAKG;KACI,2BAAK,GAAZ,UAAa,KAAU,EAAE,IAAY;SAEjC,IAAI,IAAI,GAAG,IAAI,EACX,eAAe,GAAG,CAAC,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;SAExE,EAAE,CAAC,CAAC,kBAAU,CAAC,IAAI,CAAC,CAAC,sBAAsB;gBAEpC,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,kBAAU,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,CAChF,CAAC,CAAC,CAAC;aACC,IAAI,CAAC,IAAI,CACL,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,eAAe,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,kBAAU,CAAC,IAAI,CAAC,CAAC,EACpG,IAAI,CAAC,cAAc,EAAE,CACxB,CAAC,IAAI,CACF,cAAI;iBACA,sBAAsB;iBACtB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;qBACf,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBAClC,CAAC;iBAED,yBAAyB;iBACzB,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;qBACrB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;iBAC9C,CAAC;iBAED,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC;iBAChC,iBAAiB;iBACjB,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;qBACN,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;qBAE3B,sEAAsE;qBACtE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;yBAChB,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;qBACzE,CAAC;iBACL,CAAC;aACL,CAAC,EACD,gBAAM;iBACF,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;aACxB,CAAC,CACJ,CAAC;SACN,CAAC;SAED,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;;QAIG;KACI,iCAAW,GAAlB,UAAmB,IAAS;SAExB,IAAI,IAAI,GAAG,IAAI,CAAC;SAChB,IAAI,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;SACrC,IAAI,KAAK,GAAG,EAAE,EACV,QAAQ,GAAG,EAAE,CAAC;SAElB,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;aACvC,GAAG,CAAC,CAAY,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI;iBAAf,IAAI,GAAG;iBACR,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;qBACrB,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;qBACrC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;iBAC7B,CAAC;cACJ;SACL,CAAC;SAED,IAAI,CAAC,IAAI,CACL,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,EACrC,IAAI,CAAC,cAAc,CAAC,EAAC,EAAE,EAAE,KAAK,EAAC,CAAC,CACnC,CAAC,IAAI,CACF,cAAI;aACA,yBAAyB;aACzB,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;iBACrB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;aAC9C,CAAC;aAED,wBAAwB;aACxB,0FAA0F;aAC1F,IAAI,eAAe,GAAG,CAAC,CAAC;aACxB,GAAG,CAAC,CAAc,UAAQ,EAAR,qBAAQ,EAAR,sBAAQ,EAAR,IAAQ;iBAArB,IAAI,KAAK;iBACV,IAAI,CAAC,eAAe,CAAC,KAAK,GAAG,eAAe,CAAC,CAAC;iBAC9C,eAAe,EAAE,CAAC;cACrB;SACL,CAAC,EACD,gBAAM,IAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CACrC,CAAC;SAEF,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;QAGG;KACI,4BAAM,GAAb,UAAc,KAAiB;SAAjB,oCAAiB;SAE3B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;KAC1C,CAAC;KAED;;;;QAIG;KACI,8BAAQ,GAAf,UAAgB,KAAa,EAAE,KAAiB;SAAjB,oCAAiB;SAE5C,KAAK,GAAG,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,CAAC;SACtD,IAAI,eAAe,GAAG,CAAC,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;SAExE,QAAQ,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,eAAe,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;SAC1F,MAAM,CAAC;KACX,CAAC;KAED;;;;;QAKG;KACI,0BAAI,GAAX,UAAY,GAAW,EAAE,IAAgB;SAAhB,kCAAgB;SAErC,IAAI,IAAI,GAAG,IAAI,CAAC;SAEhB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM;aACvC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CACzB,GAAG,EACH,IAAI,CACP,CAAC,IAAI,CACF,cAAI;iBACA,gBAAgB;iBAChB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC;qBACtE,uEAAuE;qBACvE,6CAA6C;qBAC7C,IAAI,CAAC,gBAAgB,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO;2BACvD,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;qBACnE,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM;2BACrD,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;iBAC1C,CAAC;iBAED,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aACzB,CAAC,EACD,gBAAM,IAAM,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CACvC,CAAC;SACN,CAAC,CAAC,CAAC;KACP,CAAC;KAED;;;;;;QAMG;KACI,oCAAc,GAArB,UAAsB,IAAgB,EAAE,gBAAgC,EAAE,SAAyB;SAA7E,kCAAgB;SAAE,0DAAgC;SAAE,4CAAyB;SAE/F,oBAAoB;SACpB,EAAE,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;aACnB,IAAI,CAAC,gBAAgB,EAAE,CAAC;SAC5B,CAAC;SAED,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC;aACrC,MAAM,CAAC;iBACH,SAAS,EAAE,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,WAAW,CAAC;iBACxD,MAAM,EAAE,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC;iBACrD,IAAI,EAAE,IAAI;cACb;SACL,CAAC;SAED,4DAA4D;SAC5D,MAAM,CAAC,CAAC,IAAI,GAAG,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;KAC1E,CAAC;KAED;;;QAGG;KACO,qCAAe,GAAzB;SAEI,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;SACjC,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;QAGG;KACO,sCAAgB,GAA1B;SAEI,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;SAC5F,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KACL,kBAAC;AAAD,EAAC;AAjmCY,YAAW;KADvB,iBAAU,EAAE;KAsBJ,wBAAM,CAAC,eAAe,CAAC;KACvB,wBAAM,CAAC,qBAAqB,CAAC;sCAFN,0BAAW,kBAGf,+BAAY;IAvB3B,WAAW,CAimCvB;AAjmCY,mCAAW;;;;;;;;;;;;;;;;;;;;AClBxB,qCAA4G;AAC5G,kEAAkF;AAClF,8CAA4C;AA0C5C;;;;;;;;;IASG;AAEH,KAAa,iBAAiB;KAQ1B,2BACuC,cAAmB,EAC5C,SAAmB,EACnB,8BAA6D,EAC7D,YAAyB;SAHA,mBAAc,GAAd,cAAc,CAAK;SAC5C,cAAS,GAAT,SAAS,CAAU;SACnB,mCAA8B,GAA9B,8BAA8B,CAA+B;SAC7D,iBAAY,GAAZ,YAAY,CAAa;SAR7B,2BAAsB,GAAuB,EAAE,CAAC;SAChD,uBAAkB,GAAQ,EAAE,CAAC,CAAC,+CAA+C;SAC7E,kBAAa,GAAW,CAAC,CAAC,CAAC,6BAA6B;KAO/D,CAAC;KAEJ;;;;;;;QAOG;KACI,gCAAI,GAAX,UAAY,SAAc,EAAE,0BAA8D;SAA9D,8EAA8D;SAEtF,kBAAkB;SAClB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;SAE5B,EAAE,CAAC,CAAC,0BAA0B,CAAC,CAAC,CAAC;aAC7B,2DAA2D;aAC3D,IAAI,CAAC,sBAAsB,GAAG,0BAA0B,CAAC,OAAO,EAAE,CAAC;SACvE,CAAC;SAED,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;;QAIG;KACI,iCAAK,GAAZ;SAEI,kBAAkB;SAClB,iCAAiC;SACjC,4FAA4F;SAC5F,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;SACvB,IAAI,CAAC,sBAAsB,GAAG,EAAE,CAAC;SACjC,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;SAC7B,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;SAEvB,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;QAGG;KACI,oCAAQ,GAAf;SAEI,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;KAC9B,CAAC;KAED;;;;QAIG;KACI,2CAAe,GAAtB,UAAuB,KAAoB;SAApB,oCAAoB;SAEvC,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;aAChB,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC;SAC/B,CAAC;SACD,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;KAC1C,CAAC;KAED;;;;QAIG;KACI,6CAAiB,GAAxB,UAAyB,KAAoB;SAApB,oCAAoB;SAEzC,KAAK,GAAG,CAAC,KAAK,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC;SAEtC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE,CAAC;SACzC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;SAEtC,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;;;;QAMG;KACI,iCAAK,GAAZ,UAAa,KAAa,EAAE,SAAyB;SAAzB,4CAAyB;SAEjD,IAAI,IAAI,GAAG,IAAI,CAAC;SAEhB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM;aACvC,iEAAiE;aACjE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC;iBAC5C,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,IAAI,CACrD,cAAI;qBACA,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAC3B,cAAI,IAAM,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EACjC,gBAAM,IAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAC3D,CAAC;iBACN,CAAC,EACD,gBAAM,IAAM,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CACtC,CAAC;aACN,CAAC;aAED,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAC3B,cAAI,IAAM,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EACjC,gBAAM,IAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAC3D,CAAC;SACN,CAAC,CAAC,CAAC;KACP,CAAC;KAED;;;;;QAKG;KACI,uCAAW,GAAlB,UAAmB,KAAa,EAAE,SAAyB;SAAzB,4CAAyB;SAEvD,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC,IAAI,CAC7B,cAAI,IAAM,MAAM,CAAC,CAAC,CAAC,EACnB,gBAAM,IAAM,MAAM,CAAC,CAAC,CAAC,CACxB,CAAC;KACN,CAAC;KAED;;;;QAIG;KACK,mCAAO,GAAf,UAAgB,KAAK;SAEjB,IAAI,IAAI,GAAG,IAAI,CAAC;SAEhB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM;aACvC,IAAI,WAAW,GAAG,IAAI,EAClB,OAAO,GAAG,CAAC,uBAAuB,GAAG,KAAK,CAAC,CAAC,CAAC,kBAAkB;aAEnE,4DAA4D;aAC5D,GAAG,CAAC,CAAC,IAAI,OAAK,IAAI,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC;iBAC5C,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,OAAK,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;qBACzF,WAAW,GAAG,OAAK,CAAC;qBACpB,KAAK,CAAC;iBACV,CAAC;aACL,CAAC;aAED,EAAE,CAAC,CAAC,CAAC,WAAW,KAAK,IAAI,CAAC,CAAC,oBAAoB;oBACxC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,4BAA4B;oBAC3D,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,mEAAmE;aACzG,CAAC,CAAC,CAAC;iBACC,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;iBAC3B,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aACzB,CAAC;aAED,iBAAiB;aACjB,IAAI,YAAY,GAAiB,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;aAEnE,2BAA2B;aAC3B,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,YAAY,IAAI,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC;iBACzD,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,IAAI,CAC9D,cAAI;qBACA,YAAY,CAAC,YAAY,GAAG,IAAI,CAAC;qBAEjC,iBAAiB;qBACjB,MAAM,CAAC,IAAI,CAAC,aAAa,CACrB,KAAK,EACL,WAAW,EACX,YAAY,CACf,CAAC,IAAI,CACF,cAAI,IAAM,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EACjC,gBAAM,IAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAC3D,CAAC;iBACN,CAAC,EACD,gBAAM,IAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAC3D,CAAC;aACN,CAAC;aAED,iBAAiB;aACjB,MAAM,CAAC,IAAI,CAAC,aAAa,CACrB,KAAK,EACL,WAAW,EACX,YAAY,CACf,CAAC,IAAI,CACF,cAAI,IAAM,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EACjC,gBAAM,IAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAC3D,CAAC;SACN,CAAC,CAAC,CAAC;KACP,CAAC;KAED;;;;;;QAMG;KACK,yCAAa,GAArB,UAAsB,KAAK,EAAE,iBAAiB,EAAE,YAA0B;SAEtE,IAAI,SAAS,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC;eACzC,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,KAAK,EAAE,YAAY,CAAC,YAAY,CAAC;eACjE,IAAI,CACb,CAAC;SAEF,IAAI,gBAAgB,GAAqB,IAAI,CAAC,sBAAsB,CAAC,iBAAiB,CAAC,CAAC;SAExF,IAAI,QAAQ,GAAG,IAAI,CAAC;SACpB,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;aACZ,QAAQ,GAAG,yBAAkB,CAAC,qBAAqB,CAC/C,yBAAkB,CAAC,OAAO,CAAC,SAAS,CAAC,EACrC,IAAI,CAAC,SAAS,CACjB,CAAC;SACN,CAAC;SAED,IAAI,IAAI,GAAG,IAAI,CAAC;SAEhB,MAAM,CAAC,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAC3C,YAAY,CAAC,MAAM,EACnB,YAAY,CAAC,SAAS,EACtB,gBAAgB,EAChB,QAAQ,CACX,CAAC,IAAI,CACF,sBAAY;aACR,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,GAAG,YAAY,CAAC;aAC9C,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;aAC3B,MAAM,CAAC,IAAI,CAAC;SAChB,CAAC,EACD,gBAAM,IAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAClD,CAAC;KACN,CAAC;KACL,wBAAC;AAAD,EAAC;AAjPY,kBAAiB;KAD7B,iBAAU,EAAE;KAUJ,wBAAM,CAAC,eAAe,CAAC;8CACH,eAAQ;SACa,gEAA6B;SAC/C,0BAAW;IAZ9B,iBAAiB,CAiP7B;AAjPY,+CAAiB;;;;;;;;AC5C9B;;IAEG;AACH;KAAA;KAoVA,CAAC;KAhVG;;;;QAIG;KACW,mBAAY,GAA1B,UAA2B,MAAW;SAElC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC;KAC5C,CAAC;KAED;;;;QAIG;KACW,iBAAU,GAAxB,UAAyB,MAAW;SAEhC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;KAC3C,CAAC;KAED;;;;QAIG;KACW,qBAAc,GAA5B,UAA6B,OAAY;SAErC,IAAI,YAAY,GAAG,EAAE,CAAC;SACtB,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;aAC9B,YAAY,CAAC,IAAI,CAAC,EAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,EAAC,CAAC,CAAC;SACvD,CAAC;SACD,MAAM,CAAC,YAAY,CAAC;KACxB,CAAC;KAED;;;;;QAKG;KACW,oBAAa,GAA3B,UAA4B,OAAY,EAAE,OAAY;SAElD,MAAM,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;KACjE,CAAC;KAED;;;;QAIG;KACW,oBAAa,GAA3B,UAA4B,KAAK;SAE7B,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;KACxD,CAAC;KAED;;;;;QAKG;KACW,kBAAW,GAAzB,UAA0B,MAAW,EAAE,SAAiB;SAAjB,6CAAiB;SAEpD,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC;KAC3C,CAAC;KAED;;;;;;QAMG;KACW,mBAAY,GAA1B,UAA2B,OAAY,EAAE,OAAY,EAAE,SAAiB;SAAjB,6CAAiB;SAEpE,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;KACjD,CAAC;KAED;;;;QAIG;KACW,cAAO,GAArB,UAAsB,KAAU,EAAE,KAAU;SAExC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,GAAG,KAAK,CAAC,CAAC;KAC3D,CAAC;KAED;;;;QAIG;KACW,kBAAW,GAAzB,UAA0B,KAAU,EAAE,KAAU;SAE5C,IAAI,KAAK,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;SACpC,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC;KACzC,CAAC;KAED;;;;;QAKG;KACW,mBAAY,GAA1B,UAA2B,OAAY,EAAE,GAAW;SAEhD,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;aACV,OAAO,CAAC,IAAI,CAAC,UAAU,IAAI,EAAE,IAAI;iBAC7B,wCAAwC;iBACxC,IAAI,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC;iBACvD,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;aACvD,CAAC,CAAC,CAAC;SACP,CAAC;SAED,MAAM,CAAC,OAAO,CAAC;KACnB,CAAC;KAED;;;;QAIG;KACW,mBAAY,GAA1B,UAA2B,KAAa;SAEpC,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;aAChB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACvB,CAAC;SACD,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;;;QAKG;KACW,mBAAY,GAA1B,UAA2B,KAAa,EAAE,KAAU;SAEhD,IAAI,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;SACpB,MAAM,CAAC,MAAM,CAAC;KAClB,CAAC;KAED;;;;QAIG;KACW,sBAAe,GAA7B,UAA8B,KAAa;SAEvC,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;aAChB,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC;SACvB,CAAC;SACD,MAAM,CAAC,MAAM,CAAC;KAClB,CAAC;KAED;;;;QAIG;KACW,6BAAsB,GAApC,UAAqC,IAAS;SAE1C,MAAM,CAAC;aACH,MAAM,EAAE,IAAI,CAAC,MAAM,IAAI,IAAI;aAC3B,aAAa,EAAE,IAAI,CAAC,aAAa,IAAI,IAAI;aACzC,MAAM,EAAE,IAAI,CAAC,MAAM,IAAI,IAAI;aAC3B,MAAM,EAAE,IAAI,CAAC,MAAM,IAAI,IAAI;aAC3B,OAAO,EAAE,IAAI,CAAC,OAAO,IAAI,IAAI;aAC7B,KAAK,EAAE,IAAI,CAAC,KAAK,IAAI,IAAI;aACzB,SAAS,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,GAAG,IAAI,CAAC;aACvF,SAAS,EAAE,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC;UACtC,CAAC;KACN,CAAC;KAED;;;;QAIG;KACW,0BAAmB,GAAjC,UAAkC,IAAS;SAEvC,MAAM,CAAC,MAAM,CAAC,YAAY,CACtB,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAC/B;aACI,WAAW,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,IAAI,IAAI,CAAC;aAChD,SAAS,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,IAAI,IAAI,CAAC;aAC5C,YAAY,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,IAAI,EAAE,CAAC;UACnD,CACJ,CAAC;KACN,CAAC;KAED;;;;;QAKG;KACW,uBAAgB,GAA9B,UAA+B,IAAS,EAAE,SAAc;SAEpD,MAAM,CAAC,MAAM,CAAC,YAAY,CACtB,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAC/B;aACI,oBAAoB,EAAE,SAAS,CAAC,sBAAsB,CAAC;UAC1D,CACJ,CAAC;KACN,CAAC;KAED;;;;QAIG;KACW,yBAAkB,GAAhC,UAAiC,IAAS;SAEtC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;KACvC,CAAC;KAED;;;;QAIG;KACW,qBAAc,GAA5B,UAA6B,IAAS;SAElC,MAAM,CAAC,MAAM,CAAC,YAAY,CACtB,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,EAC5B;aACI,KAAK,EAAE,IAAI,CAAC,KAAK,IAAI,EAAE;aACvB,QAAQ,EAAE;iBACN,QAAQ,EAAE,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;iBACnD,SAAS,EAAE,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC;cACxD;UACJ,CACJ,CAAC;KACN,CAAC;KAED;;;;QAIG;KACW,8BAAuB,GAArC,UAAsC,IAAS;SAE3C,MAAM,CAAC,MAAM,CAAC,YAAY,CACtB,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,EAC5B;aACI,KAAK,EAAE,IAAI,CAAC,iCAAiC;UAChD,CACJ,CAAC;KACN,CAAC;KAED;;;;QAIG;KACW,sBAAe,GAA7B,UAA8B,IAAS;SAEnC,MAAM,CAAC;aACH,SAAS,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,IAAI,CAAC;UAC5F,CAAC;KACN,CAAC;KAED;;;;QAIG;KACW,sBAAe,GAA7B,UAA8B,IAAS;SAEnC,MAAM,CAAC;aACH,KAAK,EAAE,IAAI,CAAC,KAAK,IAAI,EAAE;UAC1B,CAAC;KACN,CAAC;KAED;;;;QAIG;KACW,6BAAsB,GAApC,UAAqC,IAAS;SAE1C,MAAM,CAAC;aACH,KAAK,EAAE,IAAI,CAAC,KAAK,IAAI,EAAE;UAC1B,CAAC;KACN,CAAC;KAED;;;;QAIG;KACW,gCAAyB,GAAvC,UAAwC,IAAS;SAE7C,MAAM,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KAC1B,CAAC;KAED;;;;;QAKG;KACW,oBAAa,GAA3B,UAA4B,GAAW,EAAE,KAAU;SAE/C,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;SAC/B,MAAM,CAAC,MAAM,CAAC;KAClB,CAAC;KAED;;;;;QAKG;KACW,oBAAa,GAA3B,UAA4B,GAAW,EAAE,YAAmB;SAAnB,kDAAmB;SAExD,EAAE,CAAC,CAAC,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;aAC3B,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;SAClC,CAAC;SACD,MAAM,CAAC,YAAY,CAAC;KACxB,CAAC;KAED;;;;QAIG;KACW,uBAAgB,GAA9B,UAA+B,IAAY;SAEvC,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;aACnC,MAAM,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;SACnE,CAAC;SACD,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KACL,aAAC;AAAD,EAAC;AAnVG,kDAAiD;AAClC,kBAAU,GAAG,EAAE,CAAC;AAFtB,yBAAM;;;;;;;;;;;;;;;;;;;;;;;;;ACdnB,qCAAkG;AAClG,8CAAsG;AACtG,wDAAwH;AACxH,iDAAuG;AACvG,wCAA8E;AAC9E,+CAAiG;AACjG,qDAAkH;AAClH,8CAA8F;AAC9F,gDAAuH;AAEvH,0BAAyB;AACzB,yBAAwB;AACxB,KAAI,cAAc,GAAG,eAAM,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;AAEzD,oBAAmB;AACnB,gBAAM,CAAC,aAAa,CAAC,aAAa,EAAE,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AACjG,qEAA6I;AAE7I,oBAAmB;AACnB,gBAAM,CAAC,aAAa,CAAC,aAAa,EAAE,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AACjG,uDAAoH;AAEpH,4BAA2B;AAC3B,gBAAM,CAAC,aAAa,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;AACpD,2BAA0B;AAO1B,KAAa,aAAa;KAAS,iCAAa;KAI5C,uBACI,UAAsB,EACtB,QAAkB,EACE,QAAa,EACR,aAAkB,EAC3C,iBAAoC,EAC1B,aAA2B,EAC3B,gBAAkC;SAPhD,YASI,kBACI,UAAU,EACV,QAAQ,EACR,QAAQ,EACR,aAAa,EACb,iBAAiB,CACpB,SAIJ;SAba,mBAAa,GAAb,aAAa,CAAc;SAC3B,sBAAgB,GAAhB,gBAAgB,CAAkB;SAU5C,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;SAC1C,KAAI,CAAC,iBAAiB,GAAG,KAAI,CAAC,cAAc,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;;KAC5E,CAAC;KAED;;;;QAIG;KACI,kCAAU,GAAjB,UAAkB,KAAa;SAE3B,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;aACZ,KAAK,CAAC;iBACF,MAAM,CAAC;qBACH,MAAM,EAAE,oEAA8B;qBACtC,SAAS,EAAE,uBAAuB;qBAClC,YAAY,EAAE,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC;kBAC3D,CAAC;aACN,KAAK,CAAC;iBACF,MAAM,CAAC;qBACH,MAAM,EAAE,2CAAsB;qBAC9B,SAAS,EAAE,eAAe;qBAC1B,YAAY,EAAE,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC;kBAC3D;SACT,CAAC;SAED,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;;;QAKG;KACI,uCAAe,GAAtB,UAAuB,KAAa,EAAE,IAAW;SAAX,kCAAW;SAE7C,IAAI,SAAS,GAAG,EAAE,CAAC;SAEnB,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;aACZ,KAAK,CAAC;iBACF,SAAS,GAAG;qBACR,EAAC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,4CAAmB,EAAC;qBACvD,EAAC,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAC;kBACjF,CAAC;iBACF,KAAK,CAAC;aACV,KAAK,CAAC;iBACF,SAAS,GAAG;qBACR,EAAC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,0BAAW,EAAC;qBAC/C,0BAAW;qBACX,EAAC,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAC;qBAC7E,EAAC,OAAO,EAAE,uBAAuB,EAAE,QAAQ,EAAE;6BACzC,OAAO,EAAE;iCACL,OAAO,EAAE,CAAC,eAAM,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,iBAAiB,CAAC;iCAC3D,gBAAgB,EAAE,IAAI;iCACtB,OAAO,EAAE,MAAM;8BAClB;0BACJ,EAAC;kBACL,CAAC;iBACF,KAAK,CAAC;SACd,CAAC;SAED,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC;aACzB,gCAAc;aACd,EAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAC;aACnC,EAAC,OAAO,EAAE,qBAAqB,EAAE,QAAQ,EAAE,IAAI,CAAC,cAAc,CAAC,sBAAsB,CAAC,IAAI,CAAC,EAAC;aAC5F,EAAC,OAAO,EAAE,wBAAwB,EAAE,QAAQ,EAAE,IAAI,CAAC,cAAc,CAAC,yBAAyB,CAAC,IAAI,CAAC,EAAC;UACrG,CAAC,CAAC;SAEH,MAAM,CAAC,SAAS,CAAC;KACrB,CAAC;KAED;;QAEG;KACH,uCAAe,GAAf;SAEI,iBAAM,eAAe,WAAE,CAAC;SAExB,qBAAqB;SACrB,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;KACrC,CAAC;KACL,oBAAC;AAAD,EAAC,CAvGkC,8BAAa,GAuG/C;AAvGY,cAAa;KAJzB,gBAAS,CAAC;SACP,QAAQ,EAAE,UAAU;SACpB,WAAW,EAAE,eAAM,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,kCAAkC;MACjF,CAAC;KAQO,wBAAM,CAAC,UAAU,CAAC;KAClB,wBAAM,CAAC,eAAe,CAAC;sCAHZ,iBAAU;SACZ,eAAQ,kBAGC,uCAAiB;SACX,4BAAY;SACT,uBAAgB;IAXvC,aAAa,CAuGzB;AAvGY,uCAAa;;;;;;;;;;;;;;;;;;;;;;;;;AC/B1B,qCAA+D;AAC/D,kDAAuD;AACvD,8CAA4C;AAC5C,8CAAgE;AAMhE;;;IAGG;AAEH,KAAa,mBAAmB;KAAS,uCAAW;KAMhD,6BACI,WAAwB,EACC,aAAkB,EACZ,QAA6B,EAC5D,SAAuB;SAJ3B,YAMI,kBACI,WAAW,EACX,aAAa,EACb,QAAQ,EACR,SAAS,CACZ,SACJ;SAhBD,6FAA6F;SAC7F,6BAA6B;SACnB,2BAAqB,GAAW,IAAI,CAAC;;KAc/C,CAAC;KAED;;;QAGG;KACI,4CAAc,GAArB;SAEI,MAAM,CAAC,EAAC,UAAU,EAAE,IAAI,CAAC,YAAY,EAAE,iBAAiB,EAAE,IAAI,CAAC,qBAAqB,EAAC,CAAC;KAC1F,CAAC;KAED;;;;QAIG;KACI,0CAAY,GAAnB,UAAoB,KAAU;SAE1B,IAAI,IAAI,GAAG,IAAI,EACX,QAAQ,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,EAC7C,eAAe,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,CAAC;SAEhE,MAAM,CAAC,IAAI,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM;aACvC,kCAAkC;aAClC,EAAE,EAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;iBACpF,IAAI,iBAAe,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;iBAE9D,IAAI,CAAC,YAAY,CAAC,IAAI,CAClB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,iBAAe,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,EAC1E,IAAI,CAAC,cAAc,EAAE,CACxB,CAAC,IAAI,CACF,cAAI;qBACA,iDAAiD;qBACjD,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC;qBAC7B,IAAI,CAAC,qBAAqB,GAAG,eAAe,CAAC;qBAE7C,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;qBACjC,IAAI,CAAC,iBAAiB,GAAG,iBAAe,CAAC,QAAQ,CAAC,CAAC;qBACnD,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;iBACzB,CAAC,EACD,gBAAM,IAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aAC3D,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aACzB,CAAC;SACL,CAAC,CAAC,CAAC;KACP,CAAC;KAED;;;;;;QAMG;KACI,uCAAS,GAAhB,UAAiB,MAAW,EAAE,KAAiB;SAAjB,oCAAiB;SAE3C,IAAI,QAAQ,GAAG,CAAC,KAAK;eACX,CAAC,KAAK,CAAC,UAAU,CAAC;mBACd,KAAK,CAAC,UAAU,CAAC,CAAC,sBAAsB;mBACxC,KAAK,CAAC,mBAAmB;cAC9B;eACC,IAAI,CAAC,cAAc;UAC5B,CAAC;SAEF,EAAE,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACzB,IAAI,kBAAkB,GAAG,CAAC,KAAK;mBACrB,CAAC,KAAK,CAAC,iBAAiB,CAAC;uBACrB,KAAK,CAAC,iBAAiB,CAAC,CAAC,sBAAsB;uBAC/C,IAAI,CAAC,qBAAqB,CAAC,mBAAmB;kBACnD;mBACC,IAAI,CAAC,cAAc;cAC5B,CAAC;aACF,IAAI,kBAAkB,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;aAEhG,6DAA6D;aAC7D,EAAE,CAAC,CAAC,CAAC,CAAC,kBAAkB,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;iBAClD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC;aACpD,CAAC;aAED,8BAA8B;aAC9B,EAAE,CAAC,CAAC,CAAC,kBAAkB,IAAI,IAAI,CAAC,IAAI,CAAC,kBAAkB,IAAI,kBAAkB,CAAC,CAAC,CAAC,CAAC;iBAC7E,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;iBACnE,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;iBAC/B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,mCAAmC;iBAC/F,QAAQ,GAAG,CAAC,CAAC,CAAC,wDAAwD;aAC1E,CAAC;aAED,IAAI,CAAC,qBAAqB,GAAG,kBAAkB,CAAC;aAChD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;SAEvE,CAAC;SAAC,IAAI,CAAC,CAAC;aACJ,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;SACtC,CAAC;SAED,iBAAM,SAAS,YAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;SAElC,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;;;;QAMG;KACO,wDAA0B,GAApC,UAAqC,OAAmB,EAAE,MAAoB;SAAzC,wCAAmB;SAAE,sCAAoB;SAE1E,OAAO,GAAG,CAAC,OAAO,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;SAE9C,oBAAoB;SACpB,EAAE,CAAC,CAAC,OAAO,OAAO,IAAI,QAAQ,CAAC,CAAC,CAAC;aAC7B,GAAG,CAAC,CAAiB,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO;iBAAvB,IAAI,QAAQ;iBACb,iBAAM,0BAA0B,YAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;cACtD;SACL,CAAC;SAAC,IAAI,CAAC,CAAC;aACJ,iBAAM,0BAA0B,YAAC,OAAO,EAAE,MAAM,CAAC,CAAC;SACtD,CAAC;SAED,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;;QAIG;KACI,uCAAS,GAAhB,UAAiB,KAAiB;SAAjB,oCAAiB;SAC9B,IAAI,QAAQ,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,EAC7C,eAAe,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,CAAC;SAEhE,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC,eAAe,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC,CAAC;SAErG,MAAM,CAAC,iBAAM,SAAS,YAAC,QAAQ,CAAC,CAAC;KACrC,CAAC;KAED;;;;QAIG;KACI,oCAAM,GAAb,UAAc,KAAU;SAEpB,IAAI,QAAQ,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,EAC7C,eAAe,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,CAAC;SAEhE,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC,eAAe,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC,CAAC;SAErG,MAAM,CAAC,iBAAM,MAAM,YAAC,QAAQ,CAAC,CAAC;KAClC,CAAC;KAED;;;QAGG;KACI,oCAAM,GAAb,UAAc,KAAiB;SAAjB,oCAAiB;SAE3B,IAAI,QAAQ,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,EAC1D,eAAe,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,qBAAqB,CAAC,CAAC;SAEtF,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC,eAAe,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC,CAAC;SAErG,iBAAM,MAAM,YAAC,QAAQ,CAAC,CAAC;SAEvB,MAAM,CAAC;KACX,CAAC;KAED;;;;;QAKG;KACI,wCAAU,GAAjB,UAAkB,OAAY,EAAE,OAAwB;SAAxB,yCAAwB;SAEpD,OAAO,GAAG,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;SAE1B,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;SAEzC,IAAI,CAAC,YAAY,EAAE,CAAC;SAEpB,GAAG,CAAC,CAAC,IAAI,aAAa,IAAI,OAAO,CAAC,CAAC,CAAC;aAChC,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;aAC3B,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;aAC3C,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC;SAClE,CAAC;SAED,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAE,mEAAmE;SACtF,UADmB,mEAAmE;aACtF,IAAI,IAAK,CAAC,EACV,gBAAM,IAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CACrC,CAAC;SAEF,gBAAgB;SAChB,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAE3C,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;QAGG;KACO,0CAAY,GAAtB;SACI,iBAAM,YAAY,WAAE,CAAC;SACrB,IAAI,CAAC,SAAS,CAAC,OAAO,GAAG,EAAE,CAAC;SAC5B,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KACL,0BAAC;AAAD,EAAC,CAjOwC,0BAAW,GAiOnD;AAjOY,oBAAmB;KAD/B,iBAAU,EAAE;KASJ,wBAAM,CAAC,eAAe,CAAC;KACvB,wBAAM,CAAC,qBAAqB,CAAC;sCAFjB,0BAAW,kBAGb,+BAAY;IAVlB,mBAAmB,CAiO/B;AAjOY,mDAAmB;;;;;;;;;;;;;;;;;;;;ACdhC,qCAA+F;AAC/F,uCAAkE;AAElE,+CAA0D;AAC1D,wCAAiC;AAcjC,KAAa,WAAW;KAkBpB,qBACc,aAA2B,EACrC,WAAwB,EACS,YAAiB,EACf,cAAmB;SAJ1D,iBAwBC;SAvBa,kBAAa,GAAb,aAAa,CAAc;SAEJ,iBAAY,GAAZ,YAAY,CAAK;SACf,mBAAc,GAAd,cAAc,CAAK;SAlBhD,oBAAe,GAAQ,EAAE,CAAC,CAAC,qEAAqE;SAChG,8BAAyB,GAAQ,EAAE,CAAC,CAAC,yEAAyE;SAC9G,YAAO,GAAQ,EAAE,CAAC,CAAC,sBAAsB;SAEzC,WAAM,GAAG,IAAI,CAAC,CAAC,WAAW;SAE1B,YAAO,GAAQ,EAAE,CAAC,CAAC,yBAAyB;SACtD,0GAA0G;SAC1G,gHAAgH;SACtG,cAAS,GAAY,KAAK,CAAC;SAWjC,IAAI,CAAC,sBAAsB,GAAG,IAAI,mBAAY,EAAE,CAAC;SAEjD,mCAAmC;SACnC,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC,YAAY,CAAC,wBAAwB,EAAE;cAC1E,SAAS,CAAC,gBAAM,IAAI,YAAI,CAAC,0BAA0B,CAAC,MAAM,CAAC,EAAvC,CAAuC,CAAC,CAAC;SAElE,aAAa;SACb,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC,CAAC;SAE9C,aAAa;SACb,IAAI,YAAY,GAAG,EAAE,EACjB,MAAM,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CACvD,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC,CACvF,CAAC;SACN,GAAG,CAAC,CAAc,UAAM,EAAN,iBAAM,EAAN,oBAAM,EAAN,IAAM;aAAnB,IAAI,KAAK;aACV,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC;UACvD;SACD,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;KACjD,CAAC;KAED;;;;;;QAMG;KACI,0BAAI,GAAX,UAAY,SAAc;SAEtB,kBAAkB;SAClB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;SAC5B,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SAElE,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;QAGG;KACI,8CAAwB,GAA/B;SACI,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC;KACvC,CAAC;KAED;;;QAGG;KACI,gDAA0B,GAAjC,UAAkC,MAAW;SAEzC,kCAAkC;SAClC,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;aACjC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;iBACjB,8DAA8D;iBAC9D,+FAA+F;iBAC/F,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;iBACvB,MAAM,CAAC;aACX,CAAC;aAED,2BAA2B;aAC3B,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,IAAI,CACjC,cAAI,IAAM,MAAM,CAAC,CAAC,CAAC,EACnB,gBAAM,IAAM,MAAM,CAAC,CAAC,CAAC,CACxB,CAAC;SACN,CAAC;KACL,CAAC;KAED;;;;;QAKG;KACI,yCAAmB,GAA1B,UAA2B,MAAW;SAElC,IAAI,IAAI,GAAG,IAAI,CAAC;SAEhB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM;aACvC,6CAA6C;aAC7C,EAAE,EAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;iBACnB,iBAAiB;iBACjB,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,IAAI,CACnC,oBAAU;qBACN,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;yBACb,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;yBACvB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;qBACzB,CAAC;qBAAC,IAAI,CAAC,CAAC;yBACJ,iCAAiC;yBACjC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;yBAClD,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;qBACzB,CAAC;iBACL,CAAC,EACD,gBAAM,IAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAC3D,CAAC;aACN,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;iBACvB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aACzB,CAAC;SACL,CAAC,CAAC,CAAC;KACP,CAAC;KAED;;;;QAIG;KACI,+BAAS,GAAhB,UAAiB,MAAW;SAExB,oCAAoC;SACpC,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;aACjC,4CAA4C;aAC5C,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC;aAC9B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC,6EAA6E;aAErG,2BAA2B;aAC3B,IAAI,CAAC,yBAAyB,GAAG,eAAM,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;aAChF,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;aAErD,qBAAqB;aACrB,IAAI,CAAC,OAAO,GAAG,eAAM,CAAC,WAAW,CAAC,IAAI,CAAC,yBAAyB,EAAE,IAAI,CAAC,CAAC;aAExE,eAAe;aACf,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;aAElB,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,wDAAwD;SAC5G,CAAC;SACD,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;;;;QAMG;KACO,qCAAe,GAAzB,UAA0B,MAAM,EAAE,MAAkB;SAAlB,sCAAkB;SAEhD,MAAM,GAAG,CAAC,MAAM,IAAI,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;SAEzE,EAAE,EAAC,MAAM,IAAI,MAAM,CAAC,CAAC,CAAC;aAClB,IAAI,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC;aAE7E,GAAG,CAAC,CAAc,UAAM,EAAN,iBAAM,EAAN,oBAAM,EAAN,IAAM;iBAAnB,IAAI,KAAK;iBACV,IAAI,aAAa,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;iBAE1C,MAAM,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;qBAC5B,KAAK,MAAM;yBACP,MAAM,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;yBAC1E,KAAK,CAAC;iBACd,CAAC;cACJ;SACL,CAAC;SACD,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;;;QAKG;KACO,oCAAc,GAAxB,UAAyB,KAAK,EAAE,IAAI;SAEhC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;aACX,KAAK,MAAM;iBACP,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,OAAO,KAAK,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC;qBACtC,IAAI,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;qBAC/B,MAAM,CAAC;yBACH,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;yBAC1B,KAAK,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;yBAC3B,GAAG,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;sBAC5B,CAAC;iBACN,CAAC;iBACD,MAAM,CAAC,KAAK,CAAC;SACrB,CAAC;KACL,CAAC;KAED;;;QAGG;KACI,+BAAS,GAAhB;SAEI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;KACxB,CAAC;KAED;;;QAGG;KACI,gCAAU,GAAjB;SAEI,MAAM,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,yBAAyB,CAAC,CAAC;KAC5F,CAAC;KAED;;;QAGG;KACI,6BAAO,GAAd;SAEI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;KACtB,CAAC;KAED;;;;QAIG;KACI,+BAAS,GAAhB,UAAiB,MAAW;SAExB,IAAI,CAAC,OAAO,GAAG,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC;SAC9B,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;QAGG;KACI,+BAAS,GAAhB;SAEI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;KACxB,CAAC;KAED;;;;QAIG;KACI,uCAAiB,GAAxB,UAAyB,KAAa,EAAE,KAAU;SAE9C,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;aACnC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;SAChC,CAAC;KACL,CAAC;KAED;;;QAGG;KACI,mCAAa,GAApB;SAEI,MAAM,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,mBAAmB,EAAE,IAAI,EAAE,CAAC,CAAC;KAC3D,CAAC;KAED;;;;;;;QAOG;KACI,0BAAI,GAAX,UAAY,KAAoB,EAAE,WAAmB,EAAE,aAA6B;SAAxE,oCAAoB;SAAE,iDAAmB;SAAE,oDAA6B;SAEhF,IAAI,IAAI,GAAG,IAAI,CAAC;SAEhB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM;aACvC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;iBACjB,kCAAkC;iBAClC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aACzB,CAAC;aAED,0BAA0B;aAC1B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;aAEtB,6CAA6C;aAC7C,EAAE,EAAC,WAAW,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;iBAEzD,gBAAgB;iBAChB,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;qBAChB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;qBAClB,GAAG,CAAC,CAAC,IAAI,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;yBACtC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;6BACtC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;yBACzC,CAAC;qBACL,CAAC;qBACD,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;yBACrD,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;yBACvB,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;qBACzB,CAAC;iBACL,CAAC;iBAED,gBAAgB;iBAChB,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;iBACnC,IAAI,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;iBAExD,YAAY;iBACZ,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC,IAAI,CACxC,gBAAM;qBACF,2CAA2C;qBAC3C,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;qBACvB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;iBACzB,CAAC,EACD,gBAAM;qBACF,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;yBAAC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;qBAAC,CAAC;qBACtC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;qBACvB,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;iBAC1B,CAAC,CACJ,CAAC;aACN,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;iBACvB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aACzB,CAAC;SACL,CAAC,CAAC,CAAC;KACP,CAAC;KAED;;;;QAIG;KACI,gCAAU,GAAjB,UAAkB,MAAkB;SAAlB,sCAAkB;SAEhC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;aAAC,MAAM,CAAC,cAAc,EAAE,CAAC;SAAC,CAAC;SACxC,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CACZ,cAAI,IAAM,MAAM,CAAC,CAAC,CAAC,EACnB,gBAAM,IAAM,MAAM,CAAC,CAAC,CAAC,CACxB,CAAC;KACN,CAAC;KAED;;;;QAIG;KACI,wCAAkB,GAAzB,UAA0B,MAAkB;SAA5C,iBAaC;SAbyB,sCAAkB;SAExC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;aAAC,MAAM,CAAC,cAAc,EAAE,CAAC;SAAC,CAAC;SAExC,IAAI,IAAI,GAAG,IAAI,CAAC;SAEhB,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CACZ,cAAI;aACA,KAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;aAC3B,MAAM,CAAC;SACX,CAAC,EACD,gBAAM,IAAM,MAAM,CAAC,CAAC,CAAC,CACxB,CAAC;KACN,CAAC;KAED;;;;QAIG;KACI,sCAAgB,GAAvB,UAAwB,MAAkB;SAA1C,iBAUC;SAVuB,sCAAkB;SAEtC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;aAAC,MAAM,CAAC,cAAc,EAAE,CAAC;SAAC,CAAC;SACxC,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CACZ,cAAI;aACA,KAAI,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC;aAC9B,MAAM,CAAC;SACX,CAAC,EACD,gBAAM,IAAM,MAAM,CAAC,CAAC,CAAC,CACxB,CAAC;KACN,CAAC;KAED;;;;;QAKG;KACI,2BAAK,GAAZ,UAAa,UAA0B;SAA1B,8CAA0B;SAEnC,IAAI,IAAI,GAAG,IAAI,CAAC;SAEhB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM;aACvC,EAAE,EAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;iBACnB,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;qBACb,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC,IAAI,CAChE,cAAI,IAAM,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EACjC,gBAAM,IAAM,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CACtC,CAAC;iBACN,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;qBAC/C,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;iBACzB,CAAC;aACL,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aACzB,CAAC;SACL,CAAC,CAAC,CAAC;KACP,CAAC;KAED;;;;QAIG;KACI,iCAAW,GAAlB,UAAmB,MAAkB;SAAlB,sCAAkB;SAEjC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;aAAC,MAAM,CAAC,cAAc,EAAE,CAAC;SAAC,CAAC;SACxC,IAAI,CAAC,KAAK,EAAE,CAAC,IAAI,CACb,cAAI,IAAM,MAAM,CAAC,CAAC,CAAC,EACnB,gBAAM,IAAM,MAAM,CAAC,CAAC,CAAC,CACxB,CAAC;KACN,CAAC;KACL,kBAAC;AAAD,EAAC;AAvaY,YAAW;KADvB,iBAAU,EAAE;KAsBJ,wBAAM,CAAC,aAAa,CAAC;KACrB,wBAAM,CAAC,eAAe,CAAC;sCAHC,4BAAY;SACxB,mBAAW;IApBnB,WAAW,CAuavB;AAvaY,mCAAW;;;;;;;;;;;;;;;;;;;;;;;;;AClBxB,qCAA2H;AAC3H,wCAA6E;AAC7E,gDAAiG;AACjG,qDAAyG;AAUzG,KAAsB,aAAa;KAAS,iCAAa;KAIrD,uBACI,UAAsB,EACtB,QAAkB,EACc,QAAa,EACV,cAAmB,EAC5C,kBAAqC;SALnD,YAOI,kBACI,UAAU,EACV,QAAQ,EACR,QAAQ,IAAI,IAAI,CACnB,SACJ;SARsC,oBAAc,GAAd,cAAc,CAAK;SAC5C,wBAAkB,GAAlB,kBAAkB,CAAmB;;KAOnD,CAAC;KAED;;QAEG;KACH,uCAAe,GAAf;SAEI,sDAAsD;SACtD,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,0BAA0B,CAAC,CAAC;KACxE,CAAC;KACL,oBAAC;AAAD,EAAC,CA1B2C,8BAAa,GA0BxD;AAxBmE;KAA/D,mBAAY,CAAC,sBAAsB,EAAE,EAAC,IAAI,EAAE,uBAAgB,EAAC,CAAC;+BAA6B,gBAAS;kEAAmB;AAFtG,cAAa;KAJlC,gBAAS,CAAC;SACP,QAAQ,EAAE,UAAU;SACpB,WAAW,EAAE,eAAM,CAAC,aAAa,CAAC,aAAa,CAAC;MACnD,CAAC;KAQO,0BAAQ,EAAE,GAAE,wBAAM,CAAC,UAAU,CAAC;KAC9B,wBAAM,CAAC,eAAe,CAAC;sCAHZ,iBAAU;SACZ,eAAQ,kBAGY,uCAAiB;IATjC,aAAa,CA0BlC;AA1BqB,uCAAa;;;;;;;;;;;;;;;;;ACbnC,qCAA8D;AAO9D;;IAEG;AACH,aAAY;AAKZ,KAAsB,aAAa;KAC/B,uBACc,WAAuB,EACvB,SAAmB;SAC7B,+DAA+D;SAC/D,oGAAoG;SAC1F,SAAuB;SAJvB,gBAAW,GAAX,WAAW,CAAY;SACvB,cAAS,GAAT,SAAS,CAAU;SAGnB,cAAS,GAAT,SAAS,CAAc;SAEjC,eAAe;SACf,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;aAClB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;SACxB,CAAC;SAED,iBAAiB;SACjB,IAAI,SAAS,GAAG,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;SACvD,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;aACZ,IAAI,CAAC,SAAS,CAAC,eAAe,CAC1B,IAAI,CAAC,WAAW,CAAC,aAAa,EAC9B,SAAS,EACT,IAAI,CACP,CAAC;SACN,CAAC;KACL,CAAC;KAED;;;;QAIG;KACO,uCAAe,GAAzB,UAA0B,SAAiB;SAEvC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC;KAC7C,CAAC;KAED;;;;QAIG;KACI,gDAAwB,GAA/B,UAAgC,SAAiB;SAE7C,MAAM,CAAC,CACH,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,CAAC;eACjE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC;eACtC,IAAI,CACb,CAAC;KACN,CAAC;KACL,oBAAC;AAAD,EAAC;AA/CqB,cAAa;KAJlC,gBAAS,CAAC;SACP,QAAQ,EAAE,UAAU;SACpB,QAAQ,EAAE,EAAE;MACf,CAAC;sCAG6B,iBAAU;SACZ,eAAQ;IAHf,aAAa,CA+ClC;AA/CqB,uCAAa;;;;;;;;;;;;;;ACfnC,qCAAuC;AACvC,wCAA6C;AAC7C,uCAA2C;AAC3C,+CAAqD;AACrD,iDAA2D;AAC3D,0DAAiE;AACjE,0DAAiE;AACjE,2EAAyG;AAiBzG,KAAa,8BAA8B;KAA3C;KAA6C,CAAC;KAAD,qCAAC;AAAD,EAAC;AAAjC,+BAA8B;KAd1C,eAAQ,CAAC;SACN,OAAO,EAAE;aACL,qBAAY;aACZ,mBAAW;aACX,4BAAY;aACZ,gCAAc;UACjB;SACD,YAAY,EAAE;aACV,gDAAqB;aACrB,gDAAqB;aACrB,+EAAmC;UACtC;SACD,OAAO,EAAE,CAAC,gDAAqB,CAAC;MACnC,CAAC;IACW,8BAA8B,CAAG;AAAjC,yEAA8B;;;;;;;;;;;;;;;;;;;;;;;;;ACxB3C,qCAAsF;AAEtF,iDAA0D;AAE1D,+CAA0D;AAC1D,qDAA0E;AAC1E,2CAAoC;AAUpC,KAAa,qBAAqB;KAAS,yCAAiB;KAMxD,+BACI,gBAAkC,EAClC,QAAkB,EACE,QAA0B,EACvB,WAAgB,EACvC,cAA8B,EAC9B,YAA0B,EACR,MAAsB,EACxC,QAAkB,EACiB,cAAmB;SAT1D;SAWI,cAAc;SACd,kBACI,gBAAgB,EAChB,QAAQ,EACR,QAAQ,EACR,WAAW,EACX,cAAc,EACd,YAAY,EACZ,MAAM,EACN,QAAQ,CACX,SAIJ;SAhBsC,oBAAc,GAAd,cAAc,CAAK;SAbhD,YAAM,GAAG,IAAI,CAAC,CAAC,cAAc;SA0BnC,KAAI,CAAC,QAAQ,EAAE,CAAC;SAChB,KAAI,CAAC,4BAA4B,GAAG,KAAI,CAAC,YAAY,CAAC,yBAAyB,EAAE;cAC5E,SAAS,CAAC,iBAAO,IAAI,YAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAtB,CAAsB,CAAC,CAAC;;KACtD,CAAC;KAED;;;;QAIG;KACI,wCAAQ,GAAf,UAAgB,KAAY;SAAZ,oCAAY;SAExB,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;aACjB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;SACvB,CAAC;SACD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC;KACtC,CAAC;KAED;;;;QAIG;KACO,wCAAQ,GAAlB,UAAmB,OAAc;SAAd,wCAAc;SAE7B,OAAO,GAAG,CAAC,OAAO,GAAG,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC;SAC7E,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;SAEjB,GAAG,CAAC,CAAC,IAAI,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC;aAC1B,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;aAC1B,GAAG,CAAC,CAAC,IAAI,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;iBAClC,6FAA6F;iBAC7F,8BAA8B;iBAC9B,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;aACzF,CAAC;SACL,CAAC;SACD,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;;QAIG;KACO,oCAAI,GAAd;SAEI,IAAI,IAAI,GAAG,IAAI,CAAC;SAEhB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM;aACvC,6CAA6C;aAC7C,EAAE,EAAC,CAAC,kBAAM,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;iBAClF,gBAAgB;iBAChB,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;iBAEvC,YAAY;iBACZ,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC5C,CAAC;aACD,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SACzB,CAAC,CAAC,CAAC;KACP,CAAC;KAED;;;;;QAKG;KACI,0CAAU,GAAjB,UAAkB,MAAkB,EAAE,UAAkB;SAAtC,sCAAkB;SAAE,+CAAkB;SAEpD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;aAAC,MAAM,CAAC,cAAc,EAAE,CAAC;SAAC,CAAC;SACxC,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CACZ,cAAI,IAAM,MAAM,CAAC,CAAC,CAAC,EACnB,gBAAM,IAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAC7C,CAAC;KACN,CAAC;KAED;;;QAGG;KACO,qCAAK,GAAf;SAEI,IAAI,IAAI,GAAG,IAAI,CAAC;SAEhB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM;aACvC,6CAA6C;aAC7C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;oBAC1F,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,mDAAmD;aAC9G,CAAC,CAAC,CAAC;iBACC,iBAAiB;iBACjB,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,IAAI,CACnC,oBAAU;qBACN,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;yBACb,IAAI,CAAC,QAAQ,EAAE,CAAC;yBAChB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;qBACzB,CAAC;qBAAC,IAAI,CAAC,CAAC;yBACJ,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;qBACzB,CAAC;iBACL,CAAC,EACD,gBAAM,IAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAC3D,CAAC;aACN,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aACzB,CAAC;SACL,CAAC,CAAC,CAAC;KACP,CAAC;KAED;;;QAGG;KACO,2CAAW,GAArB,UAAsB,MAAkB;SAAlB,sCAAkB;SAEpC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;aAAC,MAAM,CAAC,cAAc,EAAE,CAAC;SAAC,CAAC;SACxC,IAAI,CAAC,KAAK,EAAE,CAAC,IAAI,CACb,cAAI,IAAM,MAAM,CAAC,CAAC,CAAC,EACnB,gBAAM,IAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAC7C,CAAC;KACN,CAAC;KAED;;QAEG;KACH,wCAAQ,GAAR;SAEI,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAC/E,CAAC;KAED;;QAEG;KACH,2CAAW,GAAX;SAEI,IAAI,CAAC,4BAA4B,CAAC,WAAW,EAAE,CAAC;KACpD,CAAC;KACL,4BAAC;AAAD,EAAC,CAnK0C,uCAAiB,GAmK3D;AAnKY,sBAAqB;KAJjC,gBAAS,CAAC;SACP,QAAQ,EAAE,kBAAkB;SAC5B,WAAW,EAAE,kBAAM,CAAC,aAAa,CAAC,aAAa,CAAC;MACnD,CAAC;KAUO,wBAAM,CAAC,UAAU,CAAC;KAClB,wBAAM,CAAC,aAAa,CAAC;KAGrB,wBAAM,CAAC,QAAQ,CAAC;KAEhB,wBAAM,CAAC,eAAe,CAAC;sCARN,uBAAgB;SACxB,eAAQ,kBAGF,gCAAc;SAChB,4BAAY,UAEhB,eAAQ;IAdb,qBAAqB,CAmKjC;AAnKY,uDAAqB;;;;;;;;;;;;;;;;;;;;;;;;;AChBlC,qCAAsF;AAEtF,iDAA0D;AAC1D,oDAA+E;AAC/E,+CAA0D;AAC1D,2CAAoC;AAWpC,KAAa,iBAAiB;KAAS,qCAAgB;KAKnD,2BACI,gBAAkC,EAClC,QAAkB,EACE,QAA0B,EACvB,WAAgB,EACvC,cAA8B,EAC9B,YAA0B,EACR,MAAsB,EACxC,QAAkB;SARtB;SAUI,cAAc;SACd,kBACI,gBAAgB,EAChB,QAAQ,EACR,QAAQ,EACR,WAAW,EACX,cAAc,EACd,YAAY,EACZ,MAAM,EACN,QAAQ,CACX,SAIJ;SAFG,KAAI,CAAC,gBAAgB,GAAG,KAAI,CAAC;SAC7B,KAAI,CAAC,SAAS,GAAG,EAAE,CAAC;;KACxB,CAAC;KAED;;;;QAIG;KACO,oCAAQ,GAAlB,UAAmB,KAAY;SAAZ,oCAAY;SAE3B,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;aACjB,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;SACxD,CAAC;SACD,MAAM,CAAC,CACH,CAAC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC;gBACjD,CAAC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;eAC9D,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC;eACnD,IAAI,CACb,CAAC;KACN,CAAC;KAED;;;QAGG;KACO,0CAAc,GAAxB,UAAyB,KAAa;SAElC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC;KACnE,CAAC;KAED;;;;QAIG;KACO,mCAAO,GAAjB,UAAkB,MAAW;SAEzB,IAAI,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;SAElD,EAAE,EAAC,SAAS,IAAI,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;aAChC,IAAI,YAAY,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC;aAChE,MAAM,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;SAClE,CAAC;SACD,MAAM,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,IAAI,UAAU,CAAC,CAAC;KAC/D,CAAC;KACL,wBAAC;AAAD,EAAC,CAzEsC,qCAAgB,GAyEtD;AAzEY,kBAAiB;KAJ7B,gBAAS,CAAC;SACP,QAAQ,EAAE,cAAc;SACxB,WAAW,EAAE,kBAAM,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,4BAA4B;MAC3E,CAAC;KASO,wBAAM,CAAC,UAAU,CAAC;KAClB,wBAAM,CAAC,aAAa,CAAC;KAGrB,wBAAM,CAAC,QAAQ,CAAC;sCANC,uBAAgB;SACxB,eAAQ,kBAGF,gCAAc;SAChB,4BAAY,UAEhB,eAAQ;IAbb,iBAAiB,CAyE7B;AAzEY,+CAAiB;;;;;;;;;;;;;;;;;;;;;;;;;AChB9B,qCAA0G;AAC1G,8DAAqH;AAO7E,gEAAU;AANlD,+CAA0D;AAE1D,wCAAiC;AACjC,iDAA0D;AAM1D,aAAY;AAKZ,KAAa,gBAAgB;KAAS,oCAAyB;KAE3D,0BACI,gBAAkC,EAClC,QAAkB,EACE,QAAyB,EACtB,WAAgB,EACvC,cAA8B,EAC9B,YAA0B,EACR,MAAsB,EACxC,QAAkB;SARtB;SAUI,cAAc;SACd,iBAAO,SAWV;SAVG,iBAAM,6BAA6B,aAC/B,gBAAgB,EAChB,QAAQ,EACR,QAAQ,EACR,WAAW,EACX,cAAc,EACd,YAAY,EACZ,MAAM,EACN,QAAQ,CACX,CAAC;;KACN,CAAC;KACL,uBAAC;AAAD,EAAC,CAzBqC,wDAAyB,GAyB9D;AAzBY,iBAAgB;KAJ5B,gBAAS,CAAC;SACP,QAAQ,EAAE,aAAa;SACvB,WAAW,EAAE,eAAM,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,2BAA2B;MAC1E,CAAC;KAMO,wBAAM,CAAC,UAAU,CAAC;KAClB,wBAAM,CAAC,aAAa,CAAC;KAGrB,wBAAM,CAAC,QAAQ,CAAC;sCANC,uBAAgB;SACxB,eAAQ,kBAGF,gCAAc;SAChB,4BAAY,UAEhB,eAAQ;IAVb,gBAAgB,CAyB5B;AAzBY,6CAAgB;;;;;;;;;;;;;;;;;;;;;;AChB7B,qCAA0G;AAG1G,8CAAqE;AAErE,yDAAqE;AAOrE,eAAc;AACH,mBAAU,GAAG;KACpB,IAAI,EAAE,MAAM;KACZ,GAAG,EAAE,KAAK;EACb,CAAC;AAOF,aAAY;AAKZ,KAAsB,yBAAyB;KAAS,6CAAqB;KAWzE;SAAA,YAAgB,iBAAO,SAAG;SAFhB,cAAQ,GAAY,KAAK,CAAC,CAAC,2BAA2B;;KAEvC,CAAC;KAE1B;;;;;;;;;;QAUG;KACI,iEAA6B,GAApC,UACI,gBAAkC,EAClC,QAAkB,EAClB,QAAyB,EACzB,WAAgB,EAChB,cAA8B,EAC9B,YAA0B;SAC1B,qCAAqC;SACrC,iCAAiC;SACjC,kBAAkB;SAClB,kBAAkB;SAClB,MAAM;SACN,sCAAsC;SACtC,uCAAuC;SACvC,MAAsB,EAAE,qDAAqD;SAC7E,qDAAqD;SACrD,QAAkB;SAElB,0BAA0B;SAC1B,iBAAM,yBAAyB,YAC3B,gBAAgB,CAAC,OAAO,EACxB,QAAQ,EACR,QAAQ,CACX,CAAC;SAEF,mBAAmB;SACnB,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;SAC1C,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;SAChC,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;SACtC,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;SAClC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;SACtB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;SAE1B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;KACpD,CAAC;KAED;;;;QAIG;KACO,+CAAW,GAArB,UAAsB,KAAa;SAE/B,MAAM,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;aAC1D,KAAK,QAAQ,CAAC;aACd,KAAK,YAAY,CAAC;aAClB,KAAK,UAAU,CAAC;aAChB,KAAK,MAAM,CAAC;aACZ,KAAK,UAAU;iBACX,MAAM,CAAC,aAAa,CAAC;aACzB,KAAK,SAAS,CAAC;aACf,KAAK,MAAM,CAAC;aACZ,KAAK,KAAK,CAAC;aACX,KAAK,QAAQ;iBACT,MAAM,CAAC,aAAa,CAAC;aACzB;iBACI,MAAM,CAAC,aAAa,CAAC;SAC7B,CAAC;KACL,CAAC;KAED;;;;;QAKG;KACO,iDAAa,GAAvB,UAAwB,MAAW,EAAE,MAAqB,EAAE,IAAgB;SAAvC,sCAAqB;SAAE,kCAAgB;SAExE,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;aAAC,MAAM,CAAC,cAAc,EAAE,CAAC;SAAC,CAAC;SAExC,iBAAiB;SACjB,MAAM,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,CAAC;SAE/D,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;aACT,sCAAsC;aACtC,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;iBACf,IAAI,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC,CAAC;aACtD,CAAC;aAED,gBAAgB;aAChB,IAAI,QAAQ,GAAG,CAAC,MAAM,GAAG,QAAQ,CAAC,CAAC;aACnC,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;iBAC/B,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC;qBACjD,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;iBACjC,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;iBAC3B,CAAC;aACL,CAAC;SACL,CAAC;KACL,CAAC;KAED;;;;QAIG;KACI,8CAAU,GAAjB,UAAkB,MAAW,EAAE,IAAS;SAEpC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;aAAC,MAAM,CAAC,cAAc,EAAE,CAAC;SAAC,CAAC;SAExC,YAAY;SACZ,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;aAC3D,MAAM,CAAC;SACX,CAAC;SAED,IAAI,IAAI,GAAG,IAAI,CAAC;SAChB,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAS,IAAI;aACnD,IAAI,CAAC,SAAS,CAAC,kBAAU,CAAC,IAAI,CAAC,CAAC;SACpC,CAAC,CAAC,CAAC;KACP,CAAC;KAED;;;QAGG;KACI,6CAAS,GAAhB,UAAiB,MAAiB;SAAjB,sCAAiB;SAE9B,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;aAAC,MAAM,CAAC,cAAc,EAAE,CAAC;SAAC,CAAC;SAExC,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC;SAC9B,IAAI,CAAC,SAAS,CAAC,kBAAU,CAAC,GAAG,CAAC,CAAC;KACnC,CAAC;KAED;;;;QAIG;KACI,8CAAU,GAAjB,UAAkB,MAAiB,EAAE,IAAS;SAA5B,sCAAiB;SAE/B,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;aAAC,MAAM,CAAC,cAAc,EAAE,CAAC;SAAC,CAAC;SAExC,IAAI,IAAI,GAAG,IAAI,CAAC;SAChB,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAClC,cAAI;aACA,IAAI,CAAC,SAAS,CAAC,kBAAU,CAAC,IAAI,CAAC,CAAC;SACpC,CAAC,EACD,gBAAM,IAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CACrC,CAAC;KACN,CAAC;KAED;;;;QAIG;KACI,gDAAY,GAAnB,UAAoB,MAAW,EAAE,IAAS;SAEtC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;aAAC,MAAM,CAAC,cAAc,EAAE,CAAC;SAAC,CAAC;SAExC,IAAI,IAAI,GAAG,IAAI,CAAC;SAEhB,iBAAiB;SACjB,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,yBAAyB,CAAC,CAAC,IAAI,CACrD,oBAAU;aACN,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;iBACb,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAC/B,cAAI,IAAM,MAAM,CAAC,CAAC,CAAC,EACnB,gBAAM,IAAM,MAAM,CAAC,CAAC,CAAC,CACxB,CAAC;aACN,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,MAAM,CAAC;aACX,CAAC;SACL,CAAC,EACD,gBAAM;aACF,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;SACxB,CAAC,CACJ,CAAC;KACN,CAAC;KAED;;;;QAIG;KACI,iDAAa,GAApB,UAAqB,MAAW,EAAE,IAAS;SAEvC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;aAAC,MAAM,CAAC,cAAc,EAAE,CAAC;SAAC,CAAC;SACxC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,yBAAU,CAAC,EAAE,CAAC,CAAC;KACjD,CAAC;KAED;;;;QAIG;KACI,mDAAe,GAAtB,UAAuB,MAAW,EAAE,IAAS;SAEzC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;aAAC,MAAM,CAAC,cAAc,EAAE,CAAC;SAAC,CAAC;SACxC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,yBAAU,CAAC,IAAI,CAAC,CAAC;KACnD,CAAC;KAED;;;QAGG;KACI,mDAAe,GAAtB,UAAuB,MAAW;SAAlC,iBAuBC;SArBG,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;aAAC,MAAM,CAAC;SAAC,CAAC;SACxB,MAAM,CAAC,cAAc,EAAE,CAAC;SAExB,IAAI,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;SAChF,IAAI,IAAI,GAAG,KAAK,CAAC,cAAc,EAAE,CAAC;SAElC,EAAE,EAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;aACb,iBAAiB;aACjB,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,IAAI,CAC5B,oBAAU;iBACN,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;qBACb,KAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;iBACxC,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,MAAM,CAAC;iBACX,CAAC;aACL,CAAC,EACD,gBAAM;iBACF,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;aACxB,CAAC,CACJ,CAAC;SACN,CAAC;KACL,CAAC;KAED;;;;QAIG;KACI,gDAAY,GAAnB,UAAoB,MAAW,EAAE,IAAS;SAEtC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;aAAC,MAAM,CAAC,cAAc,EAAE,CAAC;SAAC,CAAC;SACxC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;KACnC,CAAC;KAED;;;QAGG;KACO,kDAAc,GAAxB,UAAyB,MAAkB;SAAlB,sCAAkB;SAEvC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;aAAC,MAAM,CAAC,cAAc,EAAE,CAAC;SAAC,CAAC;SACxC,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;KACnC,CAAC;KAED;;;QAGG;KACI,iDAAa,GAApB,UAAqB,MAAkB;SAAlB,sCAAkB;SAEnC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;aAAC,MAAM,CAAC,cAAc,EAAE,CAAC;SAAC,CAAC;SACxC,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;KAChC,CAAC;KAED;;;;QAIG;KACO,6CAAS,GAAnB,UAAoB,SAA2B;SAA3B,wCAAY,kBAAU,CAAC,IAAI;SAE3C,yDAAyD;SACzD,SAAS,GAAG,CAAC,kBAAU,CAAC,SAAS,CAAC,IAAI,kBAAU,CAAC,IAAI,CAAC,CAAC;SACvD,IAAI,KAAK,GAAU,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC;SAE3D,aAAa;SACb,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAChD,cAAI,IAAM,MAAM,CAAC,CAAC,CAAC,EACnB,gBAAM,IAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAC7C,CAAC;SAEF,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KACL,gCAAC;AAAD,EAAC,CAvSuD,+CAAqB,GAuS5E;AAvSqB,0BAAyB;KAJ9C,gBAAS,CAAC;SACP,QAAQ,EAAE,aAAa;SACvB,QAAQ,EAAE,EAAE;MACf,CAAC;;IACoB,yBAAyB,CAuS9C;AAvSqB,+DAAyB;;;;;;;;;;;;;;;;;;;AC5B/C,qCAA8D;AAC9D,0DAAwE;AAOxE;;IAEG;AAKH,KAAsB,qBAAqB;KAAS,yCAAsB;KAJ1E;SAAA,qEAmCC;SA9BG,gDAAgD;SAChD,wEAAwE;SAC9D,iBAAW,GAAY,IAAI,CAAC;;KA4B1C,CAAC;KA1BG;;;;;QAKG;KACI,yDAAyB,GAAhC,UACI,UAAsB,EACtB,QAAkB,EAClB,QAAqB;SAErB,iBAAM,0BAA0B,YAC5B,UAAU,EACV,QAAQ,EACR,QAAQ,CACX,CAAC;KACN,CAAC;KAED;;;QAGG;KACO,8CAAc,GAAxB,UAAyB,UAAmB;SAExC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;KAClC,CAAC;KACL,4BAAC;AAAD,EAAC,CA/BmD,iDAAsB,GA+BzE;AA/BqB,sBAAqB;KAJ1C,gBAAS,CAAC;SACP,QAAQ,EAAE,SAAS;SACnB,QAAQ,EAAE,EAAE;MACf,CAAC;IACoB,qBAAqB,CA+B1C;AA/BqB,uDAAqB;;;;;;;;;;;;;;;;;ACf3C,qCAA+C;AAI/C,aAAY;AAqBZ,KAAa,qBAAqB;KAAlC;KAKA,CAAC;KAAD,4BAAC;AAAD,EAAC;AAHY;KAAR,YAAK,EAAE;;qDAAY;AACX;KAAR,YAAK,EAAE;;0DAAoB;AACnB;KAAR,YAAK,EAAE;;+DAA4D;AAJ3D,sBAAqB;KApBjC,gBAAS,CAAC;SACP,QAAQ,EAAE,iBAAiB;SAC3B,QAAQ,EAAE,4mCAgBT;MACJ,CAAC;IACW,qBAAqB,CAKjC;AALY,uDAAqB;;;;;;;;;;;;;;;;;;;;ACzBlC,qCAAuD;AACvD,0DAAkE;AAGlE,aAAY;AA+BZ,KAAa,mCAAmC;KAS5C,6CACqC,YAAiB;SAAjB,iBAAY,GAAZ,YAAY,CAAK;KACnD,CAAC;KAEJ;;QAEG;KACO,+DAAiB,GAA3B;SAEI,IAAI,CAAC,aAAa,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;KACpD,CAAC;KAED;;;QAGG;KACO,6DAAe,GAAzB,UAA0B,MAAM;SAE5B,IAAI,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;SACrD,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;KAC/B,CAAC;KAED;;;QAGG;KACO,oDAAM,GAAhB,UAAiB,MAAM;SAEnB,MAAM,CAAC,cAAc,EAAE,CAAC;SAExB,IAAI,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;SACrD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;KAChC,CAAC;KAED;;QAEG;KACH,sDAAQ,GAAR;SAEI,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAChF,IAAI,CAAC,iBAAiB,EAAE,CAAC;KAC7B,CAAC;KACL,0CAAC;AAAD,EAAC;AAjDY;KAAR,YAAK,EAAE;;yEAAkB;AACjB;KAAR,YAAK,EAAE;;wEAAoB;AACnB;KAAR,YAAK,EAAE;+BAAkB,gDAAqB;6EAAC;AAJvC,oCAAmC;KA9B/C,gBAAS,CAAC;SACP,QAAQ,EAAE,oBAAoB;SAC9B,QAAQ,EAAE,omCA0BT;MACJ,CAAC;KAWO,wBAAM,CAAC,aAAa,CAAC;;IAVjB,mCAAmC,CAmD/C;AAnDY,mFAAmC;;;;;;;;;;;;;;ACnChD,qCAAuC;AACvC,wCAA6C;AAC7C,uCAAgE;AAChE,8DAAqI;AACrI,+CAA+F;AAC/F,iDAAqG;AACrG,gDAA+C;AAiB/C,KAAa,mBAAmB;KAAhC;KAAkC,CAAC;KAAD,0BAAC;AAAD,EAAC;AAAtB,oBAAmB;KAd/B,eAAQ,CAAC;SACN,OAAO,EAAE;aACL,qBAAY;aACZ,mBAAW;aACX,2BAAmB;aACnB,wDAAyB;aACzB,4BAAY;aACZ,gCAAc;UACjB;SACD,YAAY,EAAE;aACV,8BAAa;UAChB;SACD,OAAO,EAAE,CAAC,8BAAa,CAAC;MAC3B,CAAC;IACW,mBAAmB,CAAG;AAAtB,mDAAmB;;;;;;;;;;;;;;ACvBhC,qCAAuC;AACvC,wCAA6C;AAC7C,uCAA2C;AAC3C,oEAAoF;AACpF,oDAAgE;AAChE,qEAAsF;AACtF,kEAAgF;AAChF,kEAAgF;AAoBhF,KAAa,yBAAyB;KAAtC;KAAwC,CAAC;KAAD,gCAAC;AAAD,EAAC;AAA5B,0BAAyB;KAjBrC,eAAQ,CAAC;SACN,OAAO,EAAE,CAAC,qBAAY,EAAE,mBAAW,CAAC;SACpC,YAAY,EAAE;aACV,mEAA8B;aAC9B,+CAA0B;aAC1B,qEAA+B;aAC/B,+DAA4B;aAC5B,+DAA4B;UAC/B;SACD,OAAO,EAAE;aACL,mEAA8B;aAC9B,+CAA0B;aAC1B,qEAA+B;aAC/B,+DAA4B;aAC5B,+DAA4B;UAC/B;MACJ,CAAC;IACW,yBAAyB,CAAG;AAA5B,+DAAyB;;;;;;;;;;;;;;;;;;;;AC3BtC,qCAA2F;AAC3F,8CAA4D;AAC5D,+CAA6D;AAC7D,8CAA+C;AAC/C,8CAA8F;AAC9F,oDAA4E;AAmE5E,KAAa,8BAA8B;KAuBvC,wCACc,YAAyB,EACzB,aAA2B,EACJ,YAAiB,EACxC,YAAyB,EACzB,SAAmB,EACc,sBAA2B,EACnC,cAAmB;SAP1D,iBAYC;SAXa,iBAAY,GAAZ,YAAY,CAAa;SACzB,kBAAa,GAAb,aAAa,CAAc;SACJ,iBAAY,GAAZ,YAAY,CAAK;SACxC,iBAAY,GAAZ,YAAY,CAAa;SACzB,cAAS,GAAT,SAAS,CAAU;SACc,2BAAsB,GAAtB,sBAAsB,CAAK;SACnC,mBAAc,GAAd,cAAc,CAAK;SApBhD,cAAS,GAAY,IAAI,CAAC;SAC1B,wBAAmB,GAAgC,EAAC,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAC,CAAC;SAGzE,aAAQ,GAAU,EAAE,CAAC;SACrB,YAAO,GAAqC,EAAC,IAAI,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC;SAMvE,0BAAqB,GAAQ,IAAI,CAAC;SAWxC,mCAAmC;SACnC,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC,YAAY,CAAC,wBAAwB,EAAE;cAC1E,SAAS,CAAC,gBAAM,IAAI,YAAI,CAAC,KAAK,EAAE,EAAZ,CAAY,CAAC,CAAC;KAC3C,CAAC;KAED;;;QAGG;KACH,8CAAK,GAAL;SAEI,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC;SAE7C,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAChC,eAAe,GAAG,EAAE,CAAC;SAEzB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;aACR,eAAe,GAAG,CAAC,CAAC,IAAI,CAAC,YAAY;oBAC9B,IAAI,CAAC,YAAY,CAAC,mBAAmB,EAAE;oBACvC,IAAI,CAAC,YAAY,CAAC,mBAAmB,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;mBACxD,IAAI,CAAC,YAAY,CAAC,mBAAmB,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC;mBAC1D,KAAK,CACd,CAAC;SACN,CAAC;SAED,IAAI,CAAC,mBAAmB,GAAG,EAAC,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,eAAe,EAAC,CAAC;SAC/D,IAAI,CAAC,QAAQ,EAAE,CAAC;SAEhB,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;QAGG;KACH,qDAAY,GAAZ;SAEI,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,wBAAwB,CAAC,eAAe,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;SACjF,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;SAEpC,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;QAGG;KACO,wDAAe,GAAzB,UAA0B,MAAM;SAE5B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;KAC1B,CAAC;KAED;;;QAGG;KACO,qDAAY,GAAtB,UAAuB,MAAM;SAEzB,MAAM,CAAC,cAAc,EAAE,CAAC;SACxB,MAAM,CAAC,eAAe,EAAE,CAAC;SAEzB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;SAChC,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;SACpC,IAAI,CAAC,QAAQ,EAAE,CAAC;SAChB,IAAI,CAAC,cAAc,EAAE,CAAC;KAC1B,CAAC;KAED;;;QAGG;KACO,mDAAU,GAApB,UAAqB,MAAM;SACvB,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;SAExC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;gBACzC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,sCAAsC;SAClF,CAAC,CAAC,CAAC;aACC,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,GAAG,CAAC;qBACtC,OAAO,EAAE,MAAM;qBACf,MAAM,EAAE,QAAQ;qBAChB,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI;kBAC7B,CAAC,CAAC;aACH,IAAI,CAAC,wBAAwB,CAAC,OAAO,EAAE,CAAC;aACxC,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;SAC9C,CAAC;KACL,CAAC;KAED;;;QAGG;KACO,uDAAc,GAAxB,UAAyB,MAAM;SAE3B,MAAM,CAAC,cAAc,EAAE,CAAC;SACxB,MAAM,CAAC,eAAe,EAAE,CAAC;SAEzB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;aACpB,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;SACrC,CAAC;SAAC,IAAI,CAAC,CAAC;aACJ,IAAI,CAAC,wBAAwB,CAAC,OAAO,EAAE,CAAC;SAC5C,CAAC;KACL,CAAC;KAED;;;QAGG;KACO,sDAAa,GAAvB,UAAwB,MAAM;SAE1B,MAAM,CAAC,cAAc,EAAE,CAAC;SAExB,IAAI,OAAO,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EAC1B,WAAW,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAExC,EAAE,CAAC,CAAC,OAAO,WAAW,IAAI,WAAW,CAAC,CAAC,CAAC;aACpC,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;aAExC,EAAE,CAAC,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;iBACvD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;iBACxC,IAAI,CAAC,mBAAmB,GAAG,EAAC,EAAE,EAAE,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,EAAC,CAAC;iBAChE,IAAI,CAAC,QAAQ,EAAE,CAAC;iBAChB,IAAI,CAAC,cAAc,EAAE,CAAC;aAC1B,CAAC;SACL,CAAC;KACL,CAAC;KAED;;;QAGG;KACO,uDAAc,GAAxB,UAAyB,MAAM;SAC3B,MAAM,CAAC,cAAc,EAAE,CAAC;SACxB,MAAM,CAAC,eAAe,EAAE,CAAC;SAEzB,IAAI,CAAC,wBAAwB,CAAC,OAAO,EAAE,CAAC;KAC5C,CAAC;KAED;;;QAGG;KACO,sDAAa,GAAvB,UAAwB,MAAkB;SAAlB,sCAAkB;SAEtC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;aAAC,MAAM,CAAC,cAAc,EAAE,CAAC;SAAC,CAAC;SAExC,MAAM,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;aACxB,KAAK,MAAM;iBACP,IAAI,CAAC,YAAY,CAAC,gBAAgB,EAAE,CAAC,CAAC,4BAA4B;iBAClE,KAAK,CAAC;aACV,KAAK,MAAM,CAAC;aACZ,KAAK,KAAK;iBACN,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;iBAClC,KAAK,CAAC;SACd,CAAC;KACL,CAAC;KAED;;;;QAIG;KACO,kDAAS,GAAnB,UAAoB,SAA2B;SAA/C,iBAyBC;SAzBmB,wCAAY,+BAAU,CAAC,IAAI;SAE3C,IAAI,IAAI,GAAG,IAAI,CAAC;SAEhB,6CAA6C;SAC7C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;aAC3B,kBAAkB;aAClB,IAAI,MAAM,GAAG,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAC,CAAC;aAC5C,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;aACjD,IAAI,CAAC,sBAAsB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAC5C,cAAI;iBACA,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;iBAC1B,MAAM,CAAC,KAAI,CAAC;aAChB,CAAC,EACD,gBAAM,IAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,KAAI,CAAC,CAAC,CAAC,CAClD,CAAC;SACN,CAAC;SAAC,IAAI,CAAC,CAAC;aACJ,2CAA2C;aAC3C,IAAI,CAAC,sBAAsB,CAAC,SAAS,EAAE,CAAC,IAAI,CACxC,cAAI,IAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,KAAI,CAAC,CAAC,CAAC,EACnD,gBAAM,IAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,KAAI,CAAC,CAAC,CAAC,CAClD,CAAC;SACN,CAAC;SAED,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;;QAIG;KACO,kDAAS,GAAnB,UAAoB,SAA2B;SAA3B,wCAAY,+BAAU,CAAC,IAAI;SAE3C,SAAS,GAAG,CAAC,+BAAU,CAAC,SAAS,CAAC,IAAI,+BAAU,CAAC,IAAI,CAAC,CAAC;SACvD,IAAI,KAAK,GAAU,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;SAE/E,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,CACrD,cAAI,IAAM,MAAM,CAAC,CAAC,CAAC,EACnB,gBAAM,IAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAC7C,CAAC;SAEF,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;QAGG;KACO,uDAAc,GAAxB;SAEI,MAAM,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;aAC7B,KAAK,MAAM;iBACP,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;qBAC3B,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC;iBAC/B,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;iBAC9B,CAAC;iBACD,KAAK,CAAC;aACV,KAAK,MAAM;iBACP,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;iBAC3C,KAAK,CAAC;aACV;iBACI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;SACjC,CAAC;SAED,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;QAGG;KACI,iDAAQ,GAAf;SAEI,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aAC7D,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;SACpD,CAAC;SAAC,IAAI,CAAC,CAAC;aACJ,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;SACpC,CAAC;SAED,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;QAGG;KACO,mDAAU,GAApB;SACI,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;KACzD,CAAC;KAED;;QAEG;KACH,iDAAQ,GAAR;SAEI,oBAAoB;SACpB,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC;SACnE,IAAI,CAAC,YAAY,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,CAAC;SACjH,IAAI,CAAC,KAAK,EAAE,CAAC;SACb,IAAI,CAAC,cAAc,EAAE,CAAC;SAEtB,+CAA+C;SAC/C,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC;aAC/B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC;aACnD,IAAI,CAAC,IAAI,EAAE,CAAC;aACZ,MAAM,CAAC;SACX,CAAC;SAED,iCAAiC;SACjC,IAAI,IAAI,GAAG,IAAI,CAAC;SAChB,IAAI,CAAC,YAAY,CAAC,IAAI,CAClB,IAAI,CAAC,SAAS,CAAC,OAAO,EACtB,IAAI,CACP,CAAC,IAAI,CACF,cAAI;aACA,yFAAyF;aACzF,IAAI,mBAAmB,GAAG,IAAI,CAAC,cAAc,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;aAC3E,mBAAmB,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;aAElC,qBAAqB;aACrB,IAAI,iBAAiB,GAAG,yBAAkB,CAAC,OAAO,CAAC;iBAC/C,EAAC,OAAO,EAAE,oBAAoB,EAAE,QAAQ,EAAE,0BAAW,EAAC;iBACtD,EAAC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,0BAAW,EAAC;iBAC/C,EAAC,OAAO,EAAE,qBAAqB,EAAE,QAAQ,EAAE,mBAAmB,EAAC;iBAC/D,EAAC,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAC;cAChF,CAAC,CAAC;aACH,IAAI,CAAC,cAAc,GAAG,yBAAkB,CAAC,qBAAqB,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;aAClG,wEAAwE;aACxE,IAAI,CAAC,SAAS,CAAC,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC;aAEnD,IAAI,CAAC,IAAI,EAAE,CAAC;aAEZ,gCAAgC;aAChC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC;iBAClC,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAClC,SAAS,EACT,CAAC,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,CACxF,CAAC;aACN,CAAC;SACL,CAAC,EACD,gBAAM,IAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAC7C,CAAC;KACN,CAAC;KAED;;;QAGG;KACO,6CAAI,GAAd;SAAA,iBASC;SAPG,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;SACrE,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;SAC9E,IAAI,CAAC,iCAAiC,GAAG,IAAI,CAAC,wBAAwB,CAAC,yBAAyB,EAAE;cAC7F,SAAS,CAAC,gBAAM,IAAI,YAAI,CAAC,YAAY,EAAE,EAAnB,CAAmB,CAAC,CAAC;SAC9C,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,wBAAwB,CAAC,kBAAkB,EAAE,CAAC,CAAC,oBAAoB;SAErG,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;QAEG;KACH,oDAAW,GAAX;SAEI,IAAI,CAAC,2BAA2B,CAAC,WAAW,EAAE,CAAC;SAC/C,IAAI,CAAC,iCAAiC,CAAC,WAAW,EAAE,CAAC;KACzD,CAAC;KACL,qCAAC;AAAD,EAAC;AAzWY;KAAR,YAAK,EAAE;;8DAAe;AACd;KAAR,YAAK,EAAE;;sEAAwB;AAFvB,+BAA8B;KA9C1C,gBAAS,CAAC;SACP,QAAQ,EAAE,iBAAiB;SAC3B,QAAQ,EAAE,8lEAuCT;SACD,IAAI,EAAE;aACF,kBAAkB,EAAE,yBAAyB;UAChD;MACJ,CAAC;KA2BO,wBAAM,CAAC,aAAa,CAAC;KAGrB,wBAAM,CAAC,uBAAuB,CAAC;KAC/B,wBAAM,CAAC,eAAe,CAAC;sCANA,0BAAW;SACV,4BAAY,UAEb,0BAAW;SACd,eAAQ;IA5BxB,8BAA8B,CA0W1C;AA1WY,yEAA8B;;;;;;;;;;;;;;;;;ACxE3C,qCAA+C;AAC/C,8CAA8F;AAE9F,aAAY;AAkBZ,KAAa,0BAA0B;KAKnC,oCACc,YAAyB;SAAzB,iBAAY,GAAZ,YAAY,CAAa;SAH7B,YAAO,GAAG,EAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAC;KAIhD,CAAC;KAEJ;;;QAGG;KACO,mDAAc,GAAxB,UAAyB,MAAkB;SAAlB,sCAAkB;SAEvC,IAAI,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;SAC9D,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC;SACrF,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,GAAG,IAAI,GAAG,CAAC,sCAAsC,CAAC,CAAC,CAAC;KAC5G,CAAC;KAED;;;QAGG;KACO,gDAAW,GAArB,UAAsB,MAAkB;SAAlB,sCAAkB;SAEpC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;aAChD,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC;aAC5B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;SAC9B,CAAC;KACL,CAAC;KACL,iCAAC;AAAD,EAAC;AA9BY;KAAR,YAAK,EAAE;;0DAAe;AADd,2BAA0B;KAjBtC,gBAAS,CAAC;SACP,QAAQ,EAAE,aAAa;SACvB,QAAQ,EAAE,inBAaT;MACJ,CAAC;sCAO8B,0BAAW;IAN9B,0BAA0B,CA+BtC;AA/BY,iEAA0B;;;;;;;;;;;;;;;;;ACrBvC,qCAAyE;AACzE,8CAA4C;AAE5C;;IAEG;AAIH,KAAa,+BAA+B;KAKxC,yCACc,WAAuB,EACvB,YAAyB;SAFvC,iBAOC;SANa,gBAAW,GAAX,WAAW,CAAY;SACvB,iBAAY,GAAZ,YAAY,CAAa;SAEnC,mCAAmC;SACnC,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC,YAAY,CAAC,wBAAwB,EAAE;cAC1E,SAAS,CAAC,gBAAM,IAAI,YAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAlB,CAAkB,CAAC,CAAC;KACjD,CAAC;KAIkC,sDAAY,GAAZ,UAAa,MAAM;SAClD,IAAI,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;SAEhC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;aACR,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;iBACR,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;qBAC5B,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS;iBAC7C,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC,MAAM;iBAC3C,CAAC;aACL,CAAC;SACL,CAAC;KACL,CAAC;KAED;;;;QAIG;KACH,+CAAK,GAAL,UAAM,MAAkB;SAAlB,sCAAkB;SAEpB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAE7D,kDAAkD;SAClD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;aACpB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;SAC1B,CAAC;SAED,0BAA0B;SAC1B,IAAI,SAAS,GAAQ,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACrE,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;aACvB,GAAG,CAAC,CAAW,UAAS,EAAT,uBAAS,EAAT,uBAAS,EAAT,IAAS;iBAAnB,IAAI,EAAE;iBACP,IAAI,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;iBAChB,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;cACxD;SACL,CAAC;SAED,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;QAEG;KACH,kDAAQ,GAAR;SAEI,IAAI,CAAC,KAAK,EAAE,CAAC;KACjB,CAAC;KAED;;QAEG;KACH,qDAAW,GAAX;SAEI,IAAI,CAAC,2BAA2B,CAAC,WAAW,EAAE,CAAC;KACnD,CAAC;KACL,sCAAC;AAAD,EAAC;AAzD2B;KAAvB,YAAK,CAAC,eAAe,CAAC;;+DAAe;AAEH;KAAlC,mBAAY,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC,CAAC;;;;oEAYjC;AA5BQ,gCAA+B;KAH3C,gBAAS,CAAC;SACP,QAAQ,EAAE,iBAAiB;MAC9B,CAAC;sCAO6B,iBAAU;SACT,0BAAW;IAP9B,+BAA+B,CAuE3C;AAvEY,2EAA+B;;;;;;;;;;;;;;;;;;;;ACT5C,qCAAuF;AACvF,8CAA4C;AAE5C;;IAEG;AAOH,KAAa,4BAA4B;KAOrC,sCACc,WAAuB,EACvB,YAAyB,EACF,YAAiB;SAHtD,iBAQC;SAPa,gBAAW,GAAX,WAAW,CAAY;SACvB,iBAAY,GAAZ,YAAY,CAAa;SACF,iBAAY,GAAZ,YAAY,CAAK;SAElD,mCAAmC;SACnC,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC,YAAY,CAAC,wBAAwB,EAAE;cAC1E,SAAS,CAAC,gBAAM,IAAI,YAAI,CAAC,KAAK,EAAE,EAAZ,CAAY,CAAC,CAAC;KAC3C,CAAC;KAIkC,mDAAY,GAAZ,UAAa,MAAM;SAClD,MAAM,CAAC,cAAc,EAAE,CAAC;SACxB,MAAM,CAAC,eAAe,EAAE,CAAC;SAEzB,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;SAExB,IAAI,OAAO,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EAC1B,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAElC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;aACR,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;aAClD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;SACtC,CAAC;KACL,CAAC;KAED;;;QAGG;KACH,4CAAK,GAAL;SAEI,IAAI,KAAK,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EACnD,eAAe,GAAG,EAAE,CAAC;SAEzB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;aACR,eAAe,GAAG,CAAC,CAAC,IAAI,CAAC,YAAY;oBAC9B,IAAI,CAAC,YAAY,CAAC,mBAAmB,EAAE;oBACvC,IAAI,CAAC,YAAY,CAAC,mBAAmB,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;mBACxD,IAAI,CAAC,YAAY,CAAC,mBAAmB,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC;mBAC1D,KAAK,CACd,CAAC;SACN,CAAC;SAED,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;SAEnC,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KAED;;;QAGG;KACO,sDAAe,GAAzB,UAA0B,MAAM;SAE5B,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;KAC1B,CAAC;KAED;;QAEG;KACH,+CAAQ,GAAR;SAEI,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;SACvE,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAEnE,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;SAEtB,IAAI,CAAC,YAAY,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,CAAC;SAEjH,IAAI,CAAC,KAAK,EAAE,CAAC;KACjB,CAAC;KAED;;QAEG;KACH,kDAAW,GAAX;SAEI,IAAI,CAAC,2BAA2B,CAAC,WAAW,EAAE,CAAC;KACnD,CAAC;KACL,mCAAC;AAAD,EAAC;AAvEwB;KAApB,YAAK,CAAC,YAAY,CAAC;;4DAAe;AAEA;KAAlC,mBAAY,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC,CAAC;;;;iEAajC;AAhCQ,6BAA4B;KANxC,gBAAS,CAAC;SACP,QAAQ,EAAE,cAAc;SACxB,IAAI,EAAE;aACF,kBAAkB,EAAE,yBAAyB;UAChD;MACJ,CAAC;KAWO,wBAAM,CAAC,aAAa,CAAC;sCAFC,iBAAU;SACT,0BAAW;IAT9B,4BAA4B,CAwFxC;AAxFY,qEAA4B;;;;;;;;;;;;;;;;;;;;ACZzC,qCAAyE;AACzE,8CAA8F;AAiB9F,KAAa,4BAA4B;KAWrC,sCACc,WAAuB,EACvB,YAAyB,EACF,YAAiB;SAHtD,iBAQC;SAPa,gBAAW,GAAX,WAAW,CAAY;SACvB,iBAAY,GAAZ,YAAY,CAAa;SACF,iBAAY,GAAZ,YAAY,CAAK;SANtD,8EAA8E;SACpE,kCAA6B,GAAY,KAAK,CAAC;SAOrD,mCAAmC;SACnC,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC,YAAY,CAAC,wBAAwB,EAAE;cAC1E,SAAS,CAAC,gBAAM,IAAI,YAAI,CAAC,KAAK,EAAE,EAAZ,CAAY,CAAC,CAAC;KAC3C,CAAC;KAED;;QAEG;KACO,4CAAK,GAAf;SAEI,IAAI,CAAC,cAAc,EAAE,CAAC;KAC1B,CAAC;KAED;;;QAGG;KACO,sDAAe,GAAzB,UAA0B,MAAM;SAE5B,gEAAgE;SAChE,0BAA0B;SAE1B,0CAA0C;SAC1C,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;aACzD,IAAI,UAAU,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;aAEzE,+BAA+B;aAC/B,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;iBAAC,MAAM,CAAC;aAAC,CAAC;aAE3B,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,0DAA0D;aACjF,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,+BAA+B;SAC1D,CAAC;SAAC,IAAI,CAAC,CAAC;aACJ,sDAAsD;aACtD,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;SACzB,CAAC;KACL,CAAC;KAED;;QAEG;KACO,qDAAc,GAAxB;SACI,cAAc;SACd,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;aAClF,IAAI,SAAS,GAAG,CAAC,CAAC,IAAI,CAAC,iBAAiB;oBACjC,CAAC,IAAI,CAAC,iBAAiB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;mBAC/D,CAAC,IAAI,CAAC,6BAA6B;uBAC/B,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC;uBACtD,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAC1D;mBACC,KAAK,CACd,CAAC;qCAEO,IAAI;iBACT,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;qBACnB,KAAK,OAAO;yBACR,EAAE,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;6BACjC,YAAY;6BACZ,OAAK,OAAO,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC;6BACpC,KAAK,CAAC;yBACV,CAAC;yBAED,kCAAkC;yBAClC,IAAI,YAAU,GAAG,CAAC,OAAK,YAAY,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;yBACvF,mDAAmD;yBACnD,OAAK,OAAO,CAAC,cAAc,CAAC,GAAG,UAAC,IAAS;6BACrC,IAAI,WAAW,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;6BAChE,GAAG,CAAC,CAAkB,UAAU,EAAV,2BAAU,EAAV,wBAAU,EAAV,IAAU;iCAA3B,IAAI,SAAS;iCACd,IAAI,QAAQ,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,EAC3C,MAAM,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;iCAC5C,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,QAAQ,CAAC,OAAO,EAAE,CAAC;wCAC1C,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,MAAM,CAAC,OAAO,EAAE,CACjD,CAAC,CAAC,CAAC;qCACC,MAAM,CAAC,KAAK,CAAC;iCACjB,CAAC;8BACJ;6BACD,MAAM,CAAC,IAAI,CAAC;yBAChB,CAAC,CAAC;yBACF,KAAK,CAAC;qBACV,KAAK,KAAK,CAAC;qBACX,KAAK,KAAK;yBACN,EAAE,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;6BACjC,YAAY;6BACZ,OAAK,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,IAAI,CAAC;6BAC3C,KAAK,CAAC;yBACV,CAAC;yBAED,OAAK,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,OAAK,YAAY,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;yBACnF,KAAK,CAAC;iBACd,CAAC;aACL,CAAC;;aArCD,GAAG,CAAC,CAAa,UAA0C,EAA1C,SAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,EAA1C,cAA0C,EAA1C,IAA0C;iBAAtD,IAAI,IAAI;yBAAJ,IAAI;cAqCZ;SACL,CAAC;KACL,CAAC;KAED;;QAEG;KACH,+CAAQ,GAAR;SAEI,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAE1F,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC;gBACrD,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,kBAAkB,CAAC,CAAC;eACnD,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,kBAAkB,CAAC;eACrD,IAAI,CACb,CAAC;SAEF,4CAA4C;SAC5C,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;aAC5E,8CAA8C;aAC9C,IAAI,CAAC,6BAA6B,GAAG,IAAI,CAAC;aAC1C,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,oCAAoC;SACtG,CAAC;SAED,IAAI,CAAC,KAAK,EAAE,CAAC;KACjB,CAAC;KAED;;QAEG;KACH,kDAAW,GAAX;SAEI,IAAI,CAAC,2BAA2B,CAAC,WAAW,EAAE,CAAC;KACnD,CAAC;KACL,mCAAC;AAAD,EAAC;AA1IwB;KAApB,YAAK,CAAC,YAAY,CAAC;;4DAAe;AACjB;KAAjB,YAAK,CAAC,SAAS,CAAC;;8DAAc;AAFtB,6BAA4B;KANxC,gBAAS,CAAC;SACP,QAAQ,EAAE,cAAc;SACxB,IAAI,EAAE;aACF,kBAAkB,EAAE,yBAAyB;UAChD;MACJ,CAAC;KAeO,wBAAM,CAAC,aAAa,CAAC;sCAFC,iBAAU;SACT,0BAAW;IAb9B,4BAA4B,CA2IxC;AA3IY,qEAA4B;;;;;;;;;;;;;;;;;;;;;;;;;AClBzC,qCAAkG;AAElG,iDAAoG;AACpG,wCAA2E;AAC3E,+CAA8F;AAC9F,8CAAkG;AAClG,oDAA0I;AAO1I,KAAa,aAAa;KAAS,iCAAgB;KAE/C,uBACI,gBAAkC,EAClC,QAAkB,EACE,QAAyB,EACtB,WAAgB,EACvC,cAA8B,EAC9B,YAA0B,EACR,MAAsB,EACxC,QAAkB,EACiB,cAAmB,EAC/C,WAAuB,EACpB,YAAyB;SAXvC,YAaI,kBACI,gBAAgB,EAChB,QAAQ,EACR,QAAQ,EACR,WAAW,EACX,cAAc,EACd,YAAY,EACZ,MAAM,EACN,QAAQ,CACX,SACJ;SAdsC,oBAAc,GAAd,cAAc,CAAK;SAC/C,iBAAW,GAAX,WAAW,CAAY;SACpB,kBAAY,GAAZ,YAAY,CAAa;;KAYvC,CAAC;KAED;;QAEG;KACH,uCAAe,GAAf;SAEI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACjC,CAAC;KACL,oBAAC;AAAD,EAAC,CAlCkC,qCAAgB,GAkClD;AAlCY,cAAa;KAJzB,gBAAS,CAAC;SACP,QAAQ,EAAE,UAAU;SACpB,WAAW,EAAE,eAAM,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,kCAAkC;MACjF,CAAC;KAMO,wBAAM,CAAC,UAAU,CAAC;KAClB,wBAAM,CAAC,aAAa,CAAC;KAGrB,wBAAM,CAAC,QAAQ,CAAC;KAEhB,wBAAM,CAAC,eAAe,CAAC;sCARN,uBAAgB;SACxB,eAAQ,kBAGF,gCAAc;SAChB,4BAAY,UAEhB,eAAQ,UAEE,iBAAU;SACN,0BAAW;IAb9B,aAAa,CAkCzB;AAlCY,uCAAa","file":"main.js","sourcesContent":["import {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\nimport {MainModule} from './main.module';\n\nplatformBrowserDynamic().bootstrapModule(MainModule);\n\n\n// WEBPACK FOOTER //\n// ./src/AdminBundle/Resources/public/user-group-acl/detail/ts/main.ts","import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\n// This module doesn't use \"ReactiveFormsModule\", but it needs to import this class\n// to provide \"formBuilder\" when inject dependencies in child modules (like form)\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {SearchModule} from '../../../../../../AppBundle/Resources/public/ts/search/search.module';\nimport {ExpanderModule} from '../../../../../../AppBundle/Resources/public/ts/expander/expander.module';\nimport {PostService} from '../../../../../../AppBundle/Resources/public/ts/post.service';\nimport {ModalService} from '../../../../../../AppBundle/Resources/public/modal/ts/modal.service';\nimport {FlashMessageService} from '../../../../../../AppBundle/Resources/public/ts/flash-message.service';\nimport {DynamicComponentLoaderService} from '../../../../../../AppBundle/Resources/public/ts/dynamic-component-loader.service';\nimport {DataService} from '../../../../../../AppBundle/Resources/public/ts/data-service/data.service';\nimport {NavManagerService} from '../../../../../../AppBundle/Resources/public/ts/nav-manager/nav-manager.service';\nimport {Helper} from '../../../../../../AppBundle/Resources/public/ts/helper';\nimport {MainComponent} from './main.component';\n\n\n@NgModule({\n    imports: [\n        BrowserModule,\n        FormsModule,\n        ReactiveFormsModule,\n        SearchModule,\n        ExpanderModule\n    ],\n    declarations: [\n        MainComponent\n    ],\n    providers: [\n        PostService,\n        ModalService,\n        FlashMessageService,\n        DynamicComponentLoaderService,\n        {provide: 'DataService', useClass: DataService},\n        NavManagerService,\n        {provide: 'HelperService', useValue: Helper}\n    ],\n    bootstrap: [MainComponent]\n})\nexport class MainModule {}\n\n\n// WEBPACK FOOTER //\n// ./src/AdminBundle/Resources/public/user-group-acl/detail/ts/main.module.ts","/**\n * @license Angular v2.1.2\n * (c) 2010-2016 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/operator/toPromise'), require('rxjs/Subject'), require('rxjs/Observable'), require('rxjs/observable/fromPromise')) :\n    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/operator/toPromise', 'rxjs/Subject', 'rxjs/Observable', 'rxjs/observable/fromPromise'], factory) :\n    (factory((global.ng = global.ng || {}, global.ng.forms = global.ng.forms || {}),global.ng.core,global.Rx.Observable.prototype,global.Rx,global.Rx,global.Rx.Observable));\n}(this, function (exports,_angular_core,rxjs_operator_toPromise,rxjs_Subject,rxjs_Observable,rxjs_observable_fromPromise) { 'use strict';\n\n    function isPresent(obj) {\n        return obj != null;\n    }\n    function isBlank(obj) {\n        return obj == null;\n    }\n    // JS has NaN !== NaN\n    function looseIdentical(a, b) {\n        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n    }\n    function isJsObject(o) {\n        return o !== null && (typeof o === 'function' || typeof o === 'object');\n    }\n    function isPrimitive(obj) {\n        return !isJsObject(obj);\n    }\n\n    /**\n     * Base class for control directives.\n     *\n     * Only used internally in the forms module.\n     *\n     * @stable\n     */\n    var AbstractControlDirective = (function () {\n        function AbstractControlDirective() {\n        }\n        Object.defineProperty(AbstractControlDirective.prototype, \"control\", {\n            get: function () { throw new Error('unimplemented'); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"value\", {\n            get: function () { return isPresent(this.control) ? this.control.value : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"valid\", {\n            get: function () { return isPresent(this.control) ? this.control.valid : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"invalid\", {\n            get: function () { return isPresent(this.control) ? this.control.invalid : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"pending\", {\n            get: function () { return isPresent(this.control) ? this.control.pending : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"errors\", {\n            get: function () {\n                return isPresent(this.control) ? this.control.errors : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"pristine\", {\n            get: function () { return isPresent(this.control) ? this.control.pristine : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"dirty\", {\n            get: function () { return isPresent(this.control) ? this.control.dirty : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"touched\", {\n            get: function () { return isPresent(this.control) ? this.control.touched : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"untouched\", {\n            get: function () { return isPresent(this.control) ? this.control.untouched : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"disabled\", {\n            get: function () { return isPresent(this.control) ? this.control.disabled : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"enabled\", {\n            get: function () { return isPresent(this.control) ? this.control.enabled : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"statusChanges\", {\n            get: function () {\n                return isPresent(this.control) ? this.control.statusChanges : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"valueChanges\", {\n            get: function () {\n                return isPresent(this.control) ? this.control.valueChanges : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"path\", {\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        AbstractControlDirective.prototype.reset = function (value) {\n            if (value === void 0) { value = undefined; }\n            if (isPresent(this.control))\n                this.control.reset(value);\n        };\n        return AbstractControlDirective;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$1 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * A directive that contains multiple {@link NgControl}s.\n     *\n     * Only used by the forms module.\n     *\n     * @stable\n     */\n    var ControlContainer = (function (_super) {\n        __extends$1(ControlContainer, _super);\n        function ControlContainer() {\n            _super.apply(this, arguments);\n        }\n        Object.defineProperty(ControlContainer.prototype, \"formDirective\", {\n            /**\n             * Get the form to which this container belongs.\n             */\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ControlContainer.prototype, \"path\", {\n            /**\n             * Get the path to this container.\n             */\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        return ControlContainer;\n    }(AbstractControlDirective));\n\n    // Safari doesn't implement MapIterator.next(), which is used is Traceur's polyfill of Array.from\n    // TODO(mlaval): remove the work around once we have a working polyfill of Array.from\n    var _arrayFromMap = (function () {\n        try {\n            if ((new Map()).values().next) {\n                return function createArrayFromMap(m, getValues) {\n                    return getValues ? Array.from(m.values()) : Array.from(m.keys());\n                };\n            }\n        }\n        catch (e) {\n        }\n        return function createArrayFromMapWithForeach(m, getValues) {\n            var res = new Array(m.size), i = 0;\n            m.forEach(function (v, k) {\n                res[i] = getValues ? v : k;\n                i++;\n            });\n            return res;\n        };\n    })();\n    var MapWrapper = (function () {\n        function MapWrapper() {\n        }\n        MapWrapper.createFromStringMap = function (stringMap) {\n            var result = new Map();\n            for (var prop in stringMap) {\n                result.set(prop, stringMap[prop]);\n            }\n            return result;\n        };\n        MapWrapper.keys = function (m) { return _arrayFromMap(m, false); };\n        MapWrapper.values = function (m) { return _arrayFromMap(m, true); };\n        return MapWrapper;\n    }());\n    /**\n     * Wraps Javascript Objects\n     */\n    var StringMapWrapper = (function () {\n        function StringMapWrapper() {\n        }\n        StringMapWrapper.merge = function (m1, m2) {\n            var m = {};\n            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {\n                var k = _a[_i];\n                m[k] = m1[k];\n            }\n            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {\n                var k = _c[_b];\n                m[k] = m2[k];\n            }\n            return m;\n        };\n        StringMapWrapper.equals = function (m1, m2) {\n            var k1 = Object.keys(m1);\n            var k2 = Object.keys(m2);\n            if (k1.length != k2.length) {\n                return false;\n            }\n            for (var i = 0; i < k1.length; i++) {\n                var key = k1[i];\n                if (m1[key] !== m2[key]) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        return StringMapWrapper;\n    }());\n    var ListWrapper = (function () {\n        function ListWrapper() {\n        }\n        ListWrapper.removeAll = function (list, items) {\n            for (var i = 0; i < items.length; ++i) {\n                var index = list.indexOf(items[i]);\n                list.splice(index, 1);\n            }\n        };\n        ListWrapper.remove = function (list, el) {\n            var index = list.indexOf(el);\n            if (index > -1) {\n                list.splice(index, 1);\n                return true;\n            }\n            return false;\n        };\n        ListWrapper.equals = function (a, b) {\n            if (a.length != b.length)\n                return false;\n            for (var i = 0; i < a.length; ++i) {\n                if (a[i] !== b[i])\n                    return false;\n            }\n            return true;\n        };\n        ListWrapper.maximum = function (list, predicate) {\n            if (list.length == 0) {\n                return null;\n            }\n            var solution = null;\n            var maxValue = -Infinity;\n            for (var index = 0; index < list.length; index++) {\n                var candidate = list[index];\n                if (candidate == null) {\n                    continue;\n                }\n                var candidateValue = predicate(candidate);\n                if (candidateValue > maxValue) {\n                    solution = candidate;\n                    maxValue = candidateValue;\n                }\n            }\n            return solution;\n        };\n        ListWrapper.flatten = function (list) {\n            var target = [];\n            _flattenArray(list, target);\n            return target;\n        };\n        return ListWrapper;\n    }());\n    function _flattenArray(source, target) {\n        if (isPresent(source)) {\n            for (var i = 0; i < source.length; i++) {\n                var item = source[i];\n                if (Array.isArray(item)) {\n                    _flattenArray(item, target);\n                }\n                else {\n                    target.push(item);\n                }\n            }\n        }\n        return target;\n    }\n\n    var isPromise = _angular_core.__core_private__.isPromise;\n\n    function isEmptyInputValue(value) {\n        return value == null || typeof value === 'string' && value.length === 0;\n    }\n    /**\n     * Providers for validators to be used for {@link FormControl}s in a form.\n     *\n     * Provide this using `multi: true` to add validators.\n     *\n     * ### Example\n     *\n     * {@example core/forms/ts/ng_validators/ng_validators.ts region='ng_validators'}\n     * @stable\n     */\n    var NG_VALIDATORS = new _angular_core.OpaqueToken('NgValidators');\n    /**\n     * Providers for asynchronous validators to be used for {@link FormControl}s\n     * in a form.\n     *\n     * Provide this using `multi: true` to add validators.\n     *\n     * See {@link NG_VALIDATORS} for more details.\n     *\n     * @stable\n     */\n    var NG_ASYNC_VALIDATORS = new _angular_core.OpaqueToken('NgAsyncValidators');\n    /**\n     * Provides a set of validators used by form controls.\n     *\n     * A validator is a function that processes a {@link FormControl} or collection of\n     * controls and returns a map of errors. A null map means that validation has passed.\n     *\n     * ### Example\n     *\n     * ```typescript\n     * var loginControl = new FormControl(\"\", Validators.required)\n     * ```\n     *\n     * @stable\n     */\n    var Validators = (function () {\n        function Validators() {\n        }\n        /**\n         * Validator that requires controls to have a non-empty value.\n         */\n        Validators.required = function (control) {\n            return isEmptyInputValue(control.value) ? { 'required': true } : null;\n        };\n        /**\n         * Validator that requires controls to have a value of a minimum length.\n         */\n        Validators.minLength = function (minLength) {\n            return function (control) {\n                if (isEmptyInputValue(control.value)) {\n                    return null; // don't validate empty values to allow optional controls\n                }\n                var length = typeof control.value === 'string' ? control.value.length : 0;\n                return length < minLength ?\n                    { 'minlength': { 'requiredLength': minLength, 'actualLength': length } } :\n                    null;\n            };\n        };\n        /**\n         * Validator that requires controls to have a value of a maximum length.\n         */\n        Validators.maxLength = function (maxLength) {\n            return function (control) {\n                var length = typeof control.value === 'string' ? control.value.length : 0;\n                return length > maxLength ?\n                    { 'maxlength': { 'requiredLength': maxLength, 'actualLength': length } } :\n                    null;\n            };\n        };\n        /**\n         * Validator that requires a control to match a regex to its value.\n         */\n        Validators.pattern = function (pattern) {\n            return function (control) {\n                if (isEmptyInputValue(control.value)) {\n                    return null; // don't validate empty values to allow optional controls\n                }\n                var regex = new RegExp(\"^\" + pattern + \"$\");\n                var value = control.value;\n                return regex.test(value) ?\n                    null :\n                    { 'pattern': { 'requiredPattern': \"^\" + pattern + \"$\", 'actualValue': value } };\n            };\n        };\n        /**\n         * No-op validator.\n         */\n        Validators.nullValidator = function (c) { return null; };\n        /**\n         * Compose multiple validators into a single function that returns the union\n         * of the individual error maps.\n         */\n        Validators.compose = function (validators) {\n            if (!validators)\n                return null;\n            var presentValidators = validators.filter(isPresent);\n            if (presentValidators.length == 0)\n                return null;\n            return function (control) {\n                return _mergeErrors(_executeValidators(control, presentValidators));\n            };\n        };\n        Validators.composeAsync = function (validators) {\n            if (!validators)\n                return null;\n            var presentValidators = validators.filter(isPresent);\n            if (presentValidators.length == 0)\n                return null;\n            return function (control) {\n                var promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise);\n                return Promise.all(promises).then(_mergeErrors);\n            };\n        };\n        return Validators;\n    }());\n    function _convertToPromise(obj) {\n        return isPromise(obj) ? obj : rxjs_operator_toPromise.toPromise.call(obj);\n    }\n    function _executeValidators(control, validators) {\n        return validators.map(function (v) { return v(control); });\n    }\n    function _executeAsyncValidators(control, validators) {\n        return validators.map(function (v) { return v(control); });\n    }\n    function _mergeErrors(arrayOfErrors) {\n        var res = arrayOfErrors.reduce(function (res, errors) {\n            return isPresent(errors) ? StringMapWrapper.merge(res, errors) : res;\n        }, {});\n        return Object.keys(res).length === 0 ? null : res;\n    }\n\n    /**\n     * Used to provide a {@link ControlValueAccessor} for form controls.\n     *\n     * See {@link DefaultValueAccessor} for how to implement one.\n     * @stable\n     */\n    var NG_VALUE_ACCESSOR = new _angular_core.OpaqueToken('NgValueAccessor');\n\n    var CHECKBOX_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return CheckboxControlValueAccessor; }),\n        multi: true\n    };\n    /**\n     * The accessor for writing a value and listening to changes on a checkbox input element.\n     *\n     *  ### Example\n     *  ```\n     *  <input type=\"checkbox\" name=\"rememberLogin\" ngModel>\n     *  ```\n     *\n     *  @stable\n     */\n    var CheckboxControlValueAccessor = (function () {\n        function CheckboxControlValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        CheckboxControlValueAccessor.prototype.writeValue = function (value) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);\n        };\n        CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n        CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        CheckboxControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n                        host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },\n                        providers: [CHECKBOX_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        CheckboxControlValueAccessor.ctorParameters = [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ];\n        return CheckboxControlValueAccessor;\n    }());\n\n    var DEFAULT_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return DefaultValueAccessor; }),\n        multi: true\n    };\n    /**\n     * The default accessor for writing a value and listening to changes that is used by the\n     * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n     *\n     *  ### Example\n     *  ```\n     *  <input type=\"text\" name=\"searchQuery\" ngModel>\n     *  ```\n     *\n     *  @stable\n     */\n    var DefaultValueAccessor = (function () {\n        function DefaultValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        DefaultValueAccessor.prototype.writeValue = function (value) {\n            var normalizedValue = isBlank(value) ? '' : value;\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n        };\n        DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n        DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        DefaultValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n                        // TODO: vsavkin replace the above selector with the one below it once\n                        // https://github.com/angular/angular/issues/3011 is implemented\n                        // selector: '[ngControl],[ngModel],[ngFormControl]',\n                        host: { '(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                        providers: [DEFAULT_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        DefaultValueAccessor.ctorParameters = [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ];\n        return DefaultValueAccessor;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function normalizeValidator(validator) {\n        if (validator.validate !== undefined) {\n            return function (c) { return validator.validate(c); };\n        }\n        else {\n            return validator;\n        }\n    }\n    function normalizeAsyncValidator(validator) {\n        if (validator.validate !== undefined) {\n            return function (c) { return validator.validate(c); };\n        }\n        else {\n            return validator;\n        }\n    }\n\n    var NUMBER_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return NumberValueAccessor; }),\n        multi: true\n    };\n    /**\n     * The accessor for writing a number value and listening to changes that is used by the\n     * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n     *\n     *  ### Example\n     *  ```\n     *  <input type=\"number\" [(ngModel)]=\"age\">\n     *  ```\n     */\n    var NumberValueAccessor = (function () {\n        function NumberValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        NumberValueAccessor.prototype.writeValue = function (value) {\n            // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n            var normalizedValue = isBlank(value) ? '' : value;\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n        };\n        NumberValueAccessor.prototype.registerOnChange = function (fn) {\n            this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };\n        };\n        NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        NumberValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n                        host: {\n                            '(change)': 'onChange($event.target.value)',\n                            '(input)': 'onChange($event.target.value)',\n                            '(blur)': 'onTouched()'\n                        },\n                        providers: [NUMBER_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        NumberValueAccessor.ctorParameters = [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ];\n        return NumberValueAccessor;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$2 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    function unimplemented() {\n        throw new Error('unimplemented');\n    }\n    /**\n     * A base class that all control directive extend.\n     * It binds a {@link FormControl} object to a DOM element.\n     *\n     * Used internally by Angular forms.\n     *\n     * @stable\n     */\n    var NgControl = (function (_super) {\n        __extends$2(NgControl, _super);\n        function NgControl() {\n            _super.apply(this, arguments);\n            /** @internal */\n            this._parent = null;\n            this.name = null;\n            this.valueAccessor = null;\n            /** @internal */\n            this._rawValidators = [];\n            /** @internal */\n            this._rawAsyncValidators = [];\n        }\n        Object.defineProperty(NgControl.prototype, \"validator\", {\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgControl.prototype, \"asyncValidator\", {\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        return NgControl;\n    }(AbstractControlDirective));\n\n    var RADIO_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return RadioControlValueAccessor; }),\n        multi: true\n    };\n    /**\n     * Internal class used by Angular to uncheck radio buttons with the matching name.\n     */\n    var RadioControlRegistry = (function () {\n        function RadioControlRegistry() {\n            this._accessors = [];\n        }\n        RadioControlRegistry.prototype.add = function (control, accessor) {\n            this._accessors.push([control, accessor]);\n        };\n        RadioControlRegistry.prototype.remove = function (accessor) {\n            var indexToRemove = -1;\n            for (var i = 0; i < this._accessors.length; ++i) {\n                if (this._accessors[i][1] === accessor) {\n                    indexToRemove = i;\n                }\n            }\n            this._accessors.splice(indexToRemove, 1);\n        };\n        RadioControlRegistry.prototype.select = function (accessor) {\n            var _this = this;\n            this._accessors.forEach(function (c) {\n                if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {\n                    c[1].fireUncheck(accessor.value);\n                }\n            });\n        };\n        RadioControlRegistry.prototype._isSameGroup = function (controlPair, accessor) {\n            if (!controlPair[0].control)\n                return false;\n            return controlPair[0]._parent === accessor._control._parent &&\n                controlPair[1].name === accessor.name;\n        };\n        RadioControlRegistry.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        RadioControlRegistry.ctorParameters = [];\n        return RadioControlRegistry;\n    }());\n    /**\n     * @whatItDoes  Writes radio control values and listens to radio control changes.\n     *\n     * Used by {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName}\n     * to keep the view synced with the {@link FormControl} model.\n     *\n     * @howToUse\n     *\n     * If you have imported the {@link FormsModule} or the {@link ReactiveFormsModule}, this\n     * value accessor will be active on any radio control that has a form directive. You do\n     * **not** need to add a special selector to activate it.\n     *\n     * ### How to use radio buttons with form directives\n     *\n     * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons\n     * in the same group have the same `name` attribute.  Radio buttons with different `name`\n     * attributes do not affect each other.\n     *\n     * {@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}\n     *\n     * When using radio buttons in a reactive form, radio buttons in the same group should have the\n     * same `formControlName`. You can also add a `name` attribute, but it's optional.\n     *\n     * {@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n     *\n     *  * **npm package**: `@angular/forms`\n     *\n     *  @stable\n     */\n    var RadioControlValueAccessor = (function () {\n        function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this._registry = _registry;\n            this._injector = _injector;\n            this.onChange = function () { };\n            this.onTouched = function () { };\n        }\n        RadioControlValueAccessor.prototype.ngOnInit = function () {\n            this._control = this._injector.get(NgControl);\n            this._checkName();\n            this._registry.add(this._control, this);\n        };\n        RadioControlValueAccessor.prototype.ngOnDestroy = function () { this._registry.remove(this); };\n        RadioControlValueAccessor.prototype.writeValue = function (value) {\n            this._state = value === this.value;\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);\n        };\n        RadioControlValueAccessor.prototype.registerOnChange = function (fn) {\n            var _this = this;\n            this._fn = fn;\n            this.onChange = function () {\n                fn(_this.value);\n                _this._registry.select(_this);\n            };\n        };\n        RadioControlValueAccessor.prototype.fireUncheck = function (value) { this.writeValue(value); };\n        RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        RadioControlValueAccessor.prototype._checkName = function () {\n            if (this.name && this.formControlName && this.name !== this.formControlName) {\n                this._throwNameError();\n            }\n            if (!this.name && this.formControlName)\n                this.name = this.formControlName;\n        };\n        RadioControlValueAccessor.prototype._throwNameError = function () {\n            throw new Error(\"\\n      If you define both a name and a formControlName attribute on your radio button, their values\\n      must match. Ex: <input type=\\\"radio\\\" formControlName=\\\"food\\\" name=\\\"food\\\">\\n    \");\n        };\n        RadioControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n                        host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\n                        providers: [RADIO_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        RadioControlValueAccessor.ctorParameters = [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n            { type: RadioControlRegistry, },\n            { type: _angular_core.Injector, },\n        ];\n        RadioControlValueAccessor.propDecorators = {\n            'name': [{ type: _angular_core.Input },],\n            'formControlName': [{ type: _angular_core.Input },],\n            'value': [{ type: _angular_core.Input },],\n        };\n        return RadioControlValueAccessor;\n    }());\n\n    var SELECT_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return SelectControlValueAccessor; }),\n        multi: true\n    };\n    function _buildValueString(id, value) {\n        if (isBlank(id))\n            return \"\" + value;\n        if (!isPrimitive(value))\n            value = 'Object';\n        return (id + \": \" + value).slice(0, 50);\n    }\n    function _extractId(valueString) {\n        return valueString.split(':')[0];\n    }\n    /**\n     * @whatItDoes Writes values and listens to changes on a select element.\n     *\n     * Used by {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName}\n     * to keep the view synced with the {@link FormControl} model.\n     *\n     * @howToUse\n     *\n     * If you have imported the {@link FormsModule} or the {@link ReactiveFormsModule}, this\n     * value accessor will be active on any select control that has a form directive. You do\n     * **not** need to add a special selector to activate it.\n     *\n     * ### How to use select controls with form directives\n     *\n     * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n     * attribute to the main `<select>` tag.\n     *\n     * If your option values are simple strings, you can bind to the normal `value` property\n     * on the option.  If your option values happen to be objects (and you'd like to save the\n     * selection in your form as an object), use `ngValue` instead:\n     *\n     * {@example forms/ts/selectControl/select_control_example.ts region='Component'}\n     *\n     * In reactive forms, you'll also want to add your form directive (`formControlName` or\n     * `formControl`) on the main `<select>` tag. Like in the former example, you have the\n     * choice of binding to the  `value` or `ngValue` property on the select's options.\n     *\n     * {@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n     *\n     * Note: We listen to the 'change' event because 'input' events aren't fired\n     * for selects in Firefox and IE:\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n     * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n     *\n     * * **npm package**: `@angular/forms`\n     *\n     * @stable\n     */\n    var SelectControlValueAccessor = (function () {\n        function SelectControlValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            /** @internal */\n            this._optionMap = new Map();\n            /** @internal */\n            this._idCounter = 0;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        SelectControlValueAccessor.prototype.writeValue = function (value) {\n            this.value = value;\n            var valueString = _buildValueString(this._getOptionId(value), value);\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);\n        };\n        SelectControlValueAccessor.prototype.registerOnChange = function (fn) {\n            var _this = this;\n            this.onChange = function (valueString) {\n                _this.value = valueString;\n                fn(_this._getOptionValue(valueString));\n            };\n        };\n        SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        /** @internal */\n        SelectControlValueAccessor.prototype._registerOption = function () { return (this._idCounter++).toString(); };\n        /** @internal */\n        SelectControlValueAccessor.prototype._getOptionId = function (value) {\n            for (var _i = 0, _a = MapWrapper.keys(this._optionMap); _i < _a.length; _i++) {\n                var id = _a[_i];\n                if (looseIdentical(this._optionMap.get(id), value))\n                    return id;\n            }\n            return null;\n        };\n        /** @internal */\n        SelectControlValueAccessor.prototype._getOptionValue = function (valueString) {\n            var value = this._optionMap.get(_extractId(valueString));\n            return isPresent(value) ? value : valueString;\n        };\n        SelectControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n                        host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                        providers: [SELECT_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        SelectControlValueAccessor.ctorParameters = [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ];\n        return SelectControlValueAccessor;\n    }());\n    /**\n     * @whatItDoes Marks `<option>` as dynamic, so Angular can be notified when options change.\n     *\n     * @howToUse\n     *\n     * See docs for {@link SelectControlValueAccessor} for usage examples.\n     *\n     * @stable\n     */\n    var NgSelectOption = (function () {\n        function NgSelectOption(_element, _renderer, _select) {\n            this._element = _element;\n            this._renderer = _renderer;\n            this._select = _select;\n            if (isPresent(this._select))\n                this.id = this._select._registerOption();\n        }\n        Object.defineProperty(NgSelectOption.prototype, \"ngValue\", {\n            set: function (value) {\n                if (this._select == null)\n                    return;\n                this._select._optionMap.set(this.id, value);\n                this._setElementValue(_buildValueString(this.id, value));\n                this._select.writeValue(this._select.value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgSelectOption.prototype, \"value\", {\n            set: function (value) {\n                this._setElementValue(value);\n                if (isPresent(this._select))\n                    this._select.writeValue(this._select.value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** @internal */\n        NgSelectOption.prototype._setElementValue = function (value) {\n            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n        };\n        NgSelectOption.prototype.ngOnDestroy = function () {\n            if (isPresent(this._select)) {\n                this._select._optionMap.delete(this.id);\n                this._select.writeValue(this._select.value);\n            }\n        };\n        NgSelectOption.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: 'option' },] },\n        ];\n        /** @nocollapse */\n        NgSelectOption.ctorParameters = [\n            { type: _angular_core.ElementRef, },\n            { type: _angular_core.Renderer, },\n            { type: SelectControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n        ];\n        NgSelectOption.propDecorators = {\n            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],\n            'value': [{ type: _angular_core.Input, args: ['value',] },],\n        };\n        return NgSelectOption;\n    }());\n\n    var SELECT_MULTIPLE_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return SelectMultipleControlValueAccessor; }),\n        multi: true\n    };\n    function _buildValueString$1(id, value) {\n        if (isBlank(id))\n            return \"\" + value;\n        if (typeof value === 'string')\n            value = \"'\" + value + \"'\";\n        if (!isPrimitive(value))\n            value = 'Object';\n        return (id + \": \" + value).slice(0, 50);\n    }\n    function _extractId$1(valueString) {\n        return valueString.split(':')[0];\n    }\n    /**\n     * The accessor for writing a value and listening to changes on a select element.\n     *\n     * @stable\n     */\n    var SelectMultipleControlValueAccessor = (function () {\n        function SelectMultipleControlValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            /** @internal */\n            this._optionMap = new Map();\n            /** @internal */\n            this._idCounter = 0;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        SelectMultipleControlValueAccessor.prototype.writeValue = function (value) {\n            var _this = this;\n            this.value = value;\n            if (value == null)\n                return;\n            var values = value;\n            // convert values to ids\n            var ids = values.map(function (v) { return _this._getOptionId(v); });\n            this._optionMap.forEach(function (opt, o) { opt._setSelected(ids.indexOf(o.toString()) > -1); });\n        };\n        SelectMultipleControlValueAccessor.prototype.registerOnChange = function (fn) {\n            var _this = this;\n            this.onChange = function (_) {\n                var selected = [];\n                if (_.hasOwnProperty('selectedOptions')) {\n                    var options = _.selectedOptions;\n                    for (var i = 0; i < options.length; i++) {\n                        var opt = options.item(i);\n                        var val = _this._getOptionValue(opt.value);\n                        selected.push(val);\n                    }\n                }\n                else {\n                    var options = _.options;\n                    for (var i = 0; i < options.length; i++) {\n                        var opt = options.item(i);\n                        if (opt.selected) {\n                            var val = _this._getOptionValue(opt.value);\n                            selected.push(val);\n                        }\n                    }\n                }\n                fn(selected);\n            };\n        };\n        SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        /** @internal */\n        SelectMultipleControlValueAccessor.prototype._registerOption = function (value) {\n            var id = (this._idCounter++).toString();\n            this._optionMap.set(id, value);\n            return id;\n        };\n        /** @internal */\n        SelectMultipleControlValueAccessor.prototype._getOptionId = function (value) {\n            for (var _i = 0, _a = MapWrapper.keys(this._optionMap); _i < _a.length; _i++) {\n                var id = _a[_i];\n                if (looseIdentical(this._optionMap.get(id)._value, value))\n                    return id;\n            }\n            return null;\n        };\n        /** @internal */\n        SelectMultipleControlValueAccessor.prototype._getOptionValue = function (valueString) {\n            var opt = this._optionMap.get(_extractId$1(valueString));\n            return isPresent(opt) ? opt._value : valueString;\n        };\n        SelectMultipleControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n                        host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },\n                        providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        SelectMultipleControlValueAccessor.ctorParameters = [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ];\n        return SelectMultipleControlValueAccessor;\n    }());\n    /**\n     * Marks `<option>` as dynamic, so Angular can be notified when options change.\n     *\n     * ### Example\n     *\n     * ```\n     * <select multiple name=\"city\" ngModel>\n     *   <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n     * </select>\n     * ```\n     */\n    var NgSelectMultipleOption = (function () {\n        function NgSelectMultipleOption(_element, _renderer, _select) {\n            this._element = _element;\n            this._renderer = _renderer;\n            this._select = _select;\n            if (isPresent(this._select)) {\n                this.id = this._select._registerOption(this);\n            }\n        }\n        Object.defineProperty(NgSelectMultipleOption.prototype, \"ngValue\", {\n            set: function (value) {\n                if (this._select == null)\n                    return;\n                this._value = value;\n                this._setElementValue(_buildValueString$1(this.id, value));\n                this._select.writeValue(this._select.value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgSelectMultipleOption.prototype, \"value\", {\n            set: function (value) {\n                if (isPresent(this._select)) {\n                    this._value = value;\n                    this._setElementValue(_buildValueString$1(this.id, value));\n                    this._select.writeValue(this._select.value);\n                }\n                else {\n                    this._setElementValue(value);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** @internal */\n        NgSelectMultipleOption.prototype._setElementValue = function (value) {\n            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n        };\n        /** @internal */\n        NgSelectMultipleOption.prototype._setSelected = function (selected) {\n            this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);\n        };\n        NgSelectMultipleOption.prototype.ngOnDestroy = function () {\n            if (isPresent(this._select)) {\n                this._select._optionMap.delete(this.id);\n                this._select.writeValue(this._select.value);\n            }\n        };\n        NgSelectMultipleOption.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: 'option' },] },\n        ];\n        /** @nocollapse */\n        NgSelectMultipleOption.ctorParameters = [\n            { type: _angular_core.ElementRef, },\n            { type: _angular_core.Renderer, },\n            { type: SelectMultipleControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n        ];\n        NgSelectMultipleOption.propDecorators = {\n            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],\n            'value': [{ type: _angular_core.Input, args: ['value',] },],\n        };\n        return NgSelectMultipleOption;\n    }());\n\n    function controlPath(name, parent) {\n        return parent.path.concat([name]);\n    }\n    function setUpControl(control, dir) {\n        if (!control)\n            _throwError(dir, 'Cannot find control with');\n        if (!dir.valueAccessor)\n            _throwError(dir, 'No value accessor for form control with');\n        control.validator = Validators.compose([control.validator, dir.validator]);\n        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n        dir.valueAccessor.writeValue(control.value);\n        // view -> model\n        dir.valueAccessor.registerOnChange(function (newValue) {\n            dir.viewToModelUpdate(newValue);\n            control.markAsDirty();\n            control.setValue(newValue, { emitModelToViewChange: false });\n        });\n        // touched\n        dir.valueAccessor.registerOnTouched(function () { return control.markAsTouched(); });\n        control.registerOnChange(function (newValue, emitModelEvent) {\n            // control -> view\n            dir.valueAccessor.writeValue(newValue);\n            // control -> ngModel\n            if (emitModelEvent)\n                dir.viewToModelUpdate(newValue);\n        });\n        if (dir.valueAccessor.setDisabledState) {\n            control.registerOnDisabledChange(function (isDisabled) { dir.valueAccessor.setDisabledState(isDisabled); });\n        }\n        // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n        dir._rawValidators.forEach(function (validator) {\n            if (validator.registerOnValidatorChange)\n                validator.registerOnValidatorChange(function () { return control.updateValueAndValidity(); });\n        });\n        dir._rawAsyncValidators.forEach(function (validator) {\n            if (validator.registerOnValidatorChange)\n                validator.registerOnValidatorChange(function () { return control.updateValueAndValidity(); });\n        });\n    }\n    function cleanUpControl(control, dir) {\n        dir.valueAccessor.registerOnChange(function () { return _noControlError(dir); });\n        dir.valueAccessor.registerOnTouched(function () { return _noControlError(dir); });\n        dir._rawValidators.forEach(function (validator) { return validator.registerOnValidatorChange(null); });\n        dir._rawAsyncValidators.forEach(function (validator) { return validator.registerOnValidatorChange(null); });\n        if (control)\n            control._clearChangeFns();\n    }\n    function setUpFormContainer(control, dir) {\n        if (isBlank(control))\n            _throwError(dir, 'Cannot find control with');\n        control.validator = Validators.compose([control.validator, dir.validator]);\n        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n    }\n    function _noControlError(dir) {\n        return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n    }\n    function _throwError(dir, message) {\n        var messageEnd;\n        if (dir.path.length > 1) {\n            messageEnd = \"path: '\" + dir.path.join(' -> ') + \"'\";\n        }\n        else if (dir.path[0]) {\n            messageEnd = \"name: '\" + dir.path + \"'\";\n        }\n        else {\n            messageEnd = 'unspecified name attribute';\n        }\n        throw new Error(message + \" \" + messageEnd);\n    }\n    function composeValidators(validators) {\n        return isPresent(validators) ? Validators.compose(validators.map(normalizeValidator)) : null;\n    }\n    function composeAsyncValidators(validators) {\n        return isPresent(validators) ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :\n            null;\n    }\n    function isPropertyUpdated(changes, viewModel) {\n        if (!changes.hasOwnProperty('model'))\n            return false;\n        var change = changes['model'];\n        if (change.isFirstChange())\n            return true;\n        return !looseIdentical(viewModel, change.currentValue);\n    }\n    var BUILTIN_ACCESSORS = [\n        CheckboxControlValueAccessor,\n        NumberValueAccessor,\n        SelectControlValueAccessor,\n        SelectMultipleControlValueAccessor,\n        RadioControlValueAccessor,\n    ];\n    function isBuiltInAccessor(valueAccessor) {\n        return BUILTIN_ACCESSORS.some(function (a) { return valueAccessor.constructor === a; });\n    }\n    // TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented\n    function selectValueAccessor(dir, valueAccessors) {\n        if (!valueAccessors)\n            return null;\n        var defaultAccessor;\n        var builtinAccessor;\n        var customAccessor;\n        valueAccessors.forEach(function (v) {\n            if (v.constructor === DefaultValueAccessor) {\n                defaultAccessor = v;\n            }\n            else if (isBuiltInAccessor(v)) {\n                if (builtinAccessor)\n                    _throwError(dir, 'More than one built-in value accessor matches form control with');\n                builtinAccessor = v;\n            }\n            else {\n                if (customAccessor)\n                    _throwError(dir, 'More than one custom value accessor matches form control with');\n                customAccessor = v;\n            }\n        });\n        if (customAccessor)\n            return customAccessor;\n        if (builtinAccessor)\n            return builtinAccessor;\n        if (defaultAccessor)\n            return defaultAccessor;\n        _throwError(dir, 'No valid value accessor for form control with');\n        return null;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * This is a base class for code shared between {@link NgModelGroup} and {@link FormGroupName}.\n     *\n     * @stable\n     */\n    var AbstractFormGroupDirective = (function (_super) {\n        __extends(AbstractFormGroupDirective, _super);\n        function AbstractFormGroupDirective() {\n            _super.apply(this, arguments);\n        }\n        AbstractFormGroupDirective.prototype.ngOnInit = function () {\n            this._checkParentType();\n            this.formDirective.addFormGroup(this);\n        };\n        AbstractFormGroupDirective.prototype.ngOnDestroy = function () {\n            if (this.formDirective) {\n                this.formDirective.removeFormGroup(this);\n            }\n        };\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"control\", {\n            /**\n             * Get the {@link FormGroup} backing this binding.\n             */\n            get: function () { return this.formDirective.getFormGroup(this); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"path\", {\n            /**\n             * Get the path to this control group.\n             */\n            get: function () { return controlPath(this.name, this._parent); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"formDirective\", {\n            /**\n             * Get the {@link Form} to which this group belongs.\n             */\n            get: function () { return this._parent ? this._parent.formDirective : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"validator\", {\n            get: function () { return composeValidators(this._validators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"asyncValidator\", {\n            get: function () { return composeAsyncValidators(this._asyncValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        /** @internal */\n        AbstractFormGroupDirective.prototype._checkParentType = function () { };\n        return AbstractFormGroupDirective;\n    }(ControlContainer));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$3 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var AbstractControlStatus = (function () {\n        function AbstractControlStatus(cd) {\n            this._cd = cd;\n        }\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassUntouched\", {\n            get: function () {\n                return isPresent(this._cd.control) ? this._cd.control.untouched : false;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassTouched\", {\n            get: function () {\n                return isPresent(this._cd.control) ? this._cd.control.touched : false;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPristine\", {\n            get: function () {\n                return isPresent(this._cd.control) ? this._cd.control.pristine : false;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassDirty\", {\n            get: function () {\n                return isPresent(this._cd.control) ? this._cd.control.dirty : false;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassValid\", {\n            get: function () {\n                return isPresent(this._cd.control) ? this._cd.control.valid : false;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassInvalid\", {\n            get: function () {\n                return isPresent(this._cd.control) ? this._cd.control.invalid : false;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return AbstractControlStatus;\n    }());\n    var ngControlStatusHost = {\n        '[class.ng-untouched]': 'ngClassUntouched',\n        '[class.ng-touched]': 'ngClassTouched',\n        '[class.ng-pristine]': 'ngClassPristine',\n        '[class.ng-dirty]': 'ngClassDirty',\n        '[class.ng-valid]': 'ngClassValid',\n        '[class.ng-invalid]': 'ngClassInvalid'\n    };\n    /**\n     * Directive automatically applied to Angular form controls that sets CSS classes\n     * based on control status (valid/invalid/dirty/etc).\n     *\n     * @stable\n     */\n    var NgControlStatus = (function (_super) {\n        __extends$3(NgControlStatus, _super);\n        function NgControlStatus(cd) {\n            _super.call(this, cd);\n        }\n        NgControlStatus.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] },\n        ];\n        /** @nocollapse */\n        NgControlStatus.ctorParameters = [\n            { type: NgControl, decorators: [{ type: _angular_core.Self },] },\n        ];\n        return NgControlStatus;\n    }(AbstractControlStatus));\n    /**\n     * Directive automatically applied to Angular form groups that sets CSS classes\n     * based on control status (valid/invalid/dirty/etc).\n     *\n     * @stable\n     */\n    var NgControlStatusGroup = (function (_super) {\n        __extends$3(NgControlStatusGroup, _super);\n        function NgControlStatusGroup(cd) {\n            _super.call(this, cd);\n        }\n        NgControlStatusGroup.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n                        host: ngControlStatusHost\n                    },] },\n        ];\n        /** @nocollapse */\n        NgControlStatusGroup.ctorParameters = [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Self },] },\n        ];\n        return NgControlStatusGroup;\n    }(AbstractControlStatus));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$5 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Use by directives and components to emit custom Events.\n     *\n     * ### Examples\n     *\n     * In the following example, `Zippy` alternatively emits `open` and `close` events when its\n     * title gets clicked:\n     *\n     * ```\n     * @Component({\n     *   selector: 'zippy',\n     *   template: `\n     *   <div class=\"zippy\">\n     *     <div (click)=\"toggle()\">Toggle</div>\n     *     <div [hidden]=\"!visible\">\n     *       <ng-content></ng-content>\n     *     </div>\n     *  </div>`})\n     * export class Zippy {\n     *   visible: boolean = true;\n     *   @Output() open: EventEmitter<any> = new EventEmitter();\n     *   @Output() close: EventEmitter<any> = new EventEmitter();\n     *\n     *   toggle() {\n     *     this.visible = !this.visible;\n     *     if (this.visible) {\n     *       this.open.emit(null);\n     *     } else {\n     *       this.close.emit(null);\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * The events payload can be accessed by the parameter `$event` on the components output event\n     * handler:\n     *\n     * ```\n     * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n     * ```\n     *\n     * Uses Rx.Observable but provides an adapter to make it work as specified here:\n     * https://github.com/jhusain/observable-spec\n     *\n     * Once a reference implementation of the spec is available, switch to it.\n     * @stable\n     */\n    var EventEmitter = (function (_super) {\n        __extends$5(EventEmitter, _super);\n        /**\n         * Creates an instance of [EventEmitter], which depending on [isAsync],\n         * delivers events synchronously or asynchronously.\n         */\n        function EventEmitter(isAsync) {\n            if (isAsync === void 0) { isAsync = false; }\n            _super.call(this);\n            this.__isAsync = isAsync;\n        }\n        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };\n        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {\n            var schedulerFn;\n            var errorFn = function (err) { return null; };\n            var completeFn = function () { return null; };\n            if (generatorOrNext && typeof generatorOrNext === 'object') {\n                schedulerFn = this.__isAsync ? function (value) {\n                    setTimeout(function () { return generatorOrNext.next(value); });\n                } : function (value) { generatorOrNext.next(value); };\n                if (generatorOrNext.error) {\n                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n                        function (err) { generatorOrNext.error(err); };\n                }\n                if (generatorOrNext.complete) {\n                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n                        function () { generatorOrNext.complete(); };\n                }\n            }\n            else {\n                schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :\n                    function (value) { generatorOrNext(value); };\n                if (error) {\n                    errorFn =\n                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n                }\n                if (complete) {\n                    completeFn =\n                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n                }\n            }\n            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n        };\n        return EventEmitter;\n    }(rxjs_Subject.Subject));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$6 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.\n     */\n    var VALID = 'VALID';\n    /**\n     * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.\n     */\n    var INVALID = 'INVALID';\n    /**\n     * Indicates that a FormControl is pending, i.e. that async validation is occurring and\n     * errors are not yet available for the input value.\n     */\n    var PENDING = 'PENDING';\n    /**\n     * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor\n     * calculations of validity or value.\n     */\n    var DISABLED = 'DISABLED';\n    function _find(control, path, delimiter) {\n        if (path == null)\n            return null;\n        if (!(path instanceof Array)) {\n            path = path.split(delimiter);\n        }\n        if (path instanceof Array && (path.length === 0))\n            return null;\n        return path.reduce(function (v, name) {\n            if (v instanceof FormGroup) {\n                return v.controls[name] || null;\n            }\n            if (v instanceof FormArray) {\n                return v.at(name) || null;\n            }\n            return null;\n        }, control);\n    }\n    function toObservable(r) {\n        return isPromise(r) ? rxjs_observable_fromPromise.fromPromise(r) : r;\n    }\n    function coerceToValidator(validator) {\n        return Array.isArray(validator) ? composeValidators(validator) : validator;\n    }\n    function coerceToAsyncValidator(asyncValidator) {\n        return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator;\n    }\n    /**\n     * @whatItDoes This is the base class for {@link FormControl}, {@link FormGroup}, and\n     * {@link FormArray}.\n     *\n     * It provides some of the shared behavior that all controls and groups of controls have, like\n     * running validators, calculating status, and resetting state. It also defines the properties\n     * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n     * instantiated directly.\n     *\n     * @stable\n     */\n    var AbstractControl = (function () {\n        function AbstractControl(validator, asyncValidator) {\n            this.validator = validator;\n            this.asyncValidator = asyncValidator;\n            /** @internal */\n            this._onCollectionChange = function () { };\n            this._pristine = true;\n            this._touched = false;\n            /** @internal */\n            this._onDisabledChange = [];\n        }\n        Object.defineProperty(AbstractControl.prototype, \"value\", {\n            /**\n             * The value of the control.\n             */\n            get: function () { return this._value; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"status\", {\n            /**\n             * The validation status of the control. There are four possible\n             * validation statuses:\n             *\n             * * **VALID**:  control has passed all validation checks\n             * * **INVALID**: control has failed at least one validation check\n             * * **PENDING**: control is in the midst of conducting a validation check\n             * * **DISABLED**: control is exempt from validation checks\n             *\n             * These statuses are mutually exclusive, so a control cannot be\n             * both valid AND invalid or invalid AND disabled.\n             */\n            get: function () { return this._status; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"valid\", {\n            /**\n             * A control is `valid` when its `status === VALID`.\n             *\n             * In order to have this status, the control must have passed all its\n             * validation checks.\n             */\n            get: function () { return this._status === VALID; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"invalid\", {\n            /**\n             * A control is `invalid` when its `status === INVALID`.\n             *\n             * In order to have this status, the control must have failed\n             * at least one of its validation checks.\n             */\n            get: function () { return this._status === INVALID; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"pending\", {\n            /**\n             * A control is `pending` when its `status === PENDING`.\n             *\n             * In order to have this status, the control must be in the\n             * middle of conducting a validation check.\n             */\n            get: function () { return this._status == PENDING; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"disabled\", {\n            /**\n             * A control is `disabled` when its `status === DISABLED`.\n             *\n             * Disabled controls are exempt from validation checks and\n             * are not included in the aggregate value of their ancestor\n             * controls.\n             */\n            get: function () { return this._status === DISABLED; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"enabled\", {\n            /**\n             * A control is `enabled` as long as its `status !== DISABLED`.\n             *\n             * In other words, it has a status of `VALID`, `INVALID`, or\n             * `PENDING`.\n             */\n            get: function () { return this._status !== DISABLED; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"errors\", {\n            /**\n             * Returns any errors generated by failing validation. If there\n             * are no errors, it will return null.\n             */\n            get: function () { return this._errors; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"pristine\", {\n            /**\n             * A control is `pristine` if the user has not yet changed\n             * the value in the UI.\n             *\n             * Note that programmatic changes to a control's value will\n             * *not* mark it dirty.\n             */\n            get: function () { return this._pristine; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"dirty\", {\n            /**\n             * A control is `dirty` if the user has changed the value\n             * in the UI.\n             *\n             * Note that programmatic changes to a control's value will\n             * *not* mark it dirty.\n             */\n            get: function () { return !this.pristine; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"touched\", {\n            /**\n            * A control is marked `touched` once the user has triggered\n            * a `blur` event on it.\n            */\n            get: function () { return this._touched; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"untouched\", {\n            /**\n             * A control is `untouched` if the user has not yet triggered\n             * a `blur` event on it.\n             */\n            get: function () { return !this._touched; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"valueChanges\", {\n            /**\n             * Emits an event every time the value of the control changes, in\n             * the UI or programmatically.\n             */\n            get: function () { return this._valueChanges; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"statusChanges\", {\n            /**\n             * Emits an event every time the validation status of the control\n             * is re-calculated.\n             */\n            get: function () { return this._statusChanges; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Sets the synchronous validators that are active on this control.  Calling\n         * this will overwrite any existing sync validators.\n         */\n        AbstractControl.prototype.setValidators = function (newValidator) {\n            this.validator = coerceToValidator(newValidator);\n        };\n        /**\n         * Sets the async validators that are active on this control. Calling this\n         * will overwrite any existing async validators.\n         */\n        AbstractControl.prototype.setAsyncValidators = function (newValidator) {\n            this.asyncValidator = coerceToAsyncValidator(newValidator);\n        };\n        /**\n         * Empties out the sync validator list.\n         */\n        AbstractControl.prototype.clearValidators = function () { this.validator = null; };\n        /**\n         * Empties out the async validator list.\n         */\n        AbstractControl.prototype.clearAsyncValidators = function () { this.asyncValidator = null; };\n        /**\n         * Marks the control as `touched`.\n         *\n         * This will also mark all direct ancestors as `touched` to maintain\n         * the model.\n         */\n        AbstractControl.prototype.markAsTouched = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._touched = true;\n            if (this._parent && !onlySelf) {\n                this._parent.markAsTouched({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * Marks the control as `untouched`.\n         *\n         * If the control has any children, it will also mark all children as `untouched`\n         * to maintain the model, and re-calculate the `touched` status of all parent\n         * controls.\n         */\n        AbstractControl.prototype.markAsUntouched = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._touched = false;\n            this._forEachChild(function (control) { control.markAsUntouched({ onlySelf: true }); });\n            if (this._parent && !onlySelf) {\n                this._parent._updateTouched({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * Marks the control as `dirty`.\n         *\n         * This will also mark all direct ancestors as `dirty` to maintain\n         * the model.\n         */\n        AbstractControl.prototype.markAsDirty = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._pristine = false;\n            if (this._parent && !onlySelf) {\n                this._parent.markAsDirty({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * Marks the control as `pristine`.\n         *\n         * If the control has any children, it will also mark all children as `pristine`\n         * to maintain the model, and re-calculate the `pristine` status of all parent\n         * controls.\n         */\n        AbstractControl.prototype.markAsPristine = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._pristine = true;\n            this._forEachChild(function (control) { control.markAsPristine({ onlySelf: true }); });\n            if (this._parent && !onlySelf) {\n                this._parent._updatePristine({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * Marks the control as `pending`.\n         */\n        AbstractControl.prototype.markAsPending = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._status = PENDING;\n            if (this._parent && !onlySelf) {\n                this._parent.markAsPending({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * Disables the control. This means the control will be exempt from validation checks and\n         * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n         *\n         * If the control has children, all children will be disabled to maintain the model.\n         */\n        AbstractControl.prototype.disable = function (_a) {\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._status = DISABLED;\n            this._errors = null;\n            this._forEachChild(function (control) { control.disable({ onlySelf: true }); });\n            this._updateValue();\n            if (emitEvent !== false) {\n                this._valueChanges.emit(this._value);\n                this._statusChanges.emit(this._status);\n            }\n            this._updateAncestors(onlySelf);\n            this._onDisabledChange.forEach(function (changeFn) { return changeFn(true); });\n        };\n        /**\n         * Enables the control. This means the control will be included in validation checks and\n         * the aggregate value of its parent. Its status is re-calculated based on its value and\n         * its validators.\n         *\n         * If the control has children, all children will be enabled.\n         */\n        AbstractControl.prototype.enable = function (_a) {\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._status = VALID;\n            this._forEachChild(function (control) { control.enable({ onlySelf: true }); });\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });\n            this._updateAncestors(onlySelf);\n            this._onDisabledChange.forEach(function (changeFn) { return changeFn(false); });\n        };\n        AbstractControl.prototype._updateAncestors = function (onlySelf) {\n            if (this._parent && !onlySelf) {\n                this._parent.updateValueAndValidity();\n                this._parent._updatePristine();\n                this._parent._updateTouched();\n            }\n        };\n        AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };\n        /**\n         * Re-calculates the value and validation status of the control.\n         *\n         * By default, it will also update the value and validity of its ancestors.\n         */\n        AbstractControl.prototype.updateValueAndValidity = function (_a) {\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._setInitialStatus();\n            this._updateValue();\n            if (this.enabled) {\n                this._errors = this._runValidator();\n                this._status = this._calculateStatus();\n                if (this._status === VALID || this._status === PENDING) {\n                    this._runAsyncValidator(emitEvent);\n                }\n            }\n            if (emitEvent !== false) {\n                this._valueChanges.emit(this._value);\n                this._statusChanges.emit(this._status);\n            }\n            if (this._parent && !onlySelf) {\n                this._parent.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n            }\n        };\n        /** @internal */\n        AbstractControl.prototype._updateTreeValidity = function (_a) {\n            var emitEvent = (_a === void 0 ? { emitEvent: true } : _a).emitEvent;\n            this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity({ emitEvent: emitEvent }); });\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });\n        };\n        AbstractControl.prototype._setInitialStatus = function () { this._status = this._allControlsDisabled() ? DISABLED : VALID; };\n        AbstractControl.prototype._runValidator = function () {\n            return this.validator ? this.validator(this) : null;\n        };\n        AbstractControl.prototype._runAsyncValidator = function (emitEvent) {\n            var _this = this;\n            if (this.asyncValidator) {\n                this._status = PENDING;\n                this._cancelExistingSubscription();\n                var obs = toObservable(this.asyncValidator(this));\n                this._asyncValidationSubscription =\n                    obs.subscribe({ next: function (res) { return _this.setErrors(res, { emitEvent: emitEvent }); } });\n            }\n        };\n        AbstractControl.prototype._cancelExistingSubscription = function () {\n            if (this._asyncValidationSubscription) {\n                this._asyncValidationSubscription.unsubscribe();\n            }\n        };\n        /**\n         * Sets errors on a form control.\n         *\n         * This is used when validations are run manually by the user, rather than automatically.\n         *\n         * Calling `setErrors` will also update the validity of the parent control.\n         *\n         * ### Example\n         *\n         * ```\n         * const login = new FormControl(\"someLogin\");\n         * login.setErrors({\n         *   \"notUnique\": true\n         * });\n         *\n         * expect(login.valid).toEqual(false);\n         * expect(login.errors).toEqual({\"notUnique\": true});\n         *\n         * login.setValue(\"someOtherLogin\");\n         *\n         * expect(login.valid).toEqual(true);\n         * ```\n         */\n        AbstractControl.prototype.setErrors = function (errors, _a) {\n            var emitEvent = (_a === void 0 ? {} : _a).emitEvent;\n            this._errors = errors;\n            this._updateControlsErrors(emitEvent !== false);\n        };\n        /**\n         * Retrieves a child control given the control's name or path.\n         *\n         * Paths can be passed in as an array or a string delimited by a dot.\n         *\n         * To get a control nested within a `person` sub-group:\n         *\n         * * `this.form.get('person.name');`\n         *\n         * -OR-\n         *\n         * * `this.form.get(['person', 'name']);`\n         */\n        AbstractControl.prototype.get = function (path) { return _find(this, path, '.'); };\n        /**\n         * Returns true if the control with the given path has the error specified. Otherwise\n         * returns null or undefined.\n         *\n         * If no path is given, it checks for the error on the present control.\n         */\n        AbstractControl.prototype.getError = function (errorCode, path) {\n            if (path === void 0) { path = null; }\n            var control = path ? this.get(path) : this;\n            return control && control._errors ? control._errors[errorCode] : null;\n        };\n        /**\n         * Returns true if the control with the given path has the error specified. Otherwise\n         * returns false.\n         *\n         * If no path is given, it checks for the error on the present control.\n         */\n        AbstractControl.prototype.hasError = function (errorCode, path) {\n            if (path === void 0) { path = null; }\n            return !!this.getError(errorCode, path);\n        };\n        Object.defineProperty(AbstractControl.prototype, \"root\", {\n            /**\n             * Retrieves the top-level ancestor of this control.\n             */\n            get: function () {\n                var x = this;\n                while (x._parent) {\n                    x = x._parent;\n                }\n                return x;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** @internal */\n        AbstractControl.prototype._updateControlsErrors = function (emitEvent) {\n            this._status = this._calculateStatus();\n            if (emitEvent) {\n                this._statusChanges.emit(this._status);\n            }\n            if (this._parent) {\n                this._parent._updateControlsErrors(emitEvent);\n            }\n        };\n        /** @internal */\n        AbstractControl.prototype._initObservables = function () {\n            this._valueChanges = new EventEmitter();\n            this._statusChanges = new EventEmitter();\n        };\n        AbstractControl.prototype._calculateStatus = function () {\n            if (this._allControlsDisabled())\n                return DISABLED;\n            if (this._errors)\n                return INVALID;\n            if (this._anyControlsHaveStatus(PENDING))\n                return PENDING;\n            if (this._anyControlsHaveStatus(INVALID))\n                return INVALID;\n            return VALID;\n        };\n        /** @internal */\n        AbstractControl.prototype._anyControlsHaveStatus = function (status) {\n            return this._anyControls(function (control) { return control.status === status; });\n        };\n        /** @internal */\n        AbstractControl.prototype._anyControlsDirty = function () {\n            return this._anyControls(function (control) { return control.dirty; });\n        };\n        /** @internal */\n        AbstractControl.prototype._anyControlsTouched = function () {\n            return this._anyControls(function (control) { return control.touched; });\n        };\n        /** @internal */\n        AbstractControl.prototype._updatePristine = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._pristine = !this._anyControlsDirty();\n            if (this._parent && !onlySelf) {\n                this._parent._updatePristine({ onlySelf: onlySelf });\n            }\n        };\n        /** @internal */\n        AbstractControl.prototype._updateTouched = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._touched = this._anyControlsTouched();\n            if (this._parent && !onlySelf) {\n                this._parent._updateTouched({ onlySelf: onlySelf });\n            }\n        };\n        /** @internal */\n        AbstractControl.prototype._isBoxedValue = function (formState) {\n            return typeof formState === 'object' && formState !== null &&\n                Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n        };\n        /** @internal */\n        AbstractControl.prototype._registerOnCollectionChange = function (fn) { this._onCollectionChange = fn; };\n        return AbstractControl;\n    }());\n    /**\n     * @whatItDoes Tracks the value and validation status of an individual form control.\n     *\n     * It is one of the three fundamental building blocks of Angular forms, along with\n     * {@link FormGroup} and {@link FormArray}.\n     *\n     * @howToUse\n     *\n     * When instantiating a {@link FormControl}, you can pass in an initial value as the\n     * first argument. Example:\n     *\n     * ```ts\n     * const ctrl = new FormControl('some value');\n     * console.log(ctrl.value);     // 'some value'\n     *```\n     *\n     * You can also initialize the control with a form state object on instantiation,\n     * which includes both the value and whether or not the control is disabled.\n     * You can't use the value key without the disabled key; both are required\n     * to use this way of initialization.\n     *\n     * ```ts\n     * const ctrl = new FormControl({value: 'n/a', disabled: true});\n     * console.log(ctrl.value);     // 'n/a'\n     * console.log(ctrl.status);   // 'DISABLED'\n     * ```\n     *\n     * To include a sync validator (or an array of sync validators) with the control,\n     * pass it in as the second argument. Async validators are also supported, but\n     * have to be passed in separately as the third arg.\n     *\n     * ```ts\n     * const ctrl = new FormControl('', Validators.required);\n     * console.log(ctrl.value);     // ''\n     * console.log(ctrl.status);   // 'INVALID'\n     * ```\n     *\n     * See its superclass, {@link AbstractControl}, for more properties and methods.\n     *\n     * * **npm package**: `@angular/forms`\n     *\n     * @stable\n     */\n    var FormControl = (function (_super) {\n        __extends$6(FormControl, _super);\n        function FormControl(formState, validator, asyncValidator) {\n            if (formState === void 0) { formState = null; }\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator));\n            /** @internal */\n            this._onChange = [];\n            this._applyFormState(formState);\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n            this._initObservables();\n        }\n        /**\n         * Set the value of the form control to `value`.\n         *\n         * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n         * and not its parent component. This defaults to false.\n         *\n         * If `emitEvent` is `true`, this\n         * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\n         * to true (as it falls through to `updateValueAndValidity`).\n         *\n         * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n         * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n         * specified.\n         *\n         * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n         * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n         */\n        FormControl.prototype.setValue = function (value, _a) {\n            var _this = this;\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange, emitViewToModelChange = _b.emitViewToModelChange;\n            this._value = value;\n            if (this._onChange.length && emitModelToViewChange !== false) {\n                this._onChange.forEach(function (changeFn) { return changeFn(_this._value, emitViewToModelChange !== false); });\n            }\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        };\n        /**\n         * Patches the value of a control.\n         *\n         * This function is functionally the same as {@link FormControl.setValue} at this level.\n         * It exists for symmetry with {@link FormGroup.patchValue} on `FormGroups` and `FormArrays`,\n         * where it does behave differently.\n         */\n        FormControl.prototype.patchValue = function (value, options) {\n            if (options === void 0) { options = {}; }\n            this.setValue(value, options);\n        };\n        /**\n         * Resets the form control. This means by default:\n         *\n         * * it is marked as `pristine`\n         * * it is marked as `untouched`\n         * * value is set to null\n         *\n         * You can also reset to a specific form state by passing through a standalone\n         * value or a form state object that contains both a value and a disabled state\n         * (these are the only two properties that cannot be calculated).\n         *\n         * Ex:\n         *\n         * ```ts\n         * this.control.reset('Nancy');\n         *\n         * console.log(this.control.value);  // 'Nancy'\n         * ```\n         *\n         * OR\n         *\n         * ```\n         * this.control.reset({value: 'Nancy', disabled: true});\n         *\n         * console.log(this.control.value);  // 'Nancy'\n         * console.log(this.control.status);  // 'DISABLED'\n         * ```\n         */\n        FormControl.prototype.reset = function (formState, _a) {\n            if (formState === void 0) { formState = null; }\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._applyFormState(formState);\n            this.markAsPristine({ onlySelf: onlySelf });\n            this.markAsUntouched({ onlySelf: onlySelf });\n            this.setValue(this._value, { onlySelf: onlySelf });\n        };\n        /**\n         * @internal\n         */\n        FormControl.prototype._updateValue = function () { };\n        /**\n         * @internal\n         */\n        FormControl.prototype._anyControls = function (condition) { return false; };\n        /**\n         * @internal\n         */\n        FormControl.prototype._allControlsDisabled = function () { return this.disabled; };\n        /**\n         * Register a listener for change events.\n         */\n        FormControl.prototype.registerOnChange = function (fn) { this._onChange.push(fn); };\n        /**\n         * @internal\n         */\n        FormControl.prototype._clearChangeFns = function () {\n            this._onChange = [];\n            this._onDisabledChange = [];\n            this._onCollectionChange = function () { };\n        };\n        /**\n         * Register a listener for disabled events.\n         */\n        FormControl.prototype.registerOnDisabledChange = function (fn) {\n            this._onDisabledChange.push(fn);\n        };\n        /**\n         * @internal\n         */\n        FormControl.prototype._forEachChild = function (cb) { };\n        FormControl.prototype._applyFormState = function (formState) {\n            if (this._isBoxedValue(formState)) {\n                this._value = formState.value;\n                formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :\n                    this.enable({ onlySelf: true, emitEvent: false });\n            }\n            else {\n                this._value = formState;\n            }\n        };\n        return FormControl;\n    }(AbstractControl));\n    /**\n     * @whatItDoes Tracks the value and validity state of a group of {@link FormControl}\n     * instances.\n     *\n     * A `FormGroup` aggregates the values of each child {@link FormControl} into one object,\n     * with each control name as the key.  It calculates its status by reducing the statuses\n     * of its children. For example, if one of the controls in a group is invalid, the entire\n     * group becomes invalid.\n     *\n     * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n     * along with {@link FormControl} and {@link FormArray}.\n     *\n     * @howToUse\n     *\n     * When instantiating a {@link FormGroup}, pass in a collection of child controls as the first\n     * argument. The key for each child will be the name under which it is registered.\n     *\n     * ### Example\n     *\n     * ```\n     * const form = new FormGroup({\n     *   first: new FormControl('Nancy', Validators.minLength(2)),\n     *   last: new FormControl('Drew'),\n     * });\n     *\n     * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n     * console.log(form.status);  // 'VALID'\n     * ```\n     *\n     * You can also include group-level validators as the second arg, or group-level async\n     * validators as the third arg. These come in handy when you want to perform validation\n     * that considers the value of more than one child control.\n     *\n     * ### Example\n     *\n     * ```\n     * const form = new FormGroup({\n     *   password: new FormControl('', Validators.minLength(2)),\n     *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n     * }, passwordMatchValidator);\n     *\n     *\n     * function passwordMatchValidator(g: FormGroup) {\n     *    return g.get('password').value === g.get('passwordConfirm').value\n     *       ? null : {'mismatch': true};\n     * }\n     * ```\n     *\n     * * **npm package**: `@angular/forms`\n     *\n     * @stable\n     */\n    var FormGroup = (function (_super) {\n        __extends$6(FormGroup, _super);\n        function FormGroup(controls, validator, asyncValidator) {\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            _super.call(this, validator, asyncValidator);\n            this.controls = controls;\n            this._initObservables();\n            this._setUpControls();\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        }\n        /**\n         * Registers a control with the group's list of controls.\n         *\n         * This method does not update value or validity of the control, so for\n         * most cases you'll want to use {@link FormGroup.addControl} instead.\n         */\n        FormGroup.prototype.registerControl = function (name, control) {\n            if (this.controls[name])\n                return this.controls[name];\n            this.controls[name] = control;\n            control.setParent(this);\n            control._registerOnCollectionChange(this._onCollectionChange);\n            return control;\n        };\n        /**\n         * Add a control to this group.\n         */\n        FormGroup.prototype.addControl = function (name, control) {\n            this.registerControl(name, control);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         * Remove a control from this group.\n         */\n        FormGroup.prototype.removeControl = function (name) {\n            if (this.controls[name])\n                this.controls[name]._registerOnCollectionChange(function () { });\n            delete (this.controls[name]);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         * Replace an existing control.\n         */\n        FormGroup.prototype.setControl = function (name, control) {\n            if (this.controls[name])\n                this.controls[name]._registerOnCollectionChange(function () { });\n            delete (this.controls[name]);\n            if (control)\n                this.registerControl(name, control);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         * Check whether there is an enabled control with the given name in the group.\n         *\n         * It will return false for disabled controls. If you'd like to check for\n         * existence in the group only, use {@link AbstractControl.get} instead.\n         */\n        FormGroup.prototype.contains = function (controlName) {\n            return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n        };\n        /**\n         *  Sets the value of the {@link FormGroup}. It accepts an object that matches\n         *  the structure of the group, with control names as keys.\n         *\n         * This method performs strict checks, so it will throw an error if you try\n         * to set the value of a control that doesn't exist or if you exclude the\n         * value of a control.\n         *\n         *  ### Example\n         *\n         *  ```\n         *  const form = new FormGroup({\n         *     first: new FormControl(),\n         *     last: new FormControl()\n         *  });\n         *  console.log(form.value);   // {first: null, last: null}\n         *\n         *  form.setValue({first: 'Nancy', last: 'Drew'});\n         *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n         *\n         *  ```\n         */\n        FormGroup.prototype.setValue = function (value, _a) {\n            var _this = this;\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._checkAllValuesPresent(value);\n            Object.keys(value).forEach(function (name) {\n                _this._throwIfControlMissing(name);\n                _this.controls[name].setValue(value[name], { onlySelf: true });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf });\n        };\n        /**\n         *  Patches the value of the {@link FormGroup}. It accepts an object with control\n         *  names as keys, and will do its best to match the values to the correct controls\n         *  in the group.\n         *\n         *  It accepts both super-sets and sub-sets of the group without throwing an error.\n         *\n         *  ### Example\n         *\n         *  ```\n         *  const form = new FormGroup({\n         *     first: new FormControl(),\n         *     last: new FormControl()\n         *  });\n         *  console.log(form.value);   // {first: null, last: null}\n         *\n         *  form.patchValue({first: 'Nancy'});\n         *  console.log(form.value);   // {first: 'Nancy', last: null}\n         *\n         *  ```\n         */\n        FormGroup.prototype.patchValue = function (value, _a) {\n            var _this = this;\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            Object.keys(value).forEach(function (name) {\n                if (_this.controls[name]) {\n                    _this.controls[name].patchValue(value[name], { onlySelf: true });\n                }\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf });\n        };\n        /**\n         * Resets the {@link FormGroup}. This means by default:\n         *\n         * * The group and all descendants are marked `pristine`\n         * * The group and all descendants are marked `untouched`\n         * * The value of all descendants will be null or null maps\n         *\n         * You can also reset to a specific form state by passing in a map of states\n         * that matches the structure of your form, with control names as keys. The state\n         * can be a standalone value or a form state object with both a value and a disabled\n         * status.\n         *\n         * ### Example\n         *\n         * ```ts\n         * this.form.reset({first: 'name', last: 'last name'});\n         *\n         * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n         * ```\n         *\n         * - OR -\n         *\n         * ```\n         * this.form.reset({\n         *   first: {value: 'name', disabled: true},\n         *   last: 'last'\n         * });\n         *\n         * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n         * console.log(this.form.get('first').status);  // 'DISABLED'\n         * ```\n         */\n        FormGroup.prototype.reset = function (value, _a) {\n            if (value === void 0) { value = {}; }\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._forEachChild(function (control, name) {\n                control.reset(value[name], { onlySelf: true });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf });\n            this._updatePristine({ onlySelf: onlySelf });\n            this._updateTouched({ onlySelf: onlySelf });\n        };\n        /**\n         * The aggregate value of the {@link FormGroup}, including any disabled controls.\n         *\n         * If you'd like to include all values regardless of disabled status, use this method.\n         * Otherwise, the `value` property is the best way to get the value of the group.\n         */\n        FormGroup.prototype.getRawValue = function () {\n            return this._reduceChildren({}, function (acc, control, name) {\n                acc[name] = control.value;\n                return acc;\n            });\n        };\n        /** @internal */\n        FormGroup.prototype._throwIfControlMissing = function (name) {\n            if (!Object.keys(this.controls).length) {\n                throw new Error(\"\\n        There are no form controls registered with this group yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n            }\n            if (!this.controls[name]) {\n                throw new Error(\"Cannot find form control with name: \" + name + \".\");\n            }\n        };\n        /** @internal */\n        FormGroup.prototype._forEachChild = function (cb) {\n            var _this = this;\n            Object.keys(this.controls).forEach(function (k) { return cb(_this.controls[k], k); });\n        };\n        /** @internal */\n        FormGroup.prototype._setUpControls = function () {\n            var _this = this;\n            this._forEachChild(function (control) {\n                control.setParent(_this);\n                control._registerOnCollectionChange(_this._onCollectionChange);\n            });\n        };\n        /** @internal */\n        FormGroup.prototype._updateValue = function () { this._value = this._reduceValue(); };\n        /** @internal */\n        FormGroup.prototype._anyControls = function (condition) {\n            var _this = this;\n            var res = false;\n            this._forEachChild(function (control, name) {\n                res = res || (_this.contains(name) && condition(control));\n            });\n            return res;\n        };\n        /** @internal */\n        FormGroup.prototype._reduceValue = function () {\n            var _this = this;\n            return this._reduceChildren({}, function (acc, control, name) {\n                if (control.enabled || _this.disabled) {\n                    acc[name] = control.value;\n                }\n                return acc;\n            });\n        };\n        /** @internal */\n        FormGroup.prototype._reduceChildren = function (initValue, fn) {\n            var res = initValue;\n            this._forEachChild(function (control, name) { res = fn(res, control, name); });\n            return res;\n        };\n        /** @internal */\n        FormGroup.prototype._allControlsDisabled = function () {\n            for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {\n                var controlName = _a[_i];\n                if (this.controls[controlName].enabled) {\n                    return false;\n                }\n            }\n            return Object.keys(this.controls).length > 0 || this.disabled;\n        };\n        /** @internal */\n        FormGroup.prototype._checkAllValuesPresent = function (value) {\n            this._forEachChild(function (control, name) {\n                if (value[name] === undefined) {\n                    throw new Error(\"Must supply a value for form control with name: '\" + name + \"'.\");\n                }\n            });\n        };\n        return FormGroup;\n    }(AbstractControl));\n    /**\n     * @whatItDoes Tracks the value and validity state of an array of {@link FormControl}\n     * instances.\n     *\n     * A `FormArray` aggregates the values of each child {@link FormControl} into an array.\n     * It calculates its status by reducing the statuses of its children. For example, if one of\n     * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n     *\n     * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n     * along with {@link FormControl} and {@link FormGroup}.\n     *\n     * @howToUse\n     *\n     * When instantiating a {@link FormArray}, pass in an array of child controls as the first\n     * argument.\n     *\n     * ### Example\n     *\n     * ```\n     * const arr = new FormArray([\n     *   new FormControl('Nancy', Validators.minLength(2)),\n     *   new FormControl('Drew'),\n     * ]);\n     *\n     * console.log(arr.value);   // ['Nancy', 'Drew']\n     * console.log(arr.status);  // 'VALID'\n     * ```\n     *\n     * You can also include array-level validators as the second arg, or array-level async\n     * validators as the third arg. These come in handy when you want to perform validation\n     * that considers the value of more than one child control.\n     *\n     * ### Adding or removing controls\n     *\n     * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n     * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n     * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n     * the `FormArray` directly, as that will result in strange and unexpected behavior such\n     * as broken change detection.\n     *\n     * * **npm package**: `@angular/forms`\n     *\n     * @stable\n     */\n    var FormArray = (function (_super) {\n        __extends$6(FormArray, _super);\n        function FormArray(controls, validator, asyncValidator) {\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            _super.call(this, validator, asyncValidator);\n            this.controls = controls;\n            this._initObservables();\n            this._setUpControls();\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        }\n        /**\n         * Get the {@link AbstractControl} at the given `index` in the array.\n         */\n        FormArray.prototype.at = function (index) { return this.controls[index]; };\n        /**\n         * Insert a new {@link AbstractControl} at the end of the array.\n         */\n        FormArray.prototype.push = function (control) {\n            this.controls.push(control);\n            this._registerControl(control);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         * Insert a new {@link AbstractControl} at the given `index` in the array.\n         */\n        FormArray.prototype.insert = function (index, control) {\n            this.controls.splice(index, 0, control);\n            this._registerControl(control);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         * Remove the control at the given `index` in the array.\n         */\n        FormArray.prototype.removeAt = function (index) {\n            if (this.controls[index])\n                this.controls[index]._registerOnCollectionChange(function () { });\n            this.controls.splice(index, 1);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         * Replace an existing control.\n         */\n        FormArray.prototype.setControl = function (index, control) {\n            if (this.controls[index])\n                this.controls[index]._registerOnCollectionChange(function () { });\n            this.controls.splice(index, 1);\n            if (control) {\n                this.controls.splice(index, 0, control);\n                this._registerControl(control);\n            }\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        Object.defineProperty(FormArray.prototype, \"length\", {\n            /**\n             * Length of the control array.\n             */\n            get: function () { return this.controls.length; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         *  Sets the value of the {@link FormArray}. It accepts an array that matches\n         *  the structure of the control.\n         *\n         * This method performs strict checks, so it will throw an error if you try\n         * to set the value of a control that doesn't exist or if you exclude the\n         * value of a control.\n         *\n         *  ### Example\n         *\n         *  ```\n         *  const arr = new FormArray([\n         *     new FormControl(),\n         *     new FormControl()\n         *  ]);\n         *  console.log(arr.value);   // [null, null]\n         *\n         *  arr.setValue(['Nancy', 'Drew']);\n         *  console.log(arr.value);   // ['Nancy', 'Drew']\n         *  ```\n         */\n        FormArray.prototype.setValue = function (value, _a) {\n            var _this = this;\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._checkAllValuesPresent(value);\n            value.forEach(function (newValue, index) {\n                _this._throwIfControlMissing(index);\n                _this.at(index).setValue(newValue, { onlySelf: true });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf });\n        };\n        /**\n         *  Patches the value of the {@link FormArray}. It accepts an array that matches the\n         *  structure of the control, and will do its best to match the values to the correct\n         *  controls in the group.\n         *\n         *  It accepts both super-sets and sub-sets of the array without throwing an error.\n         *\n         *  ### Example\n         *\n         *  ```\n         *  const arr = new FormArray([\n         *     new FormControl(),\n         *     new FormControl()\n         *  ]);\n         *  console.log(arr.value);   // [null, null]\n         *\n         *  arr.patchValue(['Nancy']);\n         *  console.log(arr.value);   // ['Nancy', null]\n         *  ```\n         */\n        FormArray.prototype.patchValue = function (value, _a) {\n            var _this = this;\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            value.forEach(function (newValue, index) {\n                if (_this.at(index)) {\n                    _this.at(index).patchValue(newValue, { onlySelf: true });\n                }\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf });\n        };\n        /**\n         * Resets the {@link FormArray}. This means by default:\n         *\n         * * The array and all descendants are marked `pristine`\n         * * The array and all descendants are marked `untouched`\n         * * The value of all descendants will be null or null maps\n         *\n         * You can also reset to a specific form state by passing in an array of states\n         * that matches the structure of the control. The state can be a standalone value\n         * or a form state object with both a value and a disabled status.\n         *\n         * ### Example\n         *\n         * ```ts\n         * this.arr.reset(['name', 'last name']);\n         *\n         * console.log(this.arr.value);  // ['name', 'last name']\n         * ```\n         *\n         * - OR -\n         *\n         * ```\n         * this.arr.reset([\n         *   {value: 'name', disabled: true},\n         *   'last'\n         * ]);\n         *\n         * console.log(this.arr.value);  // ['name', 'last name']\n         * console.log(this.arr.get(0).status);  // 'DISABLED'\n         * ```\n         */\n        FormArray.prototype.reset = function (value, _a) {\n            if (value === void 0) { value = []; }\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._forEachChild(function (control, index) {\n                control.reset(value[index], { onlySelf: true });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf });\n            this._updatePristine({ onlySelf: onlySelf });\n            this._updateTouched({ onlySelf: onlySelf });\n        };\n        /**\n         * The aggregate value of the array, including any disabled controls.\n         *\n         * If you'd like to include all values regardless of disabled status, use this method.\n         * Otherwise, the `value` property is the best way to get the value of the array.\n         */\n        FormArray.prototype.getRawValue = function () { return this.controls.map(function (control) { return control.value; }); };\n        /** @internal */\n        FormArray.prototype._throwIfControlMissing = function (index) {\n            if (!this.controls.length) {\n                throw new Error(\"\\n        There are no form controls registered with this array yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n            }\n            if (!this.at(index)) {\n                throw new Error(\"Cannot find form control at index \" + index);\n            }\n        };\n        /** @internal */\n        FormArray.prototype._forEachChild = function (cb) {\n            this.controls.forEach(function (control, index) { cb(control, index); });\n        };\n        /** @internal */\n        FormArray.prototype._updateValue = function () {\n            var _this = this;\n            this._value = this.controls.filter(function (control) { return control.enabled || _this.disabled; })\n                .map(function (control) { return control.value; });\n        };\n        /** @internal */\n        FormArray.prototype._anyControls = function (condition) {\n            return this.controls.some(function (control) { return control.enabled && condition(control); });\n        };\n        /** @internal */\n        FormArray.prototype._setUpControls = function () {\n            var _this = this;\n            this._forEachChild(function (control) { return _this._registerControl(control); });\n        };\n        /** @internal */\n        FormArray.prototype._checkAllValuesPresent = function (value) {\n            this._forEachChild(function (control, i) {\n                if (value[i] === undefined) {\n                    throw new Error(\"Must supply a value for form control at index: \" + i + \".\");\n                }\n            });\n        };\n        /** @internal */\n        FormArray.prototype._allControlsDisabled = function () {\n            for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {\n                var control = _a[_i];\n                if (control.enabled)\n                    return false;\n            }\n            return this.controls.length > 0 || this.disabled;\n        };\n        FormArray.prototype._registerControl = function (control) {\n            control.setParent(this);\n            control._registerOnCollectionChange(this._onCollectionChange);\n        };\n        return FormArray;\n    }(AbstractControl));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$4 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var formDirectiveProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return NgForm; })\n    };\n    var resolvedPromise = Promise.resolve(null);\n    /**\n     * @whatItDoes Creates a top-level {@link FormGroup} instance and binds it to a form\n     * to track aggregate form value and validation status.\n     *\n     * @howToUse\n     *\n     * As soon as you import the `FormsModule`, this directive becomes active by default on\n     * all `<form>` tags.  You don't need to add a special selector.\n     *\n     * You can export the directive into a local template variable using `ngForm` as the key\n     * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n     * {@link FormGroup} instance are duplicated on the directive itself, so a reference to it\n     * will give you access to the aggregate value and validity status of the form, as well as\n     * user interaction properties like `dirty` and `touched`.\n     *\n     * To register child controls with the form, you'll want to use {@link NgModel} with a\n     * `name` attribute.  You can also use {@link NgModelGroup} if you'd like to create\n     * sub-groups within the form.\n     *\n     * You can listen to the directive's `ngSubmit` event to be notified when the user has\n     * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n     * submission event.\n     *\n     * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n     *\n     * * **npm package**: `@angular/forms`\n     *\n     * * **NgModule**: `FormsModule`\n     *\n     *  @stable\n     */\n    var NgForm = (function (_super) {\n        __extends$4(NgForm, _super);\n        function NgForm(validators, asyncValidators) {\n            _super.call(this);\n            this._submitted = false;\n            this.ngSubmit = new EventEmitter();\n            this.form =\n                new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n        }\n        Object.defineProperty(NgForm.prototype, \"submitted\", {\n            get: function () { return this._submitted; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"formDirective\", {\n            get: function () { return this; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"control\", {\n            get: function () { return this.form; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"path\", {\n            get: function () { return []; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"controls\", {\n            get: function () { return this.form.controls; },\n            enumerable: true,\n            configurable: true\n        });\n        NgForm.prototype.addControl = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var container = _this._findContainer(dir.path);\n                dir._control = container.registerControl(dir.name, dir.control);\n                setUpControl(dir.control, dir);\n                dir.control.updateValueAndValidity({ emitEvent: false });\n            });\n        };\n        NgForm.prototype.getControl = function (dir) { return this.form.get(dir.path); };\n        NgForm.prototype.removeControl = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var container = _this._findContainer(dir.path);\n                if (isPresent(container)) {\n                    container.removeControl(dir.name);\n                }\n            });\n        };\n        NgForm.prototype.addFormGroup = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var container = _this._findContainer(dir.path);\n                var group = new FormGroup({});\n                setUpFormContainer(group, dir);\n                container.registerControl(dir.name, group);\n                group.updateValueAndValidity({ emitEvent: false });\n            });\n        };\n        NgForm.prototype.removeFormGroup = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var container = _this._findContainer(dir.path);\n                if (isPresent(container)) {\n                    container.removeControl(dir.name);\n                }\n            });\n        };\n        NgForm.prototype.getFormGroup = function (dir) { return this.form.get(dir.path); };\n        NgForm.prototype.updateModel = function (dir, value) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var ctrl = _this.form.get(dir.path);\n                ctrl.setValue(value);\n            });\n        };\n        NgForm.prototype.setValue = function (value) { this.control.setValue(value); };\n        NgForm.prototype.onSubmit = function ($event) {\n            this._submitted = true;\n            this.ngSubmit.emit($event);\n            return false;\n        };\n        NgForm.prototype.onReset = function () { this.resetForm(); };\n        NgForm.prototype.resetForm = function (value) {\n            if (value === void 0) { value = undefined; }\n            this.form.reset(value);\n            this._submitted = false;\n        };\n        /** @internal */\n        NgForm.prototype._findContainer = function (path) {\n            path.pop();\n            return path.length ? this.form.get(path) : this.form;\n        };\n        NgForm.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',\n                        providers: [formDirectiveProvider],\n                        host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                        outputs: ['ngSubmit'],\n                        exportAs: 'ngForm'\n                    },] },\n        ];\n        /** @nocollapse */\n        NgForm.ctorParameters = [\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ];\n        return NgForm;\n    }(ControlContainer));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var Examples = {\n        formControlName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <input formControlName=\\\"firstName\\\">\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       firstName: new FormControl()\\n    });\",\n        formGroupName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <div formGroupName=\\\"person\\\">\\n          <input formControlName=\\\"firstName\\\">\\n       </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       person: new FormGroup({ firstName: new FormControl() })\\n    });\",\n        formArrayName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <div formArrayName=\\\"cities\\\">\\n        <div *ngFor=\\\"let city of cityArray.controls; let i=index\\\">\\n          <input [formControlName]=\\\"i\\\">\\n        </div>\\n      </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.cityArray = new FormArray([new FormControl('SF')]);\\n    this.myGroup = new FormGroup({\\n      cities: this.cityArray\\n    });\",\n        ngModelGroup: \"\\n    <form>\\n       <div ngModelGroup=\\\"person\\\">\\n          <input [(ngModel)]=\\\"person.name\\\" name=\\\"firstName\\\">\\n       </div>\\n    </form>\",\n        ngModelWithFormGroup: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <input formControlName=\\\"firstName\\\">\\n       <input [(ngModel)]=\\\"showMoreControls\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n    </div>\\n  \"\n    };\n\n    var TemplateDrivenErrors = (function () {\n        function TemplateDrivenErrors() {\n        }\n        TemplateDrivenErrors.modelParentException = function () {\n            throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\\n      formGroup's partner directive \\\"formControlName\\\" instead.  Example:\\n\\n      \" + Examples.formControlName + \"\\n\\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\\n\\n      Example:\\n\\n      \" + Examples.ngModelWithFormGroup);\n        };\n        TemplateDrivenErrors.formGroupNameException = function () {\n            throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\\n\\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\\n\\n      \" + Examples.formGroupName + \"\\n\\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\\n\\n      \" + Examples.ngModelGroup);\n        };\n        TemplateDrivenErrors.missingNameException = function () {\n            throw new Error(\"If ngModel is used within a form tag, either the name attribute must be set or the form\\n      control must be defined as 'standalone' in ngModelOptions.\\n\\n      Example 1: <input [(ngModel)]=\\\"person.firstName\\\" name=\\\"first\\\">\\n      Example 2: <input [(ngModel)]=\\\"person.firstName\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\");\n        };\n        TemplateDrivenErrors.modelGroupParentException = function () {\n            throw new Error(\"\\n      ngModelGroup cannot be used with a parent formGroup directive.\\n\\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\\n\\n      \" + Examples.formGroupName + \"\\n\\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\\n\\n      \" + Examples.ngModelGroup);\n        };\n        return TemplateDrivenErrors;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$8 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var modelGroupProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return NgModelGroup; })\n    };\n    /**\n     * @whatItDoes Creates and binds a {@link FormGroup} instance to a DOM element.\n     *\n     * @howToUse\n     *\n     * This directive can only be used as a child of {@link NgForm} (or in other words,\n     * within `<form>` tags).\n     *\n     * Use this directive if you'd like to create a sub-group within a form. This can\n     * come in handy if you want to validate a sub-group of your form separately from\n     * the rest of your form, or if some values in your domain model make more sense to\n     * consume together in a nested object.\n     *\n     * Pass in the name you'd like this sub-group to have and it will become the key\n     * for the sub-group in the form's full value. You can also export the directive into\n     * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n     *\n     * {@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n     *\n     * * **npm package**: `@angular/forms`\n     *\n     * * **NgModule**: `FormsModule`\n     *\n     * @stable\n     */\n    var NgModelGroup = (function (_super) {\n        __extends$8(NgModelGroup, _super);\n        function NgModelGroup(parent, validators, asyncValidators) {\n            _super.call(this);\n            this._parent = parent;\n            this._validators = validators;\n            this._asyncValidators = asyncValidators;\n        }\n        /** @internal */\n        NgModelGroup.prototype._checkParentType = function () {\n            if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n                TemplateDrivenErrors.modelGroupParentException();\n            }\n        };\n        NgModelGroup.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] },\n        ];\n        /** @nocollapse */\n        NgModelGroup.ctorParameters = [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ];\n        NgModelGroup.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['ngModelGroup',] },],\n        };\n        return NgModelGroup;\n    }(AbstractFormGroupDirective));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$7 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var formControlBinding = {\n        provide: NgControl,\n        useExisting: _angular_core.forwardRef(function () { return NgModel; })\n    };\n    var resolvedPromise$1 = Promise.resolve(null);\n    /**\n     * @whatItDoes Creates a {@link FormControl} instance from a domain model and binds it\n     * to a form control element.\n     *\n     * The {@link FormControl} instance will track the value, user interaction, and\n     * validation status of the control and keep the view synced with the model. If used\n     * within a parent form, the directive will also register itself with the form as a child\n     * control.\n     *\n     * @howToUse\n     *\n     * This directive can be used by itself or as part of a larger form. All you need is the\n     * `ngModel` selector to activate it.\n     *\n     * It accepts a domain model as an optional {@link @Input}. If you have a one-way binding\n     * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n     * class will set the value in the view. If you have a two-way binding with `[()]` syntax\n     * (also known as 'banana-box syntax'), the value in the UI will always be synced back to\n     * the domain model in your class as well.\n     *\n     * If you wish to inspect the properties of the associated {@link FormControl} (like\n     * validity state), you can also export the directive into a local template variable using\n     * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the\n     * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)\n     * will fall through to the control anyway, so you can access them directly. You can see a\n     * full list of properties directly available in {@link AbstractControlDirective}.\n     *\n     * The following is an example of a simple standalone control using `ngModel`:\n     *\n     * {@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n     *\n     * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n     * so that the control can be registered with the parent form under that name.\n     *\n     * It's worth noting that in the context of a parent form, you often can skip one-way or\n     * two-way binding because the parent form will sync the value for you. You can access\n     * its properties by exporting it into a local template variable using `ngForm` (ex:\n     * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.\n     *\n     * If you do need to populate initial values into your form, using a one-way binding for\n     * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n     * than the domain model's value on submit.\n     *\n     * Take a look at an example of using `ngModel` within a form:\n     *\n     * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n     *\n     * To see `ngModel` examples with different form control types, see:\n     *\n     * * Radio buttons: {@link RadioControlValueAccessor}\n     * * Selects: {@link SelectControlValueAccessor}\n     *\n     * **npm package**: `@angular/forms`\n     *\n     * **NgModule**: `FormsModule`\n     *\n     *  @stable\n     */\n    var NgModel = (function (_super) {\n        __extends$7(NgModel, _super);\n        function NgModel(parent, validators, asyncValidators, valueAccessors) {\n            _super.call(this);\n            /** @internal */\n            this._control = new FormControl();\n            /** @internal */\n            this._registered = false;\n            this.update = new EventEmitter();\n            this._parent = parent;\n            this._rawValidators = validators || [];\n            this._rawAsyncValidators = asyncValidators || [];\n            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n        }\n        NgModel.prototype.ngOnChanges = function (changes) {\n            this._checkForErrors();\n            if (!this._registered)\n                this._setUpControl();\n            if ('isDisabled' in changes) {\n                this._updateDisabled(changes);\n            }\n            if (isPropertyUpdated(changes, this.viewModel)) {\n                this._updateValue(this.model);\n                this.viewModel = this.model;\n            }\n        };\n        NgModel.prototype.ngOnDestroy = function () { this.formDirective && this.formDirective.removeControl(this); };\n        Object.defineProperty(NgModel.prototype, \"control\", {\n            get: function () { return this._control; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"path\", {\n            get: function () {\n                return this._parent ? controlPath(this.name, this._parent) : [this.name];\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"formDirective\", {\n            get: function () { return this._parent ? this._parent.formDirective : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"validator\", {\n            get: function () { return composeValidators(this._rawValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"asyncValidator\", {\n            get: function () {\n                return composeAsyncValidators(this._rawAsyncValidators);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        NgModel.prototype.viewToModelUpdate = function (newValue) {\n            this.viewModel = newValue;\n            this.update.emit(newValue);\n        };\n        NgModel.prototype._setUpControl = function () {\n            this._isStandalone() ? this._setUpStandalone() :\n                this.formDirective.addControl(this);\n            this._registered = true;\n        };\n        NgModel.prototype._isStandalone = function () {\n            return !this._parent || (this.options && this.options.standalone);\n        };\n        NgModel.prototype._setUpStandalone = function () {\n            setUpControl(this._control, this);\n            this._control.updateValueAndValidity({ emitEvent: false });\n        };\n        NgModel.prototype._checkForErrors = function () {\n            if (!this._isStandalone()) {\n                this._checkParentType();\n            }\n            this._checkName();\n        };\n        NgModel.prototype._checkParentType = function () {\n            if (!(this._parent instanceof NgModelGroup) &&\n                this._parent instanceof AbstractFormGroupDirective) {\n                TemplateDrivenErrors.formGroupNameException();\n            }\n            else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n                TemplateDrivenErrors.modelParentException();\n            }\n        };\n        NgModel.prototype._checkName = function () {\n            if (this.options && this.options.name)\n                this.name = this.options.name;\n            if (!this._isStandalone() && !this.name) {\n                TemplateDrivenErrors.missingNameException();\n            }\n        };\n        NgModel.prototype._updateValue = function (value) {\n            var _this = this;\n            resolvedPromise$1.then(function () { _this.control.setValue(value, { emitViewToModelChange: false }); });\n        };\n        NgModel.prototype._updateDisabled = function (changes) {\n            var _this = this;\n            var disabledValue = changes['isDisabled'].currentValue;\n            var isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');\n            resolvedPromise$1.then(function () {\n                if (isDisabled && !_this.control.disabled) {\n                    _this.control.disable();\n                }\n                else if (!isDisabled && _this.control.disabled) {\n                    _this.control.enable();\n                }\n            });\n        };\n        NgModel.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[ngModel]:not([formControlName]):not([formControl])',\n                        providers: [formControlBinding],\n                        exportAs: 'ngModel'\n                    },] },\n        ];\n        /** @nocollapse */\n        NgModel.ctorParameters = [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n        ];\n        NgModel.propDecorators = {\n            'name': [{ type: _angular_core.Input },],\n            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n            'options': [{ type: _angular_core.Input, args: ['ngModelOptions',] },],\n            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n        };\n        return NgModel;\n    }(NgControl));\n\n    var ReactiveErrors = (function () {\n        function ReactiveErrors() {\n        }\n        ReactiveErrors.controlParentException = function () {\n            throw new Error(\"formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + Examples.formControlName);\n        };\n        ReactiveErrors.ngModelGroupException = function () {\n            throw new Error(\"formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\\n       that also have a \\\"form\\\" prefix: formGroupName, formArrayName, or formGroup.\\n\\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\\n\\n        \" + Examples.formGroupName + \"\\n\\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\\n\\n        \" + Examples.ngModelGroup);\n        };\n        ReactiveErrors.missingFormException = function () {\n            throw new Error(\"formGroup expects a FormGroup instance. Please pass one in.\\n\\n       Example:\\n\\n       \" + Examples.formControlName);\n        };\n        ReactiveErrors.groupParentException = function () {\n            throw new Error(\"formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n      directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + Examples.formGroupName);\n        };\n        ReactiveErrors.arrayParentException = function () {\n            throw new Error(\"formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n        Example:\\n\\n        \" + Examples.formArrayName);\n        };\n        ReactiveErrors.disabledAttrWarning = function () {\n            console.warn(\"\\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\\n      you. We recommend using this approach to avoid 'changed after checked' errors.\\n       \\n      Example: \\n      form = new FormGroup({\\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\\n        last: new FormControl('Drew', Validators.required)\\n      });\\n    \");\n        };\n        return ReactiveErrors;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$9 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var formControlBinding$1 = {\n        provide: NgControl,\n        useExisting: _angular_core.forwardRef(function () { return FormControlDirective; })\n    };\n    /**\n     * @whatItDoes Syncs a standalone {@link FormControl} instance to a form control element.\n     *\n     * In other words, this directive ensures that any values written to the {@link FormControl}\n     * instance programmatically will be written to the DOM element (model -> view). Conversely,\n     * any values written to the DOM element through user input will be reflected in the\n     * {@link FormControl} instance (view -> model).\n     *\n     * @howToUse\n     *\n     * Use this directive if you'd like to create and manage a {@link FormControl} instance directly.\n     * Simply create a {@link FormControl}, save it to your component class, and pass it into the\n     * {@link FormControlDirective}.\n     *\n     * This directive is designed to be used as a standalone control.  Unlike {@link FormControlName},\n     * it does not require that your {@link FormControl} instance be part of any parent\n     * {@link FormGroup}, and it won't be registered to any {@link FormGroupDirective} that\n     * exists above it.\n     *\n     * **Get the value**: the `value` property is always synced and available on the\n     * {@link FormControl} instance. See a full list of available properties in\n     * {@link AbstractControl}.\n     *\n     * **Set the value**: You can pass in an initial value when instantiating the {@link FormControl},\n     * or you can set it programmatically later using {@link AbstractControl.setValue} or\n     * {@link AbstractControl.patchValue}.\n     *\n     * **Listen to value**: If you want to listen to changes in the value of the control, you can\n     * subscribe to the {@link AbstractControl.valueChanges} event.  You can also listen to\n     * {@link AbstractControl.statusChanges} to be notified when the validation status is\n     * re-calculated.\n     *\n     * ### Example\n     *\n     * {@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n     *\n     * * **npm package**: `@angular/forms`\n     *\n     * * **NgModule**: `ReactiveFormsModule`\n     *\n     *  @stable\n     */\n    var FormControlDirective = (function (_super) {\n        __extends$9(FormControlDirective, _super);\n        function FormControlDirective(validators, asyncValidators, valueAccessors) {\n            _super.call(this);\n            this.update = new EventEmitter();\n            this._rawValidators = validators || [];\n            this._rawAsyncValidators = asyncValidators || [];\n            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n        }\n        Object.defineProperty(FormControlDirective.prototype, \"isDisabled\", {\n            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n            enumerable: true,\n            configurable: true\n        });\n        FormControlDirective.prototype.ngOnChanges = function (changes) {\n            if (this._isControlChanged(changes)) {\n                setUpControl(this.form, this);\n                if (this.control.disabled && this.valueAccessor.setDisabledState) {\n                    this.valueAccessor.setDisabledState(true);\n                }\n                this.form.updateValueAndValidity({ emitEvent: false });\n            }\n            if (isPropertyUpdated(changes, this.viewModel)) {\n                this.form.setValue(this.model);\n                this.viewModel = this.model;\n            }\n        };\n        Object.defineProperty(FormControlDirective.prototype, \"path\", {\n            get: function () { return []; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlDirective.prototype, \"validator\", {\n            get: function () { return composeValidators(this._rawValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlDirective.prototype, \"asyncValidator\", {\n            get: function () {\n                return composeAsyncValidators(this._rawAsyncValidators);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlDirective.prototype, \"control\", {\n            get: function () { return this.form; },\n            enumerable: true,\n            configurable: true\n        });\n        FormControlDirective.prototype.viewToModelUpdate = function (newValue) {\n            this.viewModel = newValue;\n            this.update.emit(newValue);\n        };\n        FormControlDirective.prototype._isControlChanged = function (changes) {\n            return changes.hasOwnProperty('form');\n        };\n        FormControlDirective.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] },\n        ];\n        /** @nocollapse */\n        FormControlDirective.ctorParameters = [\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n        ];\n        FormControlDirective.propDecorators = {\n            'form': [{ type: _angular_core.Input, args: ['formControl',] },],\n            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n        };\n        return FormControlDirective;\n    }(NgControl));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$11 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var formDirectiveProvider$1 = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return FormGroupDirective; })\n    };\n    /**\n     * @whatItDoes Binds an existing {@link FormGroup} to a DOM element.\n     *\n     * @howToUse\n     *\n     * This directive accepts an existing {@link FormGroup} instance. It will then use this\n     * {@link FormGroup} instance to match any child {@link FormControl}, {@link FormGroup},\n     * and {@link FormArray} instances to child {@link FormControlName}, {@link FormGroupName},\n     * and {@link FormArrayName} directives.\n     *\n     * **Set value**: You can set the form's initial value when instantiating the\n     * {@link FormGroup}, or you can set it programmatically later using the {@link FormGroup}'s\n     * {@link AbstractControl.setValue} or {@link AbstractControl.patchValue} methods.\n     *\n     * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe\n     * to the {@link FormGroup}'s {@link AbstractControl.valueChanges} event.  You can also listen to\n     * its {@link AbstractControl.statusChanges} event to be notified when the validation status is\n     * re-calculated.\n     *\n     * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has\n     * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n     * submission event.\n     *\n     * ### Example\n     *\n     * In this example, we create form controls for first name and last name.\n     *\n     * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n     *\n     * **npm package**: `@angular/forms`\n     *\n     * **NgModule**: {@link ReactiveFormsModule}\n     *\n     *  @stable\n     */\n    var FormGroupDirective = (function (_super) {\n        __extends$11(FormGroupDirective, _super);\n        function FormGroupDirective(_validators, _asyncValidators) {\n            _super.call(this);\n            this._validators = _validators;\n            this._asyncValidators = _asyncValidators;\n            this._submitted = false;\n            this.directives = [];\n            this.form = null;\n            this.ngSubmit = new EventEmitter();\n        }\n        FormGroupDirective.prototype.ngOnChanges = function (changes) {\n            this._checkFormPresent();\n            if (changes.hasOwnProperty('form')) {\n                this._updateValidators();\n                this._updateDomValue();\n                this._updateRegistrations();\n            }\n        };\n        Object.defineProperty(FormGroupDirective.prototype, \"submitted\", {\n            get: function () { return this._submitted; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormGroupDirective.prototype, \"formDirective\", {\n            get: function () { return this; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormGroupDirective.prototype, \"control\", {\n            get: function () { return this.form; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormGroupDirective.prototype, \"path\", {\n            get: function () { return []; },\n            enumerable: true,\n            configurable: true\n        });\n        FormGroupDirective.prototype.addControl = function (dir) {\n            var ctrl = this.form.get(dir.path);\n            setUpControl(ctrl, dir);\n            ctrl.updateValueAndValidity({ emitEvent: false });\n            this.directives.push(dir);\n            return ctrl;\n        };\n        FormGroupDirective.prototype.getControl = function (dir) { return this.form.get(dir.path); };\n        FormGroupDirective.prototype.removeControl = function (dir) { ListWrapper.remove(this.directives, dir); };\n        FormGroupDirective.prototype.addFormGroup = function (dir) {\n            var ctrl = this.form.get(dir.path);\n            setUpFormContainer(ctrl, dir);\n            ctrl.updateValueAndValidity({ emitEvent: false });\n        };\n        FormGroupDirective.prototype.removeFormGroup = function (dir) { };\n        FormGroupDirective.prototype.getFormGroup = function (dir) { return this.form.get(dir.path); };\n        FormGroupDirective.prototype.addFormArray = function (dir) {\n            var ctrl = this.form.get(dir.path);\n            setUpFormContainer(ctrl, dir);\n            ctrl.updateValueAndValidity({ emitEvent: false });\n        };\n        FormGroupDirective.prototype.removeFormArray = function (dir) { };\n        FormGroupDirective.prototype.getFormArray = function (dir) { return this.form.get(dir.path); };\n        FormGroupDirective.prototype.updateModel = function (dir, value) {\n            var ctrl = this.form.get(dir.path);\n            ctrl.setValue(value);\n        };\n        FormGroupDirective.prototype.onSubmit = function ($event) {\n            this._submitted = true;\n            this.ngSubmit.emit($event);\n            return false;\n        };\n        FormGroupDirective.prototype.onReset = function () { this.resetForm(); };\n        FormGroupDirective.prototype.resetForm = function (value) {\n            if (value === void 0) { value = undefined; }\n            this.form.reset(value);\n            this._submitted = false;\n        };\n        /** @internal */\n        FormGroupDirective.prototype._updateDomValue = function () {\n            var _this = this;\n            this.directives.forEach(function (dir) {\n                var newCtrl = _this.form.get(dir.path);\n                if (dir._control !== newCtrl) {\n                    cleanUpControl(dir._control, dir);\n                    if (newCtrl)\n                        setUpControl(newCtrl, dir);\n                    dir._control = newCtrl;\n                }\n            });\n            this.form._updateTreeValidity({ emitEvent: false });\n        };\n        FormGroupDirective.prototype._updateRegistrations = function () {\n            var _this = this;\n            this.form._registerOnCollectionChange(function () { return _this._updateDomValue(); });\n            if (this._oldForm)\n                this._oldForm._registerOnCollectionChange(function () { });\n            this._oldForm = this.form;\n        };\n        FormGroupDirective.prototype._updateValidators = function () {\n            var sync = composeValidators(this._validators);\n            this.form.validator = Validators.compose([this.form.validator, sync]);\n            var async = composeAsyncValidators(this._asyncValidators);\n            this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);\n        };\n        FormGroupDirective.prototype._checkFormPresent = function () {\n            if (!this.form) {\n                ReactiveErrors.missingFormException();\n            }\n        };\n        FormGroupDirective.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[formGroup]',\n                        providers: [formDirectiveProvider$1],\n                        host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                        exportAs: 'ngForm'\n                    },] },\n        ];\n        /** @nocollapse */\n        FormGroupDirective.ctorParameters = [\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ];\n        FormGroupDirective.propDecorators = {\n            'form': [{ type: _angular_core.Input, args: ['formGroup',] },],\n            'ngSubmit': [{ type: _angular_core.Output },],\n        };\n        return FormGroupDirective;\n    }(ControlContainer));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$12 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var formGroupNameProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return FormGroupName; })\n    };\n    /**\n     * @whatItDoes Syncs a nested {@link FormGroup} to a DOM element.\n     *\n     * @howToUse\n     *\n     * This directive can only be used with a parent {@link FormGroupDirective} (selector:\n     * `[formGroup]`).\n     *\n     * It accepts the string name of the nested {@link FormGroup} you want to link, and\n     * will look for a {@link FormGroup} registered with that name in the parent\n     * {@link FormGroup} instance you passed into {@link FormGroupDirective}.\n     *\n     * Nested form groups can come in handy when you want to validate a sub-group of a\n     * form separately from the rest or when you'd like to group the values of certain\n     * controls into their own nested object.\n     *\n     * **Access the group**: You can access the associated {@link FormGroup} using the\n     * {@link AbstractControl.get} method. Ex: `this.form.get('name')`.\n     *\n     * You can also access individual controls within the group using dot syntax.\n     * Ex: `this.form.get('name.first')`\n     *\n     * **Get the value**: the `value` property is always synced and available on the\n     * {@link FormGroup}. See a full list of available properties in {@link AbstractControl}.\n     *\n     * **Set the value**: You can set an initial value for each child control when instantiating\n     * the {@link FormGroup}, or you can set it programmatically later using\n     * {@link AbstractControl.setValue} or {@link AbstractControl.patchValue}.\n     *\n     * **Listen to value**: If you want to listen to changes in the value of the group, you can\n     * subscribe to the {@link AbstractControl.valueChanges} event.  You can also listen to\n     * {@link AbstractControl.statusChanges} to be notified when the validation status is\n     * re-calculated.\n     *\n     * ### Example\n     *\n     * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n     *\n     * * **npm package**: `@angular/forms`\n     *\n     * * **NgModule**: `ReactiveFormsModule`\n     *\n     * @stable\n     */\n    var FormGroupName = (function (_super) {\n        __extends$12(FormGroupName, _super);\n        function FormGroupName(parent, validators, asyncValidators) {\n            _super.call(this);\n            this._parent = parent;\n            this._validators = validators;\n            this._asyncValidators = asyncValidators;\n        }\n        /** @internal */\n        FormGroupName.prototype._checkParentType = function () {\n            if (_hasInvalidParent(this._parent)) {\n                ReactiveErrors.groupParentException();\n            }\n        };\n        FormGroupName.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] },\n        ];\n        /** @nocollapse */\n        FormGroupName.ctorParameters = [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ];\n        FormGroupName.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['formGroupName',] },],\n        };\n        return FormGroupName;\n    }(AbstractFormGroupDirective));\n    var formArrayNameProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return FormArrayName; })\n    };\n    /**\n     * @whatItDoes Syncs a nested {@link FormArray} to a DOM element.\n     *\n     * @howToUse\n     *\n     * This directive is designed to be used with a parent {@link FormGroupDirective} (selector:\n     * `[formGroup]`).\n     *\n     * It accepts the string name of the nested {@link FormArray} you want to link, and\n     * will look for a {@link FormArray} registered with that name in the parent\n     * {@link FormGroup} instance you passed into {@link FormGroupDirective}.\n     *\n     * Nested form arrays can come in handy when you have a group of form controls but\n     * you're not sure how many there will be. Form arrays allow you to create new\n     * form controls dynamically.\n     *\n     * **Access the array**: You can access the associated {@link FormArray} using the\n     * {@link AbstractControl.get} method on the parent {@link FormGroup}.\n     * Ex: `this.form.get('cities')`.\n     *\n     * **Get the value**: the `value` property is always synced and available on the\n     * {@link FormArray}. See a full list of available properties in {@link AbstractControl}.\n     *\n     * **Set the value**: You can set an initial value for each child control when instantiating\n     * the {@link FormArray}, or you can set the value programmatically later using the\n     * {@link FormArray}'s {@link AbstractControl.setValue} or {@link AbstractControl.patchValue}\n     * methods.\n     *\n     * **Listen to value**: If you want to listen to changes in the value of the array, you can\n     * subscribe to the {@link FormArray}'s {@link AbstractControl.valueChanges} event.  You can also\n     * listen to its {@link AbstractControl.statusChanges} event to be notified when the validation\n     * status is re-calculated.\n     *\n     * **Add new controls**: You can add new controls to the {@link FormArray} dynamically by\n     * calling its {@link FormArray.push} method.\n     *  Ex: `this.form.get('cities').push(new FormControl());`\n     *\n     * ### Example\n     *\n     * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n     *\n     * * **npm package**: `@angular/forms`\n     *\n     * * **NgModule**: `ReactiveFormsModule`\n     *\n     * @stable\n     */\n    var FormArrayName = (function (_super) {\n        __extends$12(FormArrayName, _super);\n        function FormArrayName(parent, validators, asyncValidators) {\n            _super.call(this);\n            this._parent = parent;\n            this._validators = validators;\n            this._asyncValidators = asyncValidators;\n        }\n        FormArrayName.prototype.ngOnInit = function () {\n            this._checkParentType();\n            this.formDirective.addFormArray(this);\n        };\n        FormArrayName.prototype.ngOnDestroy = function () {\n            if (this.formDirective) {\n                this.formDirective.removeFormArray(this);\n            }\n        };\n        Object.defineProperty(FormArrayName.prototype, \"control\", {\n            get: function () { return this.formDirective.getFormArray(this); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"formDirective\", {\n            get: function () {\n                return this._parent ? this._parent.formDirective : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"path\", {\n            get: function () { return controlPath(this.name, this._parent); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"validator\", {\n            get: function () { return composeValidators(this._validators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"asyncValidator\", {\n            get: function () { return composeAsyncValidators(this._asyncValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        FormArrayName.prototype._checkParentType = function () {\n            if (_hasInvalidParent(this._parent)) {\n                ReactiveErrors.arrayParentException();\n            }\n        };\n        FormArrayName.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] },\n        ];\n        /** @nocollapse */\n        FormArrayName.ctorParameters = [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ];\n        FormArrayName.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['formArrayName',] },],\n        };\n        return FormArrayName;\n    }(ControlContainer));\n    function _hasInvalidParent(parent) {\n        return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n            !(parent instanceof FormArrayName);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$10 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var controlNameBinding = {\n        provide: NgControl,\n        useExisting: _angular_core.forwardRef(function () { return FormControlName; })\n    };\n    /**\n     * @whatItDoes  Syncs a {@link FormControl} in an existing {@link FormGroup} to a form control\n     * element by name.\n     *\n     * In other words, this directive ensures that any values written to the {@link FormControl}\n     * instance programmatically will be written to the DOM element (model -> view). Conversely,\n     * any values written to the DOM element through user input will be reflected in the\n     * {@link FormControl} instance (view -> model).\n     *\n     * @howToUse\n     *\n     * This directive is designed to be used with a parent {@link FormGroupDirective} (selector:\n     * `[formGroup]`).\n     *\n     * It accepts the string name of the {@link FormControl} instance you want to\n     * link, and will look for a {@link FormControl} registered with that name in the\n     * closest {@link FormGroup} or {@link FormArray} above it.\n     *\n     * **Access the control**: You can access the {@link FormControl} associated with\n     * this directive by using the {@link AbstractControl.get} method.\n     * Ex: `this.form.get('first');`\n     *\n     * **Get value**: the `value` property is always synced and available on the {@link FormControl}.\n     * See a full list of available properties in {@link AbstractControl}.\n     *\n     *  **Set value**: You can set an initial value for the control when instantiating the\n     *  {@link FormControl}, or you can set it programmatically later using\n     *  {@link AbstractControl.setValue} or {@link AbstractControl.patchValue}.\n     *\n     * **Listen to value**: If you want to listen to changes in the value of the control, you can\n     * subscribe to the {@link AbstractControl.valueChanges} event.  You can also listen to\n     * {@link AbstractControl.statusChanges} to be notified when the validation status is\n     * re-calculated.\n     *\n     * ### Example\n     *\n     * In this example, we create form controls for first name and last name.\n     *\n     * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n     *\n     * To see `formControlName` examples with different form control types, see:\n     *\n     * * Radio buttons: {@link RadioControlValueAccessor}\n     * * Selects: {@link SelectControlValueAccessor}\n     *\n     * **npm package**: `@angular/forms`\n     *\n     * **NgModule**: {@link ReactiveFormsModule}\n     *\n     *  @stable\n     */\n    var FormControlName = (function (_super) {\n        __extends$10(FormControlName, _super);\n        function FormControlName(parent, validators, asyncValidators, valueAccessors) {\n            _super.call(this);\n            this._added = false;\n            this.update = new EventEmitter();\n            this._parent = parent;\n            this._rawValidators = validators || [];\n            this._rawAsyncValidators = asyncValidators || [];\n            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n        }\n        Object.defineProperty(FormControlName.prototype, \"isDisabled\", {\n            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n            enumerable: true,\n            configurable: true\n        });\n        FormControlName.prototype.ngOnChanges = function (changes) {\n            if (!this._added)\n                this._setUpControl();\n            if (isPropertyUpdated(changes, this.viewModel)) {\n                this.viewModel = this.model;\n                this.formDirective.updateModel(this, this.model);\n            }\n        };\n        FormControlName.prototype.ngOnDestroy = function () {\n            if (this.formDirective) {\n                this.formDirective.removeControl(this);\n            }\n        };\n        FormControlName.prototype.viewToModelUpdate = function (newValue) {\n            this.viewModel = newValue;\n            this.update.emit(newValue);\n        };\n        Object.defineProperty(FormControlName.prototype, \"path\", {\n            get: function () { return controlPath(this.name, this._parent); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"formDirective\", {\n            get: function () { return this._parent ? this._parent.formDirective : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"validator\", {\n            get: function () { return composeValidators(this._rawValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"asyncValidator\", {\n            get: function () {\n                return composeAsyncValidators(this._rawAsyncValidators);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"control\", {\n            get: function () { return this._control; },\n            enumerable: true,\n            configurable: true\n        });\n        FormControlName.prototype._checkParentType = function () {\n            if (!(this._parent instanceof FormGroupName) &&\n                this._parent instanceof AbstractFormGroupDirective) {\n                ReactiveErrors.ngModelGroupException();\n            }\n            else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n                !(this._parent instanceof FormArrayName)) {\n                ReactiveErrors.controlParentException();\n            }\n        };\n        FormControlName.prototype._setUpControl = function () {\n            this._checkParentType();\n            this._control = this.formDirective.addControl(this);\n            if (this.control.disabled && this.valueAccessor.setDisabledState) {\n                this.valueAccessor.setDisabledState(true);\n            }\n            this._added = true;\n        };\n        FormControlName.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] },\n        ];\n        /** @nocollapse */\n        FormControlName.ctorParameters = [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n        ];\n        FormControlName.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['formControlName',] },],\n            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n        };\n        return FormControlName;\n    }(NgControl));\n\n    var REQUIRED_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return RequiredValidator; }),\n        multi: true\n    };\n    /**\n     * A Directive that adds the `required` validator to any controls marked with the\n     * `required` attribute, via the {@link NG_VALIDATORS} binding.\n     *\n     * ### Example\n     *\n     * ```\n     * <input name=\"fullName\" ngModel required>\n     * ```\n     *\n     * @stable\n     */\n    var RequiredValidator = (function () {\n        function RequiredValidator() {\n        }\n        Object.defineProperty(RequiredValidator.prototype, \"required\", {\n            get: function () { return this._required; },\n            set: function (value) {\n                this._required = isPresent(value) && \"\" + value !== 'false';\n                if (this._onChange)\n                    this._onChange();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        RequiredValidator.prototype.validate = function (c) {\n            return this.required ? Validators.required(c) : null;\n        };\n        RequiredValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n        RequiredValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[required][formControlName],[required][formControl],[required][ngModel]',\n                        providers: [REQUIRED_VALIDATOR],\n                        host: { '[attr.required]': 'required? \"\" : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        RequiredValidator.ctorParameters = [];\n        RequiredValidator.propDecorators = {\n            'required': [{ type: _angular_core.Input },],\n        };\n        return RequiredValidator;\n    }());\n    /**\n     * Provider which adds {@link MinLengthValidator} to {@link NG_VALIDATORS}.\n     *\n     * ## Example:\n     *\n     * {@example common/forms/ts/validators/validators.ts region='min'}\n     */\n    var MIN_LENGTH_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return MinLengthValidator; }),\n        multi: true\n    };\n    /**\n     * A directive which installs the {@link MinLengthValidator} for any `formControlName`,\n     * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n     *\n     * @stable\n     */\n    var MinLengthValidator = (function () {\n        function MinLengthValidator() {\n        }\n        MinLengthValidator.prototype._createValidator = function () {\n            this._validator = Validators.minLength(parseInt(this.minlength, 10));\n        };\n        MinLengthValidator.prototype.ngOnChanges = function (changes) {\n            if (changes['minlength']) {\n                this._createValidator();\n                if (this._onChange)\n                    this._onChange();\n            }\n        };\n        MinLengthValidator.prototype.validate = function (c) {\n            return isPresent(this.minlength) ? this._validator(c) : null;\n        };\n        MinLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n        MinLengthValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n                        providers: [MIN_LENGTH_VALIDATOR],\n                        host: { '[attr.minlength]': 'minlength? minlength : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        MinLengthValidator.ctorParameters = [];\n        MinLengthValidator.propDecorators = {\n            'minlength': [{ type: _angular_core.Input },],\n        };\n        return MinLengthValidator;\n    }());\n    /**\n     * Provider which adds {@link MaxLengthValidator} to {@link NG_VALIDATORS}.\n     *\n     * ## Example:\n     *\n     * {@example common/forms/ts/validators/validators.ts region='max'}\n     */\n    var MAX_LENGTH_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return MaxLengthValidator; }),\n        multi: true\n    };\n    /**\n     * A directive which installs the {@link MaxLengthValidator} for any `formControlName,\n     * `formControl`,\n     * or control with `ngModel` that also has a `maxlength` attribute.\n     *\n     * @stable\n     */\n    var MaxLengthValidator = (function () {\n        function MaxLengthValidator() {\n        }\n        MaxLengthValidator.prototype._createValidator = function () {\n            this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n        };\n        MaxLengthValidator.prototype.ngOnChanges = function (changes) {\n            if (changes['maxlength']) {\n                this._createValidator();\n                if (this._onChange)\n                    this._onChange();\n            }\n        };\n        MaxLengthValidator.prototype.validate = function (c) {\n            return isPresent(this.maxlength) ? this._validator(c) : null;\n        };\n        MaxLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n        MaxLengthValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n                        providers: [MAX_LENGTH_VALIDATOR],\n                        host: { '[attr.maxlength]': 'maxlength? maxlength : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        MaxLengthValidator.ctorParameters = [];\n        MaxLengthValidator.propDecorators = {\n            'maxlength': [{ type: _angular_core.Input },],\n        };\n        return MaxLengthValidator;\n    }());\n    var PATTERN_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return PatternValidator; }),\n        multi: true\n    };\n    /**\n     * A Directive that adds the `pattern` validator to any controls marked with the\n     * `pattern` attribute, via the {@link NG_VALIDATORS} binding. Uses attribute value\n     * as the regex to validate Control value against.  Follows pattern attribute\n     * semantics; i.e. regex must match entire Control value.\n     *\n     * ### Example\n     *\n     * ```\n     * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n     * ```\n     * @stable\n     */\n    var PatternValidator = (function () {\n        function PatternValidator() {\n        }\n        PatternValidator.prototype._createValidator = function () { this._validator = Validators.pattern(this.pattern); };\n        PatternValidator.prototype.ngOnChanges = function (changes) {\n            if (changes['pattern']) {\n                this._createValidator();\n                if (this._onChange)\n                    this._onChange();\n            }\n        };\n        PatternValidator.prototype.validate = function (c) {\n            return isPresent(this.pattern) ? this._validator(c) : null;\n        };\n        PatternValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n        PatternValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n                        providers: [PATTERN_VALIDATOR],\n                        host: { '[attr.pattern]': 'pattern? pattern : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        PatternValidator.ctorParameters = [];\n        PatternValidator.propDecorators = {\n            'pattern': [{ type: _angular_core.Input },],\n        };\n        return PatternValidator;\n    }());\n\n    /**\n     * @whatItDoes Creates an {@link AbstractControl} from a user-specified configuration.\n     *\n     * It is essentially syntactic sugar that shortens the `new FormGroup()`,\n     * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger\n     * forms.\n     *\n     * @howToUse\n     *\n     * To use, inject `FormBuilder` into your component class. You can then call its methods\n     * directly.\n     *\n     * {@example forms/ts/formBuilder/form_builder_example.ts region='Component'}\n     *\n     *  * **npm package**: `@angular/forms`\n     *\n     *  * **NgModule**: {@link ReactiveFormsModule}\n     *\n     * @stable\n     */\n    var FormBuilder = (function () {\n        function FormBuilder() {\n        }\n        /**\n         * Construct a new {@link FormGroup} with the given map of configuration.\n         * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n         *\n         * See the {@link FormGroup} constructor for more details.\n         */\n        FormBuilder.prototype.group = function (controlsConfig, extra) {\n            if (extra === void 0) { extra = null; }\n            var controls = this._reduceControls(controlsConfig);\n            var validator = isPresent(extra) ? extra['validator'] : null;\n            var asyncValidator = isPresent(extra) ? extra['asyncValidator'] : null;\n            return new FormGroup(controls, validator, asyncValidator);\n        };\n        /**\n         * Construct a new {@link FormControl} with the given `formState`,`validator`, and\n         * `asyncValidator`.\n         *\n         * `formState` can either be a standalone value for the form control or an object\n         * that contains both a value and a disabled status.\n         *\n         */\n        FormBuilder.prototype.control = function (formState, validator, asyncValidator) {\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            return new FormControl(formState, validator, asyncValidator);\n        };\n        /**\n         * Construct a {@link FormArray} from the given `controlsConfig` array of\n         * configuration, with the given optional `validator` and `asyncValidator`.\n         */\n        FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {\n            var _this = this;\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            var controls = controlsConfig.map(function (c) { return _this._createControl(c); });\n            return new FormArray(controls, validator, asyncValidator);\n        };\n        /** @internal */\n        FormBuilder.prototype._reduceControls = function (controlsConfig) {\n            var _this = this;\n            var controls = {};\n            Object.keys(controlsConfig).forEach(function (controlName) {\n                controls[controlName] = _this._createControl(controlsConfig[controlName]);\n            });\n            return controls;\n        };\n        /** @internal */\n        FormBuilder.prototype._createControl = function (controlConfig) {\n            if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n                controlConfig instanceof FormArray) {\n                return controlConfig;\n            }\n            else if (Array.isArray(controlConfig)) {\n                var value = controlConfig[0];\n                var validator = controlConfig.length > 1 ? controlConfig[1] : null;\n                var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\n                return this.control(value, validator, asyncValidator);\n            }\n            else {\n                return this.control(controlConfig);\n            }\n        };\n        FormBuilder.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        FormBuilder.ctorParameters = [];\n        return FormBuilder;\n    }());\n\n    var SHARED_FORM_DIRECTIVES = [\n        NgSelectOption, NgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor,\n        CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor,\n        RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator,\n        MinLengthValidator, MaxLengthValidator, PatternValidator\n    ];\n    var TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];\n    var REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n    /**\n     * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n     */\n    var InternalFormsSharedModule = (function () {\n        function InternalFormsSharedModule() {\n        }\n        InternalFormsSharedModule.decorators = [\n            { type: _angular_core.NgModule, args: [{ declarations: SHARED_FORM_DIRECTIVES, exports: SHARED_FORM_DIRECTIVES },] },\n        ];\n        /** @nocollapse */\n        InternalFormsSharedModule.ctorParameters = [];\n        return InternalFormsSharedModule;\n    }());\n\n    /**\n     * The ng module for forms.\n     * @stable\n     */\n    var FormsModule = (function () {\n        function FormsModule() {\n        }\n        FormsModule.decorators = [\n            { type: _angular_core.NgModule, args: [{\n                        declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n                        providers: [RadioControlRegistry],\n                        exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n                    },] },\n        ];\n        /** @nocollapse */\n        FormsModule.ctorParameters = [];\n        return FormsModule;\n    }());\n    /**\n     * The ng module for reactive forms.\n     * @stable\n     */\n    var ReactiveFormsModule = (function () {\n        function ReactiveFormsModule() {\n        }\n        ReactiveFormsModule.decorators = [\n            { type: _angular_core.NgModule, args: [{\n                        declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n                        providers: [FormBuilder, RadioControlRegistry],\n                        exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n                    },] },\n        ];\n        /** @nocollapse */\n        ReactiveFormsModule.ctorParameters = [];\n        return ReactiveFormsModule;\n    }());\n\n    exports.AbstractControlDirective = AbstractControlDirective;\n    exports.AbstractFormGroupDirective = AbstractFormGroupDirective;\n    exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;\n    exports.ControlContainer = ControlContainer;\n    exports.NG_VALUE_ACCESSOR = NG_VALUE_ACCESSOR;\n    exports.DefaultValueAccessor = DefaultValueAccessor;\n    exports.NgControl = NgControl;\n    exports.NgControlStatus = NgControlStatus;\n    exports.NgControlStatusGroup = NgControlStatusGroup;\n    exports.NgForm = NgForm;\n    exports.NgModel = NgModel;\n    exports.NgModelGroup = NgModelGroup;\n    exports.RadioControlValueAccessor = RadioControlValueAccessor;\n    exports.FormControlDirective = FormControlDirective;\n    exports.FormControlName = FormControlName;\n    exports.FormGroupDirective = FormGroupDirective;\n    exports.FormArrayName = FormArrayName;\n    exports.FormGroupName = FormGroupName;\n    exports.NgSelectOption = NgSelectOption;\n    exports.SelectControlValueAccessor = SelectControlValueAccessor;\n    exports.SelectMultipleControlValueAccessor = SelectMultipleControlValueAccessor;\n    exports.MaxLengthValidator = MaxLengthValidator;\n    exports.MinLengthValidator = MinLengthValidator;\n    exports.PatternValidator = PatternValidator;\n    exports.RequiredValidator = RequiredValidator;\n    exports.FormBuilder = FormBuilder;\n    exports.AbstractControl = AbstractControl;\n    exports.FormArray = FormArray;\n    exports.FormControl = FormControl;\n    exports.FormGroup = FormGroup;\n    exports.NG_ASYNC_VALIDATORS = NG_ASYNC_VALIDATORS;\n    exports.NG_VALIDATORS = NG_VALIDATORS;\n    exports.Validators = Validators;\n    exports.FormsModule = FormsModule;\n    exports.ReactiveFormsModule = ReactiveFormsModule;\n\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@angular/forms/bundles/forms.umd.js\n// module id = 30\n// module chunks = 1","\"use strict\";\nvar root_1 = require('../util/root');\n/**\n * @param PromiseCtor\n * @return {Promise<T>}\n * @method toPromise\n * @owner Observable\n */\nfunction toPromise(PromiseCtor) {\n    var _this = this;\n    if (!PromiseCtor) {\n        if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n            PromiseCtor = root_1.root.Rx.config.Promise;\n        }\n        else if (root_1.root.Promise) {\n            PromiseCtor = root_1.root.Promise;\n        }\n    }\n    if (!PromiseCtor) {\n        throw new Error('no Promise impl found');\n    }\n    return new PromiseCtor(function (resolve, reject) {\n        var value;\n        _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n    });\n}\nexports.toPromise = toPromise;\n//# sourceMappingURL=toPromise.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/operator/toPromise.js\n// module id = 31\n// module chunks = 1","\"use strict\";\nvar PromiseObservable_1 = require('./PromiseObservable');\nexports.fromPromise = PromiseObservable_1.PromiseObservable.create;\n//# sourceMappingURL=fromPromise.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/observable/fromPromise.js\n// module id = 32\n// module chunks = 1","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar PromiseObservable = (function (_super) {\n    __extends(PromiseObservable, _super);\n    function PromiseObservable(promise, scheduler) {\n        _super.call(this);\n        this.promise = promise;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Converts a Promise to an Observable.\n     *\n     * <span class=\"informal\">Returns an Observable that just emits the Promise's\n     * resolved value, then completes.</span>\n     *\n     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n     * Observable. If the Promise resolves with a value, the output Observable\n     * emits that resolved value as a `next`, and then completes. If the Promise\n     * is rejected, then the output Observable emits the corresponding Error.\n     *\n     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     *\n     * @param {Promise<T>} promise The promise to be converted.\n     * @param {Scheduler} [scheduler] An optional Scheduler to use for scheduling\n     * the delivery of the resolved value (or the rejection).\n     * @return {Observable<T>} An Observable which wraps the Promise.\n     * @static true\n     * @name fromPromise\n     * @owner Observable\n     */\n    PromiseObservable.create = function (promise, scheduler) {\n        return new PromiseObservable(promise, scheduler);\n    };\n    PromiseObservable.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var promise = this.promise;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    subscriber.next(this.value);\n                    subscriber.complete();\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.next(value);\n                        subscriber.complete();\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.error(err);\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root_1.root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n        else {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root_1.root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n    };\n    return PromiseObservable;\n}(Observable_1.Observable));\nexports.PromiseObservable = PromiseObservable;\nfunction dispatchNext(arg) {\n    var value = arg.value, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n    }\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.error(err);\n    }\n}\n//# sourceMappingURL=PromiseObservable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/observable/PromiseObservable.js\n// module id = 33\n// module chunks = 1","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {ExpanderModule} from '../expander/expander.module';\nimport {SearchFieldsComponent} from './search-fields.component';\nimport {SearchOrderByComponent} from './search-order-by.component';\nimport {SearchCriteriaComponent} from './search-criteria.component';\nimport {SearchComponent} from './search.component';\n\n\n@NgModule({\n    imports: [CommonModule, FormsModule, ExpanderModule],\n    declarations: [\n        SearchComponent,\n        SearchCriteriaComponent,\n        SearchOrderByComponent,\n        SearchFieldsComponent\n    ],\n    exports: [SearchComponent]\n})\nexport class SearchModule {}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/search/search.module.ts","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ExpanderComponent} from './expander.component';\n\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: [ExpanderComponent],\n    exports: [ExpanderComponent]\n})\nexport class ExpanderModule {}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/expander/expander.module.ts","import {Component, Input, Output, EventEmitter} from '@angular/core';\n\n// Component\n@Component({\n    selector: 'js_expander',\n    template: `\n    <a [ngClass]=\"['no-user-select', 'expander', customClass]\"\n       (click)=\"toggleAction($event)\">\n        <i *ngIf=\"hasIcon\" [ngClass]=\"['fa', (isExpanded ? 'fa-angle-down' : 'fa-angle-right')]\"></i>\n        <span [innerHTML]=\"label\"></span></a>\n    `\n})\nexport class ExpanderComponent\n{\n    @Input() isExpanded: boolean = false;\n    @Input() label: string;\n    @Input() hasIcon: boolean = true;\n    @Input() customClass: string = ''; // customClass instead of class because is a reserved word\n    @Output() onChange = new EventEmitter();\n\n    /**\n     * Toggle expanded\n     * @param $event\n     */\n    protected toggleAction($event): void\n    {\n        $event.preventDefault();\n        this.isExpanded = !this.isExpanded;\n        this.onChange.emit(this.isExpanded);\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/expander/expander.component.ts","import {Component, Inject, ElementRef, Input, Optional} from '@angular/core';\nimport {DataService} from '../data-service/data.service';\n\n// Component\n@Component({\n    selector: 'js_searchFields',\n    template: `\n    <js_expander [label]=\"'Fields'\" [hasIcon]=\"false\" [customClass]=\"'action'\" (onChange)=\"toggleIsExpanded($event, 'fields')\"></js_expander>\n    <div [hidden]=\"!_isExpanded\" class=\"col-xs-12 col-sm-12 white-dropdown search-fields\">\n        <select multiple size=\"6\" [(ngModel)]=\"_search['fields']\" class=\"form-control\">\n            <template ngFor let-field [ngForOf]=\"_fields\">\n                <option *ngIf=\"!_helperService.inArray(_fieldsMetadata[field]['type'], _deniedTypes)\"\n                        value=\"{{field}}\">{{_fieldsMetadata[field]['label']}}</option>\n            </template>\n        </select>\n    </div>\n    `,\n    host: {\n        '(document:click)': 'onDocumentClick($event)',\n    }\n})\nexport class SearchFieldsComponent {\n    // Injector to get dependencies. Used when injector comes from child component (like accordion)\n    @Input() injector: any = null;\n\n    // Denied types. Doesn't make sense to show this filed types.\n    protected _deniedTypes: string[] = ['password'];\n    protected _search: any;\n    protected _fields: any;\n    protected _fieldsMetadata: any;\n    protected _isExpanded: boolean = false;\n\n    constructor(\n        protected _elementRef: ElementRef,\n        @Inject('HelperService') private _helperService: any,\n        @Optional() @Inject('DataService') protected _dataService: any\n    ) {}\n\n    /**\n     * Toggle isExpanded\n     * @param $event (value returned by expander directive)\n     */\n    protected toggleIsExpanded($event): void\n    {\n        this._isExpanded = !this._isExpanded;\n    }\n\n    /**\n     * Host event\n     * @param $event\n     */\n    protected onDocumentClick($event): void\n    {\n        if (!this._elementRef.nativeElement.contains($event.target)) {\n            this._isExpanded = false;\n        }\n    }\n\n    /**\n     * Lifecycle callback\n     */\n    ngOnInit()\n    {\n        // If injector is provided, override dependencies\n        if (this.injector) {\n            this._dataService = this.injector.get('DataService');\n        }\n\n        this._search = this._dataService.getCandidateSearch();\n        this._fields = (this._dataService.getFields('view') || []);\n        this._fieldsMetadata = (this._dataService.getFields('metadata') || {});\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/search/search-fields.component.ts","import {Component, Inject, ElementRef, Input, Optional} from '@angular/core';\nimport {DataService} from '../data-service/data.service';\n\n// Component\n@Component({\n    selector: 'js_searchOrderBy',\n    template: `\n    <js_expander [label]=\"'Order'\" [hasIcon]=\"false\" [customClass]=\"'action'\" (onChange)=\"toggleIsExpanded($event, 'fields')\"></js_expander>\n    <div [hidden]=\"!_isExpanded\" class=\"col-xs-12 col-sm-12 white-dropdown search-order-by\">\n        <template ngFor let-orderBy [ngForOf]=\"_orderByArray\" let-i=\"index\">\n            <div class=\"col-sm-6 controller\">\n                <div class=\"select\">\n                    <select [(ngModel)]=\"orderBy['field']\" class=\"form-control\">\n                        <template ngFor let-field [ngForOf]=\"_fields\">\n                            <option *ngIf=\"!_helperService.inArray(_fieldsMetadata[field]['type'], _deniedTypes) && !_fieldsMetadata[field]['isObject']\"\n                                    value=\"{{field}}\">{{_fieldsMetadata[field]['label']}}</option>\n                        </template>\n                    </select>\n                    <select [(ngModel)]=\"orderBy['value']\" class=\"form-control\">\n                        <option *ngFor=\"let value of [{key: 'ASC', label: 'Asc'}, {key: 'DESC', label: 'Desc'}]\"\n                                value=\"{{value['key']}}\">{{value['label']}}</option>\n                    </select>\n                </div>\n                <div class=\"actions\">\n                    <a *ngIf=\"_orderByArray.length > 1\" class=\"fa fa-trash-o\" (click)=\"del($event, i)\"></a>\n                    <a *ngIf=\"(i+1) == _orderByArray.length\" class=\"fa fa-plus\" (click)=\"add($event)\"></a>\n                </div>\n            </div>\n        </template>\n    </div>\n    `,\n    host: {\n        '(document:click)': 'onDocumentClick($event)',\n    }\n})\nexport class SearchOrderByComponent {\n    // Injector to get dependencies. Used when injector comes from child component (like accordion)\n    @Input() injector: any = null;\n\n    // Denied types. Doesn't make sense to order by this filed types.\n    protected _deniedTypes: string[] = ['file', 'icon', 'img', 'password', 'avatar'];\n    protected _orderByArray: any;\n    protected _fields: any;\n    protected _fieldsMetadata: any;\n    protected _isExpanded: boolean = false;\n\n    constructor(\n        protected _elementRef: ElementRef,\n        @Inject('HelperService') private _helperService: any,\n        @Optional() @Inject('DataService') protected _dataService: any\n    ) {}\n\n    /**\n     * Add order by\n     * @param $event\n     */\n    protected add($event = null): void\n    {\n        if ($event) {\n            $event.preventDefault();\n            $event.stopPropagation();\n        }\n\n        this._orderByArray.push({\n            field: (this._fields[0] ? this._fields[0]['key'] : null),\n            value: 'ASC',\n        });\n    }\n\n    /**\n     * Delete order by\n     * @param $event\n     * @param index\n     */\n    protected del($event, index: number): void\n    {\n        $event.preventDefault();\n        $event.stopPropagation();\n        this._orderByArray.splice(index, 1);\n    }\n\n    /**\n     * Toggle isExpanded\n     * @param $event (value returned by expander directive)\n     */\n    protected toggleIsExpanded($event): void\n    {\n        this._isExpanded = !this._isExpanded;\n    }\n\n    /**\n     * Host event\n     * @param $event\n     */\n    protected onDocumentClick($event): void\n    {\n        if (!this._elementRef.nativeElement.contains($event.target)) {\n            this._isExpanded = false;\n        }\n    }\n\n    /**\n     * Lifecycle callback\n     */\n    ngOnInit()\n    {\n        // If injector is provided, override dependencies\n        if (this.injector) {\n            this._dataService = this.injector.get('DataService');\n        }\n\n        this._orderByArray = this._dataService.getCandidateSearchAttr('orderBy');\n        this._fields = (this._dataService.getFields('view') || []);\n        this._fieldsMetadata = (this._dataService.getFields('metadata') || {});\n\n        if (this._orderByArray.length < 1) {\n            this.add();\n        }\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/search/search-order-by.component.ts","import {Component, Inject, ElementRef, Input, Optional} from '@angular/core';\nimport {DataService} from '../data-service/data.service';\n\n\n/**\n * Class provider for search criteria expressions and default values\n */\nexport class SearchCriteriaMap {\n    // Expressions mapping.\n    protected _exprMap = [\n        { key: 'lrlike', label: '?' },\n        { key: 'eq', label: '=' },\n        { key: 'gte', label: '>=' },\n        { key: 'lte', label: '<=' }\n    ];\n\n    // Default value mapping for field type.\n    protected _defaultValueMap = {\n        'date': ((new Date()).toISOString().slice(0,10)), // Current date (yyyy-mm-dd)\n        'boolean': 1\n    };\n\n    // Default expression mapping for field type.\n    protected _defaultExprMap = {\n        'text': 'lrlike',\n        'code': 'lrlike',\n        'date': 'gte',\n        'boolean': 'eq'\n    };\n\n    /**\n     * Get expressions mapping\n     * @returns {any}\n     */\n    public getExprMap(): any\n    {\n        return this._exprMap;\n    }\n\n    /**\n     * Get default expression\n     * @param type\n     * @returns {any}\n     */\n    public getDefaultExpr(type: string = null): string\n    {\n        return ((type && this._defaultExprMap[type]) ? this._defaultExprMap[type] : 'eq');\n    }\n\n    /**\n     * Get default value\n     * @param type\n     * @returns {any}\n     */\n    public getDefaultValue(type: string = null): string\n    {\n        return ((type && this._defaultValueMap[type]) ? this._defaultValueMap[type] : '');\n    }\n}\n\n// Component\n@Component({\n    selector: 'js_searchCriteria',\n    template: `\n    <js_expander [label]=\"'Filter'\" [hasIcon]=\"false\" [customClass]=\"'action'\" (onChange)=\"toggleIsExpanded($event, 'fields')\"></js_expander>\n    <div [hidden]=\"!_isExpanded\" class=\"col-xs-12 col-sm-12 white-dropdown search-criteria\">\n        <template ngFor let-criteria [ngForOf]=\"_criteriaArr\" let-i=\"index\">\n            <div class=\"col-sm-6 controller\">\n                <div class=\"select\">\n                    <select [(ngModel)]=\"criteria['field']\"\n                            (change)=\"onFieldChange($event, criteria)\"\n                            class=\"form-control\">\n                        <template ngFor let-field [ngForOf]=\"_fields\">\n                            <option *ngIf=\"!_helperService.inArray(_fieldsMetadata[field]['type'], _deniedTypes) && !_fieldsMetadata[field]['isObject']\"\n                                    value=\"{{field}}\">{{_fieldsMetadata[field]['label']}}</option>\n                        </template>\n                    </select>\n                    <!-- ng switch should be here -->\n                    <template [ngIf]=\"(_fieldsMetadata[criteria['field']]) && (_fieldsMetadata[criteria['field']]['type'] == 'boolean')\">\n                        <select [(ngModel)]=\"criteria['value']\"\n                                class=\"form-control\">\n                            <option *ngFor=\"let value of [{key: 1, label: 'Yes'}, {key: 0, label: 'No'}]\"\n                                    value=\"{{value['key']}}\">{{value['label']}}</option>\n                        </select>\n                    </template>\n                    <template [ngIf]=\"(!_fieldsMetadata[criteria['field']]) || (_fieldsMetadata[criteria['field']]['type'] != 'boolean')\">\n                        <select [(ngModel)]=\"criteria['expr']\"\n                                class=\"form-control\">\n                            <option *ngFor=\"let expr of _searchCriteriaMap.getExprMap()\"\n                                    value=\"{{expr['key']}}\">{{expr['label']}}</option>\n                        </select>\n                        <input [(ngModel)]=\"criteria['value']\"\n                               class=\"form-control\" type=\"text\">\n                    </template>\n                </div>\n                <div class=\"actions\">\n                    <a *ngIf=\"_criteriaArr.length > 1\" class=\"fa fa-trash-o\" (click)=\"del($event, i)\"></a>\n                    <a *ngIf=\"(i+1) == _criteriaArr.length\" class=\"fa fa-plus\" (click)=\"add($event)\"></a>\n                </div>\n            </div>\n        </template>\n    </div>\n    `,\n    host: {\n        '(document:click)': 'onDocumentClick($event)',\n    }\n})\nexport class SearchCriteriaComponent {\n    // Injector to get dependencies. Used when injector comes from child component (like accordion)\n    @Input() injector: any = null;\n\n    // Denied types. Doesn't make sense to search for this filed types.\n    protected _deniedTypes: string[] = ['file', 'icon', 'img', 'password', 'avatar'];\n    protected _criteriaArr: any;\n    protected _fields: any;\n    protected _fieldsMetadata: any;\n    protected _isExpanded: boolean = false;\n    protected _searchCriteriaMap: SearchCriteriaMap;\n\n    constructor(\n        protected _elementRef: ElementRef,\n        @Inject('HelperService') private _helperService: any,\n        @Optional() @Inject('DataService') protected _dataService: any\n    ) {\n        this._searchCriteriaMap = new SearchCriteriaMap();\n    }\n\n    /**\n     * Set default values\n     * @param criteria\n     * @param field (field to override criteria['field'], because select change event was not update it yet)\n     */\n    protected setDefaults(criteria: any, field: string = null): void\n    {\n        field = (field || criteria['field']);\n        if (field in this._fieldsMetadata) {\n            criteria['expr'] = this._searchCriteriaMap.getDefaultExpr(this._fieldsMetadata[field]['type']);\n            criteria['value'] = this._searchCriteriaMap.getDefaultValue(this._fieldsMetadata[field]['type']);\n        }\n    }\n\n    /**\n     * Add criteria\n     * @param $event\n     */\n    protected add($event = null): void\n    {\n        if ($event) {\n            $event.preventDefault();\n            $event.stopPropagation();\n        }\n\n        let criteria = {\n            field: (this._fields[0] ? this._fields[0] : null),\n            expr: null,\n            value: null\n        };\n\n        this.setDefaults(criteria, null);\n\n        this._criteriaArr.push(criteria);\n    }\n\n    /**\n     * Delete criteria\n     * @param $event\n     * @param index\n     */\n    protected del($event, index: number): void\n    {\n        $event.preventDefault();\n        $event.stopPropagation();\n        this._criteriaArr.splice(index, 1);\n    }\n\n    /**\n     * Toggle isExpanded\n     * @param $event (value returned by expander directive)\n     */\n    protected toggleIsExpanded($event): void\n    {\n        this._isExpanded = !this._isExpanded;\n    }\n\n    /**\n     * On field change\n     * @param $event\n     * @param criteria\n     */\n    protected onFieldChange($event, criteria: any): void\n    {\n        // Field to override criteria['field'], because select change event was not update it yet\n        let field = $event.target.value || null;\n        this.setDefaults(criteria, field);\n    }\n\n    /**\n     * Host event\n     * @param $event\n     */\n    protected onDocumentClick($event): void\n    {\n        if (!this._elementRef.nativeElement.contains($event.target)) {\n            this._isExpanded = false;\n        }\n    }\n\n    /**\n     * Lifecycle callback\n     */\n    ngOnInit()\n    {\n        // If injector is provided, override dependencies\n        if (this.injector) {\n            this._dataService = this.injector.get('DataService');\n        }\n\n        this._criteriaArr = this._dataService.getCandidateSearchAttr('criteria');\n        this._fields = (this._dataService.getFields('view') || []);\n        this._fieldsMetadata = (this._dataService.getFields('metadata') || {});\n\n        if (this._criteriaArr.length < 1) {\n            this.add();\n        }\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/search/search-criteria.component.ts","import {Component, Inject, Injector, Input, Optional} from '@angular/core';\nimport {DataService} from '../data-service/data.service';\nimport {ActionsService} from '../actions/actions.service';\n\n// Component\n@Component({\n    selector: 'js_search',\n    template: `\n    <js_searchCriteria [injector]=\"injector\"></js_searchCriteria>\n    <js_searchOrderBy [injector]=\"injector\"></js_searchOrderBy>\n    <js_searchFields [injector]=\"injector\"></js_searchFields>\n    <a class=\"action -round fa\"\n       [ngClass]=\"[_actionsService.getActionAttr('search', 'icon')]\"\n       (click)=\"searchAction($event)\"></a>\n    `\n})\nexport class SearchComponent {\n    // Injector to get dependencies. Used when injector comes from child component (like accordion)\n    @Input() injector: any = null;\n\n    constructor(\n        @Optional() @Inject('DataService') protected _dataService: any,\n        @Optional() protected _actionsService: ActionsService\n    ) {}\n\n    /**\n     * Search objects.\n     * @param $event\n     */\n    public searchAction($event: any): void\n    {\n        $event.preventDefault();\n        this._dataService.search();\n    }\n\n    /**\n     * Lifecycle callback\n     */\n    ngOnInit()\n    {\n        // If injector is provided, override dependencies\n        if (this.injector) {\n            this._dataService = this.injector.get('DataService');\n            this._actionsService = this.injector.get(ActionsService);\n        }\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/search/search.component.ts","import {Injectable, Inject} from '@angular/core';\nimport {ActionsServiceProvider} from './actions-service-provider';\n\n// Re-exports\nexport {ActionsServiceProvider};\n\n\n@Injectable()\nexport class ActionsService {\n    // Default actions values (you can use set and get methods to change defaults)\n    // (this protected properties doesn't are prefixed by '_' for rapid and simple access by this[action])\n    protected edit = {\n        icon: 'fa-pencil',\n        isEnabled: false\n    };\n    protected add = {\n        icon: 'fa-plus',\n        isEnabled: false\n    };\n    protected copy = {\n        icon: 'fa-copy',\n        isEnabled: false\n    };\n    protected thumbnail = {\n        icon: 'fa-picture-o',\n        isEnabled: false\n    };\n    protected avatar = {\n        icon: 'fa-user',\n        isEnabled: false\n    };\n    protected detail = {\n        icon: 'fa-eye',\n        isEnabled: false\n    };\n    protected delete = {\n        icon: 'fa-trash-o',\n        isEnabled: false\n    };\n    protected search = {\n        icon: 'fa-search',\n        isEnabled: false\n    };\n    protected refresh = {\n        icon: 'fa-refresh',\n        isEnabled: true\n    };\n    protected collapse = {\n        isEnabled: false\n    };\n    protected deleteAll = {\n        icon: 'fa-trash-o',\n        isEnabled: false\n    };\n    protected checkAll = {\n        icon: 'fa-check-square-o',\n        isEnabled: false\n    };\n    protected orderUp = {\n        icon: 'fa-angle-double-up',\n        isEnabled: false\n    };\n    protected orderDown = {\n        icon: 'fa-angle-double-down',\n        isEnabled: false\n    };\n    \n    protected _headActions: string[] = ['refresh', 'deleteAll', 'add', 'checkAll']; // Default actions for massive objects\n    protected _detailActions: string[] = ['orderUp', 'orderDown', 'detail', 'thumbnail', 'avatar', 'delete', 'copy', 'edit']; // Default actions for single object\n\n    constructor(\n        @Inject('ActionsServiceProvider') private _provider: ActionsServiceProvider\n    ) {\n        if(this._provider) {\n            for (let action in this._provider) {\n                switch (action) {\n                    case 'order':\n                        this['orderUp']['isEnabled'] = this._provider[action];\n                        this['orderDown']['isEnabled'] = this._provider[action];\n                        break;\n                    default:\n                        if (this[action]) {\n                            this[action]['isEnabled'] = this._provider[action];\n                        }\n                }\n            }\n        }\n    }\n\n    /**\n     * Get action attribute\n     * @param action\n     * @param attribute\n     * @returns {any}\n     */\n    public getActionAttr(action: string, attribute: string)\n    {\n        if(this[action] && (attribute in this[action])) {\n            return this[action][attribute];\n        }\n        return null;\n    }\n\n    /**\n     * Get head actions (actions for objects head)\n     * @returns {any}\n     */\n    public getHeadActions()\n    {\n        return this._headActions;\n    }\n\n    /**\n     * Get detail actions (actions for objects detail)\n     * @returns {any}\n     */\n    public getDetailActions()\n    {\n        return this._detailActions;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/actions/actions.service.ts","import {Injectable} from '@angular/core';\nimport {FlashMessageService, FlashMessageTypes} from './flash-message.service';\n//import {Http, Headers} from 'angular2/http';\n//import 'rxjs/add/operator/map';\n\n// Interface PostResponse (template for post response)\nexport interface PostResponse {\n    status: number,\n    data: any,\n    errors: any,\n    flashMessages: any\n}\n\n// Service\n@Injectable()\nexport class PostService {\n    constructor(\n        private _flashMessageService: FlashMessageService\n    ) {}\n\n    /**\n     * Post. Send data to server\n     * @param url\n     * @param data\n     * @returns {Promise}\n     */\n    public post(url: string, data: any): Promise<any>\n    {\n        let that = this;\n\n        return new Promise(function(resolve, reject) {\n            return $.post(\n                url,\n                data,\n                postResponse => {\n                    that.handleFlashMessages(postResponse);\n                    let isSuccess = (postResponse.status == 1);\n                    delete postResponse.status; // Is no more necessary\n\n                    // Success\n                    if (isSuccess) { return resolve(postResponse['data'] || null); }\n\n                    // Error\n                    let errors = (postResponse['errors'] || {});\n                    // Add data exception into errors\n                    if (postResponse['data']) {\n                        if (postResponse['data']['localData']) {\n                            errors['localData'] = postResponse['data']['localData'];\n                        }\n                        if (postResponse['data']['object']) {\n                            errors['object'] = postResponse['data']['object'];\n                        }\n                    }\n                    return reject(errors);\n\n                }\n            );\n        });\n\n        /*let headers = new Headers();\n         headers.append('Content-Type', 'application/json');\n\n         this._http.post(\n         url,\n         data,\n         { headers: headers }\n         )\n         .map(response => response.json())\n         .subscribe(\n         response => console.log(response)\n         );*/\n    }\n\n    /**\n     * Handle handleFlashMessages from server\n     * @param postResponse\n     * @returns {PostResponse}\n     */\n    private handleFlashMessages(postResponse: PostResponse): any\n    {\n        // Request failed, no response has been returned.\n        if (!('status' in postResponse)) {\n            this._flashMessageService.message(\n                'Something went wrong, no response has been returned.',\n                'Unknown error',\n                FlashMessageTypes.error\n            );\n        }\n\n        // Flash Messages\n        if (postResponse.flashMessages) {\n            for (let flashMessage of postResponse.flashMessages) {\n                this._flashMessageService.message(\n                    flashMessage.body,\n                    flashMessage.head,\n                    flashMessage.type\n                );\n            }\n            delete postResponse.flashMessages; // It's no more necessary\n        }\n\n        return postResponse;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/post.service.ts","import {Injectable, ViewContainerRef, ReflectiveInjector} from '@angular/core';\nimport {DynamicComponentLoaderService} from '../../ts/dynamic-component-loader.service';\nimport {ModalDialogExtensionModule} from './modal-dialog.extension-module';\nimport {BaseModalPopup, IModalPopup} from './base-modal-popup';\nimport {ModalWrapperComponent, ModalSizes} from './modal-wrapper.component';\n\n// Re-exports\nexport {IModalPopup, BaseModalPopup, ModalSizes};\n\n\n// Popup interface\nexport interface Popup {\n    module: any\n    component: string,\n    providers?: any[],\n    // Used only by ModalService to avoid create new instances of classes (services, etc.)\n    // and new injectors for the same component. Once created it is saved to use in the next few\n    injector?: any,\n    size?: string\n}\n\n\n// Alert types\nexport var AlertTypes = {\n    success: 'success',\n    info: 'info',\n    warning: 'warning',\n    error: 'error'\n};\n\n\n// Modal wrapper module\nimport {ModalWrapperExtensionModule} from './modal-wrapper.extension-module';\n\n\n/**\n * Service\n * Modal uses the Bootstrap classes\n */\n@Injectable()\nexport class ModalService {\n    protected _modalComponentFactory: any; // Modal wrapper for component\n    protected _mainViewContainerRef: ViewContainerRef; // Main ViewContainerRef for modal\n    protected _modalCounter: number = 0; // Count existent modals to controls the body scrollbar\n    protected _$body: any; // Body element to controls scrollbar\n    protected _hasInit: boolean = false; // Controls initialization\n\n    constructor(\n        protected _dynamicComponentLoaderService: DynamicComponentLoaderService\n    ) {}\n\n    /**\n     * Initialization\n     * @param viewContainerRef\n     * @returns {ModalService}\n     */\n    public init(viewContainerRef: ViewContainerRef): ModalService\n    {\n        // Initializes only once\n        if (this._hasInit) { return this; }\n\n        let that = this;\n\n        // Get factory for modal wrapper\n        this._dynamicComponentLoaderService.getComponentFactory(ModalWrapperExtensionModule, 'ModalWrapperComponent').then(\n            componentFactory => {\n                that._modalComponentFactory = componentFactory;\n            });\n\n        // Set main viewContainerRef\n        this._mainViewContainerRef = viewContainerRef;\n\n        // Set body element\n        this._$body = $('body');\n\n        this._hasInit = true;\n        return this;\n    }\n\n    /**\n     * Popup. Render component inside the popup.\n     * @param popup\n     * @param injector\n     * @returns {Promise<T>}\n     *\n     * Handling with return:\n     * ModalService.popup([parameters]).then(\n     *     data => {\n     *         data.componentRef.instance....\n     *         data.dismissPromise.then(\n     *             dismissData => {\n     *                 ...\n     *             },\n     *             errors => { console.log(errors); }\n     *         );\n     *     },\n     *     errors => { console.log(errors); }\n     * );\n     */\n    public popup(popup: Popup, injector = null): Promise<any>\n    {\n        let that = this,\n            modalComponentRef = this._mainViewContainerRef.createComponent(\n                this._modalComponentFactory,\n                this._mainViewContainerRef.length,\n                null,\n                []\n            ),\n            modalComponentInstance = <ModalWrapperComponent>modalComponentRef.instance;\n\n        /* IMPORTANT: Use this code if you need to put the component in body (to avoided positioned parent troubling)\n        let $modal = $(modalComponentInstance._elementRef.nativeElement);\n        $modal.appendTo('body');*/\n\n        // Set modal size\n        modalComponentInstance.setSize(popup.size);\n\n        // Update counter\n        if (this._modalCounter === 0) {\n            // Remove body scrollbar\n            $(this._$body).addClass('no-overflow');\n        }\n        this._modalCounter++;\n\n        // Define injector\n        if (injector && !popup.injector) {\n            let unresolvedProviders = (popup.providers || []),\n                resolvedProviders = ReflectiveInjector.resolve(unresolvedProviders);\n            popup.injector = ReflectiveInjector.fromResolvedProviders(resolvedProviders, injector);\n        }\n\n        // Create popup\n        return new Promise(function(resolve, reject) {\n            that._dynamicComponentLoaderService.load(\n                popup.module,\n                popup.component,\n                modalComponentInstance.getModalContainerRef(),\n                (popup.injector || null)\n            ).then(\n                componentRef => {\n                    let dismissPromise = new Promise(function(resolve, reject) {\n                        // Dismiss emitter\n                        let onDismissSubscription = componentRef.instance.onDismissEmitter.subscribe(\n                            data => {\n                                onDismissSubscription.unsubscribe();\n\n                                // Remove component\n                                that._mainViewContainerRef.remove(that._mainViewContainerRef.length - 1);\n                                // It's used the \"remove\" method of \"ViewContainerRef\" instead\n                                // modalComponentRef.destroy();\n\n                                // Update counter\n                                that._modalCounter--;\n                                if (that._modalCounter === 0) {\n                                    // Restore body scrollbar\n                                    $(that._$body).removeClass('no-overflow');\n                                }\n\n                                return resolve(data);\n                            }\n                        );\n                    });\n\n                    // Show modal\n                    modalComponentInstance.show();\n\n                    return resolve({\n                        componentRef: componentRef,\n                        dismissPromise: dismissPromise\n                    });\n                },\n                errors => {\n                    console.log(errors);\n                    return reject(null);\n                }\n            );\n        });\n    }\n\n    /**\n     * Dialog\n     * @param body\n     * @param title\n     * @param size\n     * @returns {Promise<T>}\n     */\n    public dialog(\n        body: string = 'Are you sure?',\n        title: string = 'Warning',\n        size = ModalSizes.sm\n    ): Promise<any> {\n        return this.modalDialog(body, title, true, size);\n    }\n\n    /**\n     * Alert\n     * @param body\n     * @param title\n     * @param size\n     * @returns {Promise<T>}\n     */\n    public alert(\n        body: string = 'Are you sure?',\n        title: string = 'Warning',\n        size = ModalSizes.sm\n    ): Promise<any> {\n        return this.modalDialog(body, title, false, size);\n    }\n\n    /**\n     * Modal Dialog (default component)\n     * @param body\n     * @param title\n     * @param isDialog\n     * @param size\n     * @returns {Promise<T>}\n     *\n     * Handling with return:\n     * ModalService.modalDialog([parameters]).then(\n     *     hasConfirm => {\n     *         // Popup response\n     *     },\n     *     errors => {\n     *         console.log(errors);\n     *     }\n     * );\n     */\n    protected modalDialog(\n        body: string = 'Are you sure?',\n        title: string = 'Warning',\n        isDialog: boolean = true,\n        size = ModalSizes.sm\n    ): Promise<any> {\n        let that = this;\n\n        return new Promise(function(resolve, reject) {\n            let popup: Popup = {\n                module: ModalDialogExtensionModule,\n                component: 'ModalDialogComponent',\n                size: size\n            };\n\n            that.popup(popup).then(\n                data => {\n                    // Set modal properties\n                    data.componentRef.instance.setTitle(title).setBody(body).setIsDialog(isDialog);\n                    data.dismissPromise.then(\n                        dismissData => { return resolve(dismissData); },\n                        errors => { console.log(errors); return reject(false); }\n                    );\n                },\n                errors => { console.log(errors); return reject(false); }\n            );\n        });\n    }\n\n    /**\n     * Normalize alert type to a valid option\n     * @param type\n     * @returns {string}\n     */\n    protected normalizeAlertType(type: string) {\n        return (AlertTypes[type] || AlertTypes.info);\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/modal/ts/modal.service.ts","import {Injectable, Compiler, ReflectiveInjector, ViewContainerRef, Injector} from '@angular/core';\n\n// Service\n@Injectable()\nexport class DynamicComponentLoaderService {\n    constructor(\n        protected _compiler: Compiler\n    ) {}\n\n    /**\n     * Load component into ViewContainerRef\n     * @param module\n     * @param component (component name)\n     * @param viewContainerRef\n     * @param injector (result of:\n     *     injector = ReflectiveInjector.fromResolvedProviders(\n     *         ReflectiveInjector.resolve([\n     *             MyService,\n     *             {provide: 'MyProvider', useValue: null}\n     *         ]),\n     *         this._injector\n     *     );\n     * )\n     * @returns {Promise<T>}\n     */\n    public load(module: any, component: string, viewContainerRef: ViewContainerRef, injector: Injector = null): Promise<any>\n    {\n        let that = this;\n\n        return new Promise(function(resolve, reject) {\n            that.getComponentFactory(module, component).then(\n                componentFactory => {\n                    let componentRef = viewContainerRef.createComponent(componentFactory, 0, injector, []);\n                    return resolve(componentRef);\n                });\n        });\n    }\n\n    /**\n     * Get component factory\n     * @param module\n     * @param component (component name)\n     * @returns {Promise<T>}\n     */\n    public getComponentFactory(module: any, component: string): Promise<any>\n    {\n        let that = this;\n\n        return new Promise(function(resolve, reject) {\n            that._compiler.compileModuleAndAllComponentsAsync(module).then(\n                moduleFactory => {\n                    let componentFactory = moduleFactory.componentFactories.find(\n                        tmpComponentFactory => tmpComponentFactory.componentType['name'] === component\n                    );\n                    return resolve(componentFactory);\n                });\n        });\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/dynamic-component-loader.service.ts","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {ModalDialogComponent} from './modal-dialog.component';\n\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: [ModalDialogComponent],\n    exports: [ModalDialogComponent]\n})\nexport class ModalDialogExtensionModule {}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/modal/ts/modal-dialog.extension-module.ts","import {Component, ElementRef, Renderer} from '@angular/core';\nimport {BaseModalPopup} from './base-modal-popup';\n\n@Component({\n    selector: '.js_modalDialog',\n    template:\n    `<div class=\"modal-header\">\n        <h3 class=\"modal-title\">{{title}}</h3>\n    </div>\n    <div class=\"modal-body\">{{body}}</div>\n    <div class=\"modal-footer\">\n        <button *ngIf=\"isDialog\" class=\"btn btn-default\" (click)=\"closeAction($event, false)\">Cancel</button>\n        <button class=\"btn btn-primary\" (click)=\"closeAction($event, true)\">Ok</button>\n    </div>\n    `\n})\nexport class ModalDialogComponent extends BaseModalPopup\n{\n    protected title: string = 'Warning';\n    protected body: string = 'Are you sure';\n    protected isDialog: boolean = true;\n\n    constructor(\n        elementRef: ElementRef,\n        renderer: Renderer\n    ) {\n        super(\n            elementRef,\n            renderer,\n            null\n        );\n    }\n\n    /**\n     * Set title\n     * @param title\n     * @returns {ModalDialogComponent}\n     */\n    public setTitle(title: string): ModalDialogComponent\n    {\n        this.title = title;\n        return this;\n    }\n\n    /**\n     * Set body\n     * @param body\n     * @returns {ModalDialogComponent}\n     */\n    public setBody(body: string): ModalDialogComponent\n    {\n        this.body = body;\n        return this;\n    }\n\n    /**\n     * Set isDialog\n     * @param isDialog\n     * @returns {ModalDialogComponent}\n     */\n    public setIsDialog(isDialog: boolean): ModalDialogComponent\n    {\n        this.isDialog = isDialog;\n        return this;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/modal/ts/modal-dialog.component.ts","import {ViewChild, ElementRef, EventEmitter, Renderer} from '@angular/core';\nimport {BaseExtensionComponent, BaseProvider} from '../../ts/base/base.extension-component';\n\n/**\n * This interface should be extended by all components that use popup but not extends \"BaseModalPopup\" class\n */\nexport interface IModalPopup {\n    onDismissEmitter: EventEmitter<any>;\n\n    /**\n     * Close popup.\n     * @param $event\n     * @param data (data to return on resolve component)\n     */\n    closeAction($event: any, data?: any): void;\n}\n\n/**\n * BaseModalPopup\n * Base class for custom popups.\n * All popups should extend this class.\n */\nexport abstract class BaseModalPopup extends BaseExtensionComponent implements IModalPopup\n{\n    onDismissEmitter: EventEmitter<any> = new EventEmitter();\n    \n    constructor(\n        elementRef: ElementRef,\n        renderer: Renderer,\n        // This provider can becomes any provider defined by your child\n        // (don't need the \"inject\" because it's a static class, so will be provider by children components)\n        provider: BaseProvider\n    ) {\n        // Call parent construct\n        super();\n        super.initBaseExtensionComponent(\n            elementRef,\n            renderer,\n            provider\n        );\n    }\n\n    /**\n     * Close action.\n     * @param $event\n     * @param data (data to return on resolve component)\n     */\n    public closeAction($event: any = null, data: any = null): void\n    {\n        if ($event) { $event.preventDefault(); }\n        this.onDismissEmitter.emit(data);\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/modal/ts/base-modal-popup.ts","import {Component, ElementRef, Renderer} from '@angular/core';\nimport {BaseProvider} from './base-provider';\n\n// Re-exports\nexport {BaseProvider}\n\n\n/**\n * Used only as base component to be extended for others components\n */\n@Component({\n    selector: '.js_base',\n    template: ''\n})\nexport abstract class BaseExtensionComponent {\n    // Constructor vars\n    public _elementRef: ElementRef; // Public because the children that implement \"IForm\"\n    protected _renderer: Renderer;\n    protected _provider: BaseProvider;\n\n    /**\n     * Initialization of component (replace the original constructor to avoid angular injection inheritance bug)\n     * @param elementRef\n     * @param renderer\n     * @param provider\n     */\n    public initBaseExtensionComponent(\n        elementRef: ElementRef,\n        renderer: Renderer,\n        // This provider can becomes any provider defined by your child\n        // (don't need the \"inject\" because it's a static class, so will be provider by children components)\n        provider: BaseProvider\n    ) {\n        // Constructor vars\n        this._elementRef = elementRef;\n        this._renderer = renderer;\n        this._provider = provider;\n\n        // Set defaults\n        if (!this._provider) {\n            this._provider = [];\n        }\n\n        // Set main class\n        let mainClass = this.getProviderExtraDataAttr('class');\n        if (mainClass) {\n            this._renderer.setElementClass(\n                this._elementRef.nativeElement,\n                mainClass,\n                true\n            );\n        }\n    }\n\n    /**\n     * Get provider attribute\n     * @param attribute\n     * @returns {any|null}\n     */\n    protected getProviderAttr(attribute: string): any\n    {\n        return this._provider[attribute] || null;\n    }\n\n    /**\n     * Get provider extra data attribute\n     * @param attribute\n     * @returns {any|null}\n     */\n    public getProviderExtraDataAttr(attribute: string): any\n    {\n        return (\n            (this._provider['extraData'] && this._provider['extraData'][attribute])\n                ? this._provider['extraData'][attribute]\n                : null\n        );\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/base/base.extension-component.ts","import {Component, ViewChild, ViewContainerRef, ElementRef, Host} from '@angular/core';\n\n\n// Modal sizes\nexport var ModalSizes = {\n    sm: 'sm',\n    lg: 'lg'\n};\n\n\n/**\n * Modal wrapper\n * Modal uses the bootstrap classes\n */\n@Component({\n    selector: 'js_modal',\n    template: `\n    <div class=\"modal-backdrop\"></div>\n    <div class=\"modal animated\">\n        <div class=\"modal-dialog modal-{{_size}}\">\n            <div class=\"modal-content\">\n                <template #js_modalContainer></template>\n            </div>\n        </div>\n    </div>\n    `,\n    host: {\n        '(document:click)': 'onDocumentClick($event)',\n    }\n})\nexport class ModalWrapperComponent {\n    // ViewContainerRef to load child\n    @ViewChild('js_modalContainer', {read: ViewContainerRef}) viewContainerRef: ViewContainerRef;\n\n    protected _size: string; // Modal size (sm, lg)\n\n    constructor(\n        protected _elementRef: ElementRef\n    ) {}\n\n    /**\n     * Get modal container ref\n     * @returns {ViewContainerRef}\n     */\n    public setSize(size: string): ModalWrapperComponent\n    {\n        this._size = this.normalizeModalSize(size);\n        return this;\n    }\n\n    /**\n     * Get modal container ref\n     * @returns {ViewContainerRef}\n     */\n    public getModalContainerRef(): ViewContainerRef\n    {\n        return this.viewContainerRef;\n    }\n\n    /**\n     * Show modal\n     */\n    public show(): void\n    {\n        // Fade in animation\n        $(this._elementRef.nativeElement).find('.modal').addClass('fadeInDown');\n    }\n\n    /**\n     * Normalize modal size to a valid option\n     * @param size\n     * @returns {string}\n     */\n    protected normalizeModalSize(size: string) {\n        return (ModalSizes[size] || ModalSizes.lg);\n    }\n\n    /**\n     * On document click event\n     */\n    protected onDocumentClick(): void\n    {\n        // @TODO implement \"Esc\" key and click over backdrop, get from viewcontainerref, index 0\n        //console.log(\"click\");\n        return;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/modal/ts/modal-wrapper.component.ts","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ModalWrapperComponent} from './modal-wrapper.component';\n\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: [ModalWrapperComponent],\n    exports: [ModalWrapperComponent]\n})\nexport class ModalWrapperExtensionModule {}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/modal/ts/modal-wrapper.extension-module.ts","import {Injectable, Inject, EventEmitter} from '@angular/core';\nimport {DomSanitizer} from '@angular/platform-browser';\nimport {PostService} from '../post.service';\nimport {DataServiceProvider, Search} from './data-service-provider';\n\n// Re-exports\n// This classes are in different file because import loops\n// (HelperServices uses DataServiceProvider and DataService uses HelperService)\nexport {DataServiceProvider, Search};\n\n// OrderTypes\nexport var OrderTypes = {\n    up: 'up',\n    down: 'down'\n};\n\n\n@Injectable()\nexport class DataService {\n    // Current object (used by form)\n    protected _objectIndex: number = null; // Index of object in provider.objects (or in _objectsProvider if defined)\n    protected _object: any = null; // Raw object\n    protected _normalizedObject: any = null; // Object normalized to template\n\n    // Objects provider is the context to work/handle with object instead of provider.objects\n    // (used in TreeViewDataService, in this case the context is always provider.objects)\n    protected _objectsProvider: any = null;\n\n    protected _objectsIds: number[] = []; // Array of \"ids\" of objects in provider.objects.value to avoid duplications\n    protected _newObjectsIds: number[] = []; // Array of \"ids\" with new objects added by the user\n\n    protected _onObjectChangeEmitter: EventEmitter<any>; // When the object change\n    protected _onObjectsChangeEmitter: EventEmitter<any>; // When the list of objects change\n\n    protected _candidateSearch: Search; // Candidate to new search with modified parameters\n\n\n    constructor(\n        protected _postService: PostService,\n        @Inject('HelperService') protected _helperService: any,\n        @Inject('DataServiceProvider') protected _provider: DataServiceProvider,\n        private _sanitizer: DomSanitizer\n    ) {\n        if (this._provider['pin']) {\n            this.pinProvider();\n        }\n\n        this._onObjectChangeEmitter = new EventEmitter();\n        this._onObjectsChangeEmitter = new EventEmitter();\n\n        this.setObjects(this._provider.objects || []);\n\n        // Initialize the search\n        this.initSearch();\n    }\n\n    /**\n     * Pin provider, turning provider on an exclusive copy for this service.\n     * It's useful when you have multiple DataServices in the same injector, so you can have multiple\n     * problems if you share the same DataServiceProvider between them.\n     * @returns {DataService}\n     */\n    protected pinProvider(): DataService\n    {\n        this._provider = this._helperService.cloneObject(this._provider, true);\n        return this;\n    }\n\n    /**\n     * Get object\n     * @returns any\n     */\n    public getObject(): any\n    {\n        return this._object;\n    }\n\n    /**\n     * Get object index\n     * @returns any\n     */\n    public getObjectIndex(): any\n    {\n        return this._objectIndex;\n    }\n\n    /**\n     * Get selected object (object normalized to view)\n     * @returns {any}\n     */\n    public getNormalizedObject(): any\n    {\n        return this._normalizedObject;\n    }\n\n    /**\n     * Get new objects\n     * @returns {any}\n     */\n    public getNewObjects(): any\n    {\n        return this._newObjectsIds;\n    }\n\n    /**\n     * Get selected object emitter to tell all subscribers about changes\n     * @returns {EventEmitter<any>}\n     */\n    public getOnObjectChangeEmitter() {\n        return this._onObjectChangeEmitter;\n    }\n\n    /**\n     * Get on objects change emitter to tell all subscribers about changes\n     * @returns {EventEmitter<any>}\n     */\n    public getOnObjectsChangeEmitter() {\n        return this._onObjectsChangeEmitter;\n    }\n\n    /**\n     * Get route\n     * @param route\n     * @returns {null}\n     */\n    public getRoute(route: string)\n    {\n        if (route in this._provider.route) {\n            return this._provider.route[route]['url'];\n        }\n        return null;\n    }\n\n    /**\n     * Set route\n     * @param route\n     * @param url\n     * @returns {DataService}\n     */\n    public setRoute(route: string, url: string): DataService\n    {\n        if (route in this._provider.route) {\n            this._provider.route[route]['url'] = url;\n        }\n        return this;\n    }\n\n    /**\n     * Refresh selected object\n     * @returns {DataService}\n     */\n    public refreshObject(): DataService\n    {\n        let id = (this._object ? this._object['id'] : null);\n\n        if (id) {\n            let that = this,\n                route = (this._provider.route['get']['url'] + '/' + id);\n\n            this.post(route, this.getRequestData(null, false, false)).then(\n                data => {\n                    let obj = (data.object || null);\n                    // Refresh object\n                    if (obj) {\n                        that.setObject(data.object, that._objectIndex);\n                    }\n                },\n                errors => { console.log(errors); }\n            );\n        }\n\n        return this;\n    }\n\n    /**\n     * Select object\n     * @param index\n     * @returns {Promise}\n     */\n    public selectObject(index: any): Promise<any>\n    {\n        let that = this;\n\n        return new Promise(function(resolve, reject) {\n            // Set only if object is different\n            if(index != that._objectIndex) {\n                let objectsProvider = (that._objectsProvider || that._provider.objects);\n\n                that._postService.post(\n                    that._provider.route['get']['url'] + '/' + objectsProvider[index]['id'],\n                    that.getRequestData(null, false, false)\n                ).then(\n                    data => {\n                        that._objectIndex = index; // The index of original object that was selected\n                        that.setLocalObject(data.object);\n                        // Now object has all of fields with the values, is not limited to the search selected field,\n                        // so we need normalize the object, because now it can has new values.\n                        that.setNormalizedObject();\n                        return resolve(true);\n                    },\n                    errors => { reject(false); });\n            } else {\n                return resolve(true);\n            }\n        });\n    }\n\n    /**\n     * Set object (when the object is changed out of the objects array from _provider,\n     * can be an external order)\n     * @param object\n     * @param index\n     * @returns any\n     */\n    public setObject(object: any, index: any = null): any\n    {\n        // Normalize object to template\n        this._normalizedObject = this._helperService.cloneObject(object, true);\n        this.normalizeObjectsToTemplate([this._normalizedObject]);\n\n        if (object && object['id']) { // Ignore new objects (no id defined)\n            let objectsProvider = (this._objectsProvider || this._provider.objects);\n\n            // Refresh objects array\n            if ((index != null) && objectsProvider[index]) {\n                // Update existent object\n                this._objectIndex = index;\n                objectsProvider[index] = this._normalizedObject;\n                this._normalizedObject['_isEdited'] = true; // Flag to use in template\n            } else {\n                // Add new object at first of array (to best user experience)\n                this._objectIndex = 0; // Update index to the new index\n                this.pushToObjects([this._normalizedObject], true);\n                this._newObjectsIds.push(object['id']); // New object added\n                this._normalizedObject['_isNew'] = true; // Flag to use in template\n            }\n        } else {\n            this._objectIndex = null;\n        }\n\n        this.setLocalObject(object);\n\n        return this;\n    }\n\n    /**\n     * Set normalized object (can be called out of the service).\n     * Used by \"auto-complete\".\n     * @param object\n     * @returns any\n     */\n    public setNormalizedObject(object: any = null): any\n    {\n        let objectsProvider = (this._objectsProvider || this._provider.objects);\n        object = (object || this._object);\n\n        if (object) {\n            // Normalize object to template\n            this._normalizedObject = this._helperService.cloneObject(object, true);\n            this.normalizeObjectsToTemplate([this._normalizedObject]);\n\n            // Update normalized object in objects provider\n            if ((this._objectIndex != null) && objectsProvider[this._objectIndex]) {\n                objectsProvider[this._objectIndex] = this._normalizedObject;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Set local object (when the object is changed based in the objects array from _provider,\n     * always is an internal order)\n     * @param object\n     * @returns {DataService}\n     */\n    protected setLocalObject(object: any): DataService\n    {\n        this._object = object;\n        this._onObjectChangeEmitter.emit(this._object);\n        return this;\n    }\n\n    /**\n     * Search initialization\n     * @returns {DataService}\n     */\n    protected initSearch(): DataService\n    {\n        this._candidateSearch = this._helperService.cloneObject(this._provider['search'], true);\n        return this;\n    }\n\n    /**\n     * Set search\n     * @param value\n     * @param attribute\n     * @returns {DataService}\n     */\n    public setSearch(value: any, attribute: string = null): DataService\n    {\n        if (attribute && (attribute in this._provider.search)) {\n            this._provider.search[attribute] = value;\n        } else if (attribute) {\n            return this; // Unknown attribute\n        } else {\n            this._provider.search = value;\n        }\n\n        // Reinitialize the search\n        this.initSearch();\n        \n        return this;\n    }\n\n    /**\n     * Get search\n     * @param attribute\n     * @returns any\n     */\n    public getSearch(attribute: string = null): any\n    {\n        if (attribute && (attribute in this._provider.search)) {\n            return this._provider.search[attribute];\n        } else if (attribute) {\n            return null; // Unknown attribute\n        }\n        return this._provider.search;\n    }\n\n    /**\n     * Get fields\n     * @param attribute\n     * @returns any\n     */\n    public getFields(attribute: string = null): any\n    {\n        if (attribute && (attribute in this._provider.fields)) {\n            return this._provider.fields[attribute];\n        } else if (attribute) {\n            return null; // Unknown attribute\n        }\n        return this._provider.fields;\n    }\n\n    /**\n     * Set objects\n     * @param objects\n     * @param isMerge (if true merge objects, otherwise replace them)\n     * @returns any\n     */\n    public setObjects(objects: any, isMerge: boolean = false): any\n    {\n        objects = (objects || []);\n\n        this.normalizeObjectsToTemplate(objects);\n\n        // Merge objects\n        if (isMerge) {\n            this.pushToObjects(objects);\n        } else { // Replace objects\n            this.resetObjects();\n            this.pushToObjects(objects);\n            this.newObject().then( // Reset object, index and all information of object can be changed\n                data => {},\n                errors => { console.log(errors); }\n            );\n        }\n\n        // Emmit changes\n        this._onObjectsChangeEmitter.emit(objects);\n\n        return this;\n    }\n\n    /**\n     * Reset objects\n     * @returns {DataService}\n     */\n    protected resetObjects() {\n        this._provider.objects = [];\n        this._objectsIds = [];\n        this._newObjectsIds = [];\n        return this;\n    }\n\n    /**\n     * Push to objects\n     * @param objects\n     * @param isFirst (determines if objects should be at first)\n     * @returns any\n     */\n    protected pushToObjects(objects: any, isFirst: boolean = false): any\n    {\n        let //hasChanges = false, // To control the changes emitter\n            objectsProvider = (this._objectsProvider || this._provider.objects);\n\n        for (let obj of objects) {\n            if (!this._helperService.inArray(parseInt(obj['id']), this._objectsIds)) {\n                if (isFirst) {\n                    objectsProvider.unshift(obj);\n                } else {\n                    objectsProvider.push(obj);\n                }\n                this._objectsIds.push(parseInt(obj['id']));\n                //hasChanges = true;\n            }\n        }\n\n        // Emmit changes\n        /*if (hasChanges) {\n            this._onObjectsChangeEmitter.emit(objects);\n        }*/\n\n        return this;\n    }\n\n    /**\n     * Pull from objects\n     * @param index\n     * @returns any\n     */\n    protected pullFromObjects(index: any): any\n    {\n        let objectsProvider = (this._objectsProvider || this._provider.objects),\n            objId = parseInt(objectsProvider[index]['id']);\n\n        objectsProvider.splice(index, 1);\n\n        if ((index = this._helperService.arraySearch(objId, this._objectsIds)) != null) {\n            this._objectsIds.splice(index, 1);\n        }\n        if ((index = this._helperService.arraySearch(objId, this._newObjectsIds)) != null) {\n            this._newObjectsIds.splice(index, 1);\n        }\n\n        return this;\n    }\n\n    /**\n     * Get field choice\n     * @param field\n     * @param key (key of field choice)\n     * @returns {*|null}\n     */\n    public getFieldChoice(field: string, key = null)\n    {\n        // Return a specific field choice by key\n        if (key in this._provider.fieldsChoices[field]['value']) {\n            return this._provider.fieldsChoices[field]['value'][key];\n        }\n        return null\n    }\n\n    /**\n     * Get field choices attribute\n     * @param field\n     * @param attribute\n     * @returns {any}\n     */\n    public getFieldChoicesAttr(field: string, attribute: string)\n    {\n        // Return a specific attribute of field choices\n        if (this._provider.fieldsChoices[field] && (attribute in this._provider.fieldsChoices[field])) {\n            return this._provider.fieldsChoices[field][attribute];\n        }\n        return null\n    }\n\n    /**\n     * Get field choices\n     * @param field\n     * @returns {*|null}\n     */\n    public getFieldChoices(field: string)\n    {\n        return this._provider.fieldsChoices[field]['value'] || null;\n    }\n\n    /**\n     * Set fields choices.\n     * @param fieldsChoices\n     * @returns {DataService}\n     */\n    public setFieldsChoices(fieldsChoices): DataService\n    {\n        this._provider.fieldsChoices = fieldsChoices;\n        return this;\n    }\n\n    /**\n     * Merge provider attribute\n     * @param attribute\n     * @param value\n     * @returns {DataService}\n     */\n    public mergeProviderAttr(attribute: string, value: any): DataService\n    {\n        if (attribute in this._provider) {\n            this._provider[attribute] =\n                this._helperService.mergeObjects(this._provider[attribute], value);\n        }\n        return this;\n    }\n\n    /**\n     * Set provider attribute\n     * @param attribute\n     * @param value\n     * @returns {DataService}\n     */\n    public setProviderAttr(attribute: string, value: any): DataService\n    {\n        if (attribute in this._provider) {\n            this._provider[attribute] = value;\n        }\n        return this;\n    }\n\n    /**\n     * Get provider attribute\n     * @param attribute\n     * @returns {any|null}\n     */\n    public getProviderAttr(attribute: string): any\n    {\n        return this._provider[attribute] || null;\n    }\n\n    /**\n     * Get provider extra data attribute\n     * @param attribute\n     * @returns {any|null}\n     */\n    public getProviderExtraDataAttr(attribute: string): any\n    {\n        return (\n            (this._provider['extraData'] && this._provider['extraData'][attribute])\n                ? this._provider['extraData'][attribute]\n                : null\n        );\n    }\n\n    /**\n     * Get candidate search\n     * @returns any\n     */\n    public getCandidateSearch(): any\n    {\n        return (this._candidateSearch || null);\n    }\n\n    /**\n     * Get candidate search attribute\n     * @param attribute\n     * @returns any\n     */\n    public getCandidateSearchAttr(attribute: string): any\n    {\n        return this._candidateSearch[attribute] || null;\n    }\n\n    /**\n     * Reset extra fields\n     * @returns {DataService}\n     */\n    protected resetExtraFields(): DataService\n    {\n        if (this.getProviderExtraDataAttr('fields')) {\n            for (let field in this.getProviderExtraDataAttr('fields')) {\n                this._provider.extraData.fields[field] = null;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Normalize objects to show in template\n     * Detect fields that needs to be rendered to view/template\n     * @param objects\n     * @param fields\n     * @returns any\n     */\n    protected normalizeObjectsToTemplate(objects: any = null, fields: any[] = null): any\n    {\n        objects = (objects || this._provider.objects);\n        fields = (fields || this._provider.fields['view']);\n\n        if(objects && fields) {\n            for (let field of fields) {\n                let fieldMetadata = this._provider.fields['metadata'][field];\n                if (fieldMetadata['skipNormalizer']) { continue; }\n\n                switch (fieldMetadata['type']) {\n                    case 'boolean':\n                    case 'code':\n                    case 'percentage':\n                    case 'monetary':\n                    case 'icon':\n                    case 'link':\n                    case 'img':\n                    case 'avatar':\n                    case 'status':\n                        for (let obj of objects) {\n                            if (typeof obj[field] != 'undefined') { // Can be undefined, if the search doest have the field selected\n                                obj[field] = this.renderField(field, obj);\n                            }\n                        }\n                        break;\n                }\n\n                // For \"enum\" type (key is the label, pattern of Symfony ChoiceType)\n                if (this._provider.fieldsChoices\n                    && this._provider.fieldsChoices[field]\n                    && this._provider.fieldsChoices[field]['value']\n                ) {\n                    let enumObj = this._provider.fieldsChoices[field]['value'];\n                    for (let obj of objects) {\n                        for (let enumKey in enumObj) {\n                            if (enumObj[enumKey] == obj[field]) {\n                                obj[field] = enumKey;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Render field\n     * @param field\n     * @param object\n     * @returns {string}\n     */\n    public renderField(field: string, object: any): any\n    {\n        // Get field metadata\n        let fieldMetadata = (this._provider.fields['metadata'][field] || null),\n            value = object[field];\n\n        // Render field to the view/template\n        if(fieldMetadata) {\n            switch (fieldMetadata['type']) {\n                case 'boolean':\n                    if (this._helperService.castToBoolean(value)) {\n                        return ('<i class=\"fa fa-check\"></i>');\n                    } else {\n                        return ('<i class=\"fa fa-ban\"></i>');\n                    }\n                case 'code':\n                    if (object['storeObj']\n                        && this._helperService.getGlobalVar('stores')\n                        && this._helperService.getGlobalVar('stores')[object['storeObj']]\n                    ) {\n                        return this._sanitizer.bypassSecurityTrustHtml( // Used to allow the style attr\n                            '<span class=\"store\" style=\"background-color: '\n                            + this._helperService.getGlobalVar('stores')[object['storeObj']]['color']\n                            + '\">' + value + '</span>'\n                        );\n                    }\n                    return (value);\n                case 'percentage':\n                    return (value + '%');\n                case 'monetary':\n                    return (value + '€');\n                case 'icon':\n                    return ('<i class=\"fa ' + value + '\"></i>');\n                case 'link':\n                    return ('<a href=\"' + value + '\" target=\"_blank\">' + value + '</a>');\n                case 'img':\n                case 'avatar':\n                    let extraClass = ((fieldMetadata['type'] == 'avatar') ? 'img-circle' : 'thumbnail');\n                    return (value\n                        ? ('<img alt=\"'+fieldMetadata['label']+'\" class=\"'+extraClass+'\" src=\"'\n                            + (this._helperService.getUploadWebPath(value) || value)\n                            + '\">')\n                        : null);\n                case 'status':\n                    let statusMap = {'NO': 'danger', 'PARTIAL': 'warning', 'YES': 'primary'};\n                    return ('<span class=\"status -' + (statusMap[value] || 'danger') + '\"></span>');\n            }\n        }\n\n        return value;\n    }\n\n    /**\n     * New object (call this function to create a new object)\n     * @param index\n     * @returns {Promise}\n     */\n    public newObject(index: any = null): Promise<any> {\n        let that = this;\n\n        return new Promise(function(resolve, reject) {\n            let newObj = {};\n            if (index != null) {\n                let objectsProvider = (that._objectsProvider || that._provider.objects);\n\n                return that._postService.post(\n                    that._provider.route['get']['url'] + '/' + objectsProvider[index]['id'],\n                    that.getRequestData()\n                ).then(\n                    data => {\n                        for (let field of that._provider.fields['form']) {\n                            newObj[field] = ((that._provider.fields['metadata'][field]['acl'] === 'read')\n                                    ? (that._provider.fields['metadata'][field]['default'] || null)\n                                    : (data.object[field] || null)\n                            );\n                            // \"fieldInView\" (for auto-complete, html-select, etc.)\n                            if (that._provider.fields['metadata'][field]['fieldInView'] && newObj[field]) {\n                                let fieldInView = that._provider.fields['metadata'][field]['fieldInView'];\n                                newObj[fieldInView] = data.object[fieldInView];\n                            }\n                        }\n                        that.setObject(newObj);\n                        that.resetExtraFields();\n                        return resolve(true);\n                    },\n                    errors => { console.log(errors); return reject(false); }\n                );\n            } else {\n                for (let field of that._provider.fields['form']) {\n                    newObj[field] = (that._provider.fields['metadata'][field]['default'] || null);\n                }\n                that.setObject(newObj);\n                that.resetExtraFields();\n                return resolve(true);\n            }\n        });\n    }\n\n    /**\n     * Save object.\n     * @param data\n     * @param id\n     * @param route (specific route to save)\n     * @returns {Promise}\n     */\n    public save(data: any, id = null, route = null): Promise<any>\n    {\n        let that = this;\n\n        return new Promise(function(resolve, reject) {\n            // Set route (if id is provided, use 'edit', else use 'add')\n            if (!route) {\n                route = (id\n                        ? that._provider.route['edit']['url']\n                        : (that._provider.route['add']\n                            ? that._provider.route['add']['url']\n                            : that._provider.route['edit']['url']\n                    )\n                );\n            }\n            if (id) { route += ('/' + id); }\n\n            that.post(route, that.getRequestData(data)).then(\n                data => {\n                    // Refresh all objects\n                    if (data.objects) {\n                        that.setObjects(data.objects);\n                    }\n\n                    // Refresh fields choices\n                    if (data.fieldsChoices) {\n                        that.setFieldsChoices(data.fieldsChoices);\n                    }\n\n                    // Local data (Do not override, merge data)\n                    if (data['localData']) {\n                        that._provider.localData =\n                            that._helperService.mergeObjects(that._provider.localData, data['localData']);\n                    }\n\n                    let obj = (data.object || null);\n                    // Refresh object\n                    if (obj) {\n                        that.setObject(data.object, that._objectIndex);\n                    }\n\n                    return resolve(obj);\n                },\n                errors => {\n                    // Local data (Do not override, merge data). Exception in errors list used in some cases.\n                    if (errors['localData']) {\n                        that._provider.localData =\n                            that._helperService.mergeObjects(that._provider.localData, errors['localData']);\n                        delete errors['localData']; // It's no more necessary\n                    }\n\n                    // Refresh object\n                    if (errors['object']) {\n                        that.setObject(errors['object'], that._objectIndex);\n                        delete errors['object']; // It's no more necessary\n                    }\n\n                    return reject(errors);\n                }\n            );\n        });\n    }\n\n    /**\n     * Search objects\n     * @returns {DataService}\n     */\n    public search(): DataService\n    {\n        // Only search if parameters have changed\n        if (this._helperService.isEqualObject(this._provider['search'], this._candidateSearch)) {\n            return this;\n        }\n\n        // Update search\n        this._provider['search'] = this._helperService.cloneObject(this._candidateSearch, true);\n        // Refresh objects\n        return this.refresh();\n    }\n\n    /**\n     * Refresh list of objects\n     * @returns {DataService}\n     */\n    public refresh(): DataService\n    {\n        let that = this;\n\n        // Reset pagination for new search\n        this.resetPagination();\n\n        this.post(\n            this._provider.route['get']['url'],\n            this.getRequestData(null, false)\n        ).then(\n            data => {\n                // Update list of objects\n                that.setObjects(data.objects || null);\n                that.setFieldsChoices(data.fieldsChoices || null);\n            },\n            errors => { console.log(errors); }\n        );\n\n        return this;\n    }\n\n    /**\n     * Get more objects (pagination)\n     * @returns {DataService}\n     */\n    public getMoreObjects(): DataService\n    {\n        let that = this;\n\n        this.post(\n            this._provider.route['get']['url'],\n            this.getRequestData()\n        ).then(\n            data => {\n                // Update list of objects\n                that.setObjects(data.objects || [], true);\n            },\n            errors => { console.log(errors); }\n        );\n\n        return this;\n    }\n\n    /**\n     * Get choices of entity based on search configuration (for select, auto-complete, etc.)\n     * @returns {DataService}\n     */\n    public choices(): DataService\n    {\n        let that = this,\n            noReset = true;\n\n        // Only search if parameters have changed\n        if (!this._helperService.isEqualObject(this._provider['search'], this._candidateSearch)) {\n            // Update search\n            this._provider['search'] = this._helperService.cloneObject(this._candidateSearch, true);\n            // Reset pagination for new search\n            this.resetPagination();\n            // To reset objects\n            noReset = false;\n        }\n\n        this.post(\n            this._provider.route['choices']['url'],\n            this.getRequestData(null, noReset)\n        ).then(\n            data => {\n                // Update list of objects\n                that.setObjects(data.objects || [], noReset);\n            },\n            errors => { console.log(errors); }\n        );\n\n        return this;\n    }\n\n    /**\n     * Delete object.\n     * @param index\n     * @returns {Promise}\n     */\n    public delete(index: any): Promise<any>\n    {\n        let that = this,\n            objectsProvider = (this._objectsProvider || this._provider.objects);\n\n        return new Promise(function(resolve, reject) {\n            that.post(\n                that._provider.route['delete']['url'] + '/' + objectsProvider[index]['id'],\n                that.getRequestData()\n            ).then(\n                data => {\n                    // Refresh all objects\n                    if (data.objects) {\n                        that.setObjects(data.objects);\n                    }\n\n                    // Refresh fields choices\n                    if (data.fieldsChoices) {\n                        that.setFieldsChoices(data.fieldsChoices);\n                    }\n\n                    // Refresh objects array\n                    that.pullFromObjects(index);\n\n                    that.newObject().then(\n                        data => {},\n                        errors => { console.log(errors); }\n                    );\n\n                    return resolve(true);\n                },\n                errors => { console.log(errors); return resolve(false); }\n            );\n        });\n    }\n\n    /**\n     * Order object (change priority value).\n     * @param index\n     * @param type\n     * @returns any\n     */\n    public order(index: any, type: string): any\n    {\n        let that = this,\n            objectsProvider = (this._objectsProvider || this._provider.objects);\n\n        if (OrderTypes[type] // Validate order type\n            // If priority is already in the max value (0), then 'up' doesn't make sense.\n            && ((objectsProvider[index]['priority'] > 0) || (OrderTypes[type] == 'down'))\n        ) {\n            this.post(\n                (this._provider.route['order']['url'] + '/' + objectsProvider[index]['id'] + '/' + OrderTypes[type]),\n                that.getRequestData()\n            ).then(\n                data => {\n                    // Refresh all objects\n                    if (data.objects) {\n                        that.setObjects(data.objects);\n                    }\n\n                    // Refresh fields choices\n                    if (data.fieldsChoices) {\n                        that.setFieldsChoices(data.fieldsChoices);\n                    }\n\n                    let obj = (data.object || null);\n                    // Refresh object\n                    if (obj) {\n                        that.setObject(obj, index);\n\n                        // If objects are not returned, then order objects by \"priority\" value\n                        if (!data.objects) {\n                            that._helperService.orderObjects(that._provider.objects, 'priority');\n                        }\n                    }\n                },\n                errors => {\n                    console.log(errors);\n                }\n            );\n        }\n\n        return this;\n    }\n\n    /**\n     * Delete objects from array by index.\n     * @param data\n     * @returns {DataService}\n     */\n    public deleteArray(data: any): DataService\n    {\n        let that = this;\n        let objects = this._provider.objects;\n        let idArr = [],\n            indexArr = [];\n\n        if (objects && data && (data.length > 0)) {\n            for (let obj of data) {\n                if (objects[obj.value]) {\n                    idArr.push(objects[obj.value]['id']);\n                    indexArr.push(obj.value);\n                }\n            }\n        }\n\n        this.post(\n            this._provider.route['delete']['url'],\n            this.getRequestData({id: idArr})\n        ).then(\n            data => {\n                // Refresh fields choices\n                if (data.fieldsChoices) {\n                    that.setFieldsChoices(data.fieldsChoices);\n                }\n\n                // Refresh objects array\n                // Correction for index (each time you remove an index, all indices needs to be corrected)\n                let indexCorrection = 0;\n                for (let index of indexArr) {\n                    that.pullFromObjects(index - indexCorrection);\n                    indexCorrection++;\n                }\n            },\n            errors => { console.log(errors); }\n        );\n\n        return this;\n    }\n\n    /**\n     * Detail object.\n     * @param index\n     */\n    public detail(index: any = null): void\n    {\n        return this.redirect('detail', index);\n    }\n\n    /**\n     * Redirect page.\n     * @param route\n     * @param index\n     */\n    public redirect(route: string, index: any = null): void\n    {\n        index = ((index == null) ? this._objectIndex : index);\n        let objectsProvider = (this._objectsProvider || this._provider.objects);\n\n        location.href = (this._provider.route[route]['url'] + '/' + objectsProvider[index]['id']);\n        return;\n    }\n\n    /**\n     * Post to server.\n     * @param url\n     * @param data\n     * @returns {Promise}\n     */\n    public post(url: string, data: any = null): Promise<any>\n    {\n        let that = this;\n\n        return new Promise(function(resolve, reject) {\n            return that._postService.post(\n                url,\n                data\n            ).then(\n                data => {\n                    // Update search\n                    if (data['search'] && (typeof data['search']['hasMore'] != 'undefined')) {\n                        // Equals search in provider and candidate search to avoid return false\n                        // in comparisons doing unnecessary searches.\n                        that._candidateSearch.hasMore = that._provider.search.hasMore\n                            = that._helperService.castToBoolean(data['search']['hasMore']);\n                        that._candidateSearch.offset = that._provider.search.offset\n                            = (data['search']['offset'] || 0);\n                    }\n\n                    return resolve(data);\n                },\n                errors => { return reject(errors); }\n            );\n        });\n    }\n\n    /**\n     * Get data to request\n     * @param data\n     * @param updatePagination (determines if pagination should be updated before return request data)\n     * @param hasSearch (determines if search is sent)\n     * @returns {any}\n     */\n    public getRequestData(data: any = null, updatePagination: boolean = true, hasSearch: boolean = true): any\n    {\n        // Update pagination\n        if (updatePagination) {\n            this.updatePagination();\n        }\n\n        if (!data || (typeof data == 'object')) {\n            return {\n                csrfToken: this._helperService.getGlobalVar('csrfToken'),\n                search: (hasSearch ? this._provider['search'] : null),\n                data: data\n            }\n        }\n\n        // If data is provided it's assume that is a serialized form\n        return (data + '&search=' + JSON.stringify(this._provider['search']));\n    }\n\n    /**\n     * Reset pagination offset\n     * @returns {DataService}\n     */\n    protected resetPagination(): DataService\n    {\n        this._provider.search.offset = 0;\n        return this;\n    }\n\n    /**\n     * Reset pagination offset\n     * @returns {DataService}\n     */\n    protected updatePagination(): DataService\n    {\n        this._provider.search.offset = (this._provider.objects.length - this._newObjectsIds.length);\n        return this;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/data-service/data.service.ts","import {Injectable, Inject, Injector, ReflectiveInjector, ViewContainerRef, QueryList} from '@angular/core';\nimport {DynamicComponentLoaderService} from '../dynamic-component-loader.service';\nimport {PostService} from '../post.service';\n\n\n/**\n * Interface to be implemented by parent component\n */\nexport interface INavManager {\n    /**\n     * Submit navigation (when leave one container to navigate in other one)\n     * @param index (index to validate)\n     * @returns {Promise<boolean>}\n     */\n    submitNav?(index: number): Promise<boolean>;\n\n    /**\n     * Get navigation data (needed data to lazy load container)\n     * @param index (index to load)\n     * @returns NavData\n     */\n    getNavData?(index: number): LazyLoadData;\n\n    /**\n     * Get nav providers (to lazy load components in container with dependency injection)\n     * @param index (index to load)\n     * @param data (data to resolve all providers)\n     * @returns {Array}\n     */\n    getNavProviders?(index: number, data?: any): any;\n}\n\n\n/**\n * Interface for lazy load data\n  */\nexport interface LazyLoadData {\n    module: any,\n    component: string,\n    dataProvider?: any, // All necessary data to resolve providers\n    urlProvider?: string // Url to get all necessary data to resolve providers (usually the ConfAction or DataAction)\n}\n\n\n/**\n * Navigation manager.\n * Use this class to manage the navigation between multiple containers.\n * Containers can be static or lazy load.\n * This class is defined as service because the components that use it already extends another class.\n * The component that use this service should implements the \"INavManager\" interface.\n * The init of this service should be called in \"ngAfterViewInit\" method when you have lazy load containers,\n * so the template has been rendered.\n * NOTE: Prefix \"ll\" means \"Lazy load\"\n */\n@Injectable()\nexport class NavManagerService\n{\n    // Local variables\n    protected _component: any; // Parent component that uses and implement this service\n    protected _llViewContainerRefArr: ViewContainerRef[] = [];\n    protected _llComponentRefArr: any = {}; // Array of ComponentRef with loaded containers\n    protected _currentIndex: number = 0; // Index of current container\n\n    constructor(\n        @Inject('HelperService') protected _helperService: any,\n        protected _injector: Injector,\n        protected _dynamicComponentLoaderService: DynamicComponentLoaderService,\n        protected _postService: PostService\n    ) {}\n\n    /**\n     * Initialization of service.\n     * This method should be called in \"ngAfterViewInit\" method of parent component when you have lazy load containers,\n     * so the template has been rendered.\n     * @param component (parent component)\n     * @param lazyLoadViewContainerRefQL\n     * @returns {NavManagerService}\n     */\n    public init(component: any, lazyLoadViewContainerRefQL: QueryList<ViewContainerRef> = null): NavManagerService\n    {\n        // Local variables\n        this._component = component;\n\n        if (lazyLoadViewContainerRefQL) {\n            // Get array of ViewContainerRef for lazy loader containers\n            this._llViewContainerRefArr = lazyLoadViewContainerRefQL.toArray();\n        }\n\n        return this;\n    }\n\n    /**\n     * Reset of service.\n     * This method should be called in \"ngOnDestroy\" method of parent component, so variables can be reset (free data)\n     * and the service be able to be reused.\n     */\n    public reset(): NavManagerService\n    {\n        // Local variables\n        // Needs to be reset (free data),\n        // because the service is reused and not created a new when parent component is instantiated\n        this._component = null;\n        this._llViewContainerRefArr = [];\n        this._llComponentRefArr = {};\n        this._currentIndex = 0;\n\n        return this;\n    }\n\n    /**\n     * Get current index\n     * @returns {any}\n     */\n    public getIndex(): number\n    {\n        return this._currentIndex;\n    }\n\n    /**\n     * Get componentRef of current index (if index is not provided)\n     * @param index (index of container)\n     * @returns {any}\n     */\n    public getComponentRef(index: number = null): any\n    {\n        if (index == null) {\n            index = this._currentIndex;\n        }\n        return this._llComponentRefArr[index];\n    }\n\n    /**\n     * Unset componentRef of current index (if index is not provided)\n     * @param index (index of container)\n     * @returns NavManagerService\n     */\n    public unsetComponentRef(index: number = null): NavManagerService\n    {\n        index = (index || this._currentIndex);\n\n        this._llComponentRefArr[index].destroy();\n        this._llComponentRefArr[index] = null;\n\n        return this;\n    }\n\n    /**\n     * Navigate to container.\n     * This method should be called from child component.\n     * @param index (index of container)\n     * @param hasSubmit (determines if submit should be called)\n     * @returns {Promise<boolean>}\n     */\n    public navTo(index: number, hasSubmit: boolean = true): Promise<boolean>\n    {\n        let that = this;\n            \n        return new Promise(function(resolve, reject) {\n            // Send current container to validation before load the other one\n            if (that._component['submitNav'] && hasSubmit) {\n                return that._component.submitNav(that._currentIndex).then(\n                    data => {\n                        return that.loadNav(index).then(\n                            data => { return resolve(true); },\n                            errors => { console.log(errors); return reject(false); }\n                        );\n                    },\n                    errors => { return reject(false); }\n                );\n            }\n\n            return that.loadNav(index).then(\n                data => { return resolve(true); },\n                errors => { console.log(errors); return reject(false); }\n            );\n        });\n    }\n\n    /**\n     * Navigate to container action.\n     * This method should be called from view/template.\n     * @param index (index of container)\n     * @param hasSubmit (determines if submit should be called)\n     */\n    public navToAction(index: number, hasSubmit: boolean = true): void\n    {\n        this.navTo(index, hasSubmit).then(\n            data => { return; },\n            errors => { return; }\n        );\n    }\n\n    /**\n     * Load navigation container\n     * @param index\n     * @returns {Promise<boolean>}\n     */\n    private loadNav(index): Promise<boolean>\n    {\n        let that = this;\n\n        return new Promise(function(resolve, reject) {\n            let llViewIndex = null,\n                llClass = ('js_lazyLoadContainer_' + index); // Lazy load class\n\n            // Check if is a lazy load container (by its index in class)\n            for (let index in that._llViewContainerRefArr) {\n                if ($(that._llViewContainerRefArr[index].element.nativeElement).parent().hasClass(llClass)) {\n                    llViewIndex = index;\n                    break;\n                }\n            }\n\n            if ((llViewIndex === null) // No lazy load view\n                || that._llComponentRefArr[index] // Container has been loaded\n                || !that._component['getNavData'] // Component doesn't have the necessary implementation to lazy load\n            ) {\n                that._currentIndex = index;\n                return resolve(true);\n            }\n\n            // Get child data\n            let lazyLoadData: LazyLoadData = that._component.getNavData(index);\n\n            // Load child data from url\n            if (!lazyLoadData.dataProvider && lazyLoadData.urlProvider) {\n                return that._postService.post(lazyLoadData.urlProvider, null).then(\n                    data => {\n                        lazyLoadData.dataProvider = data;\n\n                        // Load container\n                        return that.loadContainer(\n                            index,\n                            llViewIndex,\n                            lazyLoadData\n                        ).then(\n                            data => { return resolve(true); },\n                            errors => { console.log(errors); return reject(false); }\n                        );\n                    },\n                    errors => { console.log(errors); return reject(false); }\n                );\n            }\n\n            // Load container\n            return that.loadContainer(\n                index,\n                llViewIndex,\n                lazyLoadData\n            ).then(\n                data => { return resolve(true); },\n                errors => { console.log(errors); return reject(false); }\n            );\n        });\n    }\n\n    /**\n     * Load container\n     * @param index\n     * @param lazyLoadViewIndex (lazy load view index)\n     * @param lazyLoadData\n     * @returns {Promise<boolean>}\n     */\n    private loadContainer(index, lazyLoadViewIndex, lazyLoadData: LazyLoadData): Promise<boolean>\n    {\n        let providers = (this._component['getNavProviders']\n                ? this._component.getNavProviders(index, lazyLoadData.dataProvider)\n                : null\n        );\n\n        let viewContainerRef: ViewContainerRef = this._llViewContainerRefArr[lazyLoadViewIndex];\n\n        let injector = null;\n        if (providers) {\n            injector = ReflectiveInjector.fromResolvedProviders(\n                ReflectiveInjector.resolve(providers),\n                this._injector\n            );\n        }\n\n        let that = this;\n\n        return this._dynamicComponentLoaderService.load(\n            lazyLoadData.module,\n            lazyLoadData.component,\n            viewContainerRef,\n            injector\n        ).then(\n            componentRef => {\n                that._llComponentRefArr[index] = componentRef;\n                that._currentIndex = index;\n                return true;\n            },\n            errors => { console.log(errors); return null; }\n        );\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/nav-manager/nav-manager.service.ts","import {DataServiceProvider} from './data-service/data-service-provider';\nimport {TreeViewProvider} from './tree-view/tree-view-provider';\nimport {DataBoxProvider} from './data-box/data-box-provider';\nimport {ImageProvider} from './image/image-provider';\nimport {BaseProvider} from './base/base-provider';\nimport {BoxProvider} from './box/box-provider';\nimport {FormProvider} from './form/form-provider';\nimport {WizardPopupProvider} from './wizard/wizard-popup-provider';\nimport {EntityDetailProvider} from './entity-detail/entity-detail-provider';\nimport {ActionsServiceProvider} from './actions/actions-service-provider';\n\n/**\n * Helper with common functions\n */\nexport class Helper {\n    // Object to use in angular component at runtime.\n    private static runtimeVar = {};\n\n    /**\n     * Get object length\n     * @param object\n     * @returns {number}\n     */\n    public static objectLength(object: any): number\n    {\n        return Object.keys(object || {}).length;\n    }\n\n    /**\n     * Get object keys\n     * @param object\n     * @returns {string[]|Array}\n     */\n    public static objectKeys(object: any): any\n    {\n        return Object.keys(object || {}) || [];\n    }\n\n    /**\n     * Convert a list of object to an array\n     * @param objects\n     * @returns {string[]|Array}\n     */\n    public static objectsToArray(objects: any): any\n    {\n        let objectsArray = [];\n        for (let key in (objects || {})) {\n            objectsArray.push({key: key, value: objects[key]});\n        }\n        return objectsArray;\n    }\n\n    /**\n     * Compare if object1 is equal to object2\n     * @param object1\n     * @param object2\n     * @returns {boolean}\n     */\n    public static isEqualObject(object1: any, object2: any): boolean\n    {\n        return (JSON.stringify(object1) === JSON.stringify(object2));\n    }\n\n    /**\n     * Cast to boolean\n     * @param value\n     * @returns {boolean}\n     */\n    public static castToBoolean(value): boolean\n    {\n        return Helper.inArray(value, ['true', 1, true, '1'])\n    }\n\n    /**\n     * Clone object\n     * @param object\n     * @param recursive\n     * @returns {any}\n     */\n    public static cloneObject(object: any, recursive = false): any\n    {\n        return $.extend(recursive, {}, object);\n    }\n\n    /**\n     * Merge objects into a new object\n     * @param object1\n     * @param object2\n     * @param recursive\n     * @returns {any}\n     */\n    public static mergeObjects(object1: any, object2: any, recursive = false): any\n    {\n        return $.extend(recursive, object1, object2);\n    }\n\n    /**\n     * Check if value exists in array\n     * @param value\n     * @param array\n     */\n    public static inArray(value: any, array: any): boolean\n    {\n        return (($.inArray(value, array) >= 0) ? true : false);\n    }\n\n    /**\n     * Search value in array\n     * @param value\n     * @param array\n     */\n    public static arraySearch(value: any, array: any): number\n    {\n        let index = $.inArray(value, array);\n        return ((index >= 0) ? index : null);\n    }\n\n    /**\n     * Order objects by key\n     * @param objects\n     * @param key\n     * @returns {any}\n     */\n    public static orderObjects(objects: any, key: string): any\n    {\n        if (objects) {\n            objects.sort(function (obj1, obj2) {\n                // If key is equal, then sort by id desc\n                let orderKey = ((obj1[key] == obj2[key]) ? 'id' : key);\n                return ((obj1[orderKey] > obj2[orderKey]) ? 1 : 0);\n            });\n        }\n\n        return objects;\n    }\n\n    /**\n     * Get global var\n     * @param index\n     * @returns {any}\n     */\n    public static getGlobalVar(index: string): any\n    {\n        if (index in _app) {\n            return _app[index];\n        }\n        return null;\n    }\n\n    /**\n     * Set global var\n     * @param index\n     * @param value\n     * @returns {Helper}\n     */\n    public static setGlobalVar(index: string, value: any): Helper\n    {\n        _app[index] = value;\n        return Helper;\n    }\n\n    /**\n     * Delete global var\n     * @param index\n     * @returns {Helper}\n     */\n    public static deleteGlobalVar(index: string): Helper\n    {\n        if (index in _app) {\n            delete _app[index];\n        }\n        return Helper;\n    }\n\n    /**\n     * Get data-box service provider\n     * @param data\n     * @returns any\n     */\n    public static getDataServiceProvider(data: any): DataServiceProvider\n    {\n        return {\n            fields: data.fields || null,\n            fieldsChoices: data.fieldsChoices || null,\n            search: data.search || null,\n            object: data.object || null,\n            objects: data.objects || null,\n            route: data.route || null,\n            extraData: ((data.extraData && data.extraData.service) ? data.extraData.service : null),\n            localData: (data.localData || null),\n        };\n    }\n\n    /**\n     * Get tree-view provider\n     * @param data\n     * @returns any\n     */\n    public static getTreeViewProvider(data: any): TreeViewProvider\n    {\n        return Helper.mergeObjects(\n            Helper.getDataBoxProvider(data),\n            {\n                iconDefault: (data.treeView.iconDefault || null),\n                iconField: (data.treeView.iconField || null),\n                iconFieldMap: (data.treeView.iconFieldMap || {})\n            }\n        );\n    }\n\n    /**\n     * Get image provider\n     * @param data\n     * @param localData supplied by module/component\n     * @returns any\n     */\n    public static getImageProvider(data: any, localData: any): ImageProvider\n    {\n        return Helper.mergeObjects(\n            Helper.getDataBoxProvider(data),\n            {\n                imageCropPopupModule: localData['imageCropPopupModule']\n            }\n        );\n    }\n\n    /**\n     * Get data-box provider\n     * @param data\n     * @returns any\n     */\n    public static getDataBoxProvider(data: any): DataBoxProvider\n    {\n        return Helper.getBoxProvider(data);\n    }\n\n    /**\n     * Get box provider\n     * @param data\n     * @returns any\n     */\n    public static getBoxProvider(data: any): BoxProvider\n    {\n        return Helper.mergeObjects(\n            Helper.getBaseProvider(data),\n            {\n                label: data.label || '',\n                controls: {\n                    expander: (data.controls && data.controls.expander),\n                    resizable: (data.controls && data.controls.resizable),\n                }\n            }\n        );\n    }\n\n    /**\n     * Get box provider\n     * @param data\n     * @returns any\n     */\n    public static getEntityDetailProvider(data: any): EntityDetailProvider\n    {\n        return Helper.mergeObjects(\n            Helper.getBaseProvider(data),\n            {\n                popup: null // Create this value in component\n            }\n        );\n    }\n\n    /**\n     * Get base provider\n     * @param data\n     * @returns any\n     */\n    public static getBaseProvider(data: any): BaseProvider\n    {\n        return {\n            extraData: ((data.extraData && data.extraData.template) ? data.extraData.template : null)\n        };\n    }\n\n    /**\n     * Get data box form provider\n     * @param data\n     * @returns any\n     */\n    public static getFormProvider(data: any): FormProvider\n    {\n        return {\n            label: data.label || ''\n        };\n    }\n\n    /**\n     * Get data box form provider\n     * @param data\n     * @returns any\n     */\n    public static getWizardPopupProvider(data: any): WizardPopupProvider\n    {\n        return {\n            label: data.label || ''\n        };\n    }\n\n    /**\n     * Get actions provider\n     * @param data\n     * @returns {any}\n     */\n    public static getActionsServiceProvider(data: any): ActionsServiceProvider\n    {\n        return (data.actions);\n    }\n\n    /**\n     * Set runtime var\n     * @param key\n     * @param value\n     * @returns {Helper}\n     */\n    public static setRuntimeVar(key: string, value: any): Helper\n    {\n        Helper.runtimeVar[key] = value;\n        return Helper;\n    }\n\n    /**\n     * Get runtime var\n     * @param key\n     * @param defaultValue\n     * @returns {any}\n     */\n    public static getRuntimeVar(key: string, defaultValue = null): string\n    {\n        if (key in Helper.runtimeVar) {\n            return Helper.runtimeVar[key];\n        }\n        return defaultValue;\n    }\n\n    /**\n     * Get upload web path\n     * @param path\n     * @returns string\n     */\n    public static getUploadWebPath(path: string): string\n    {\n        if (path && path.indexOf(\"/upload/\")) {\n            return (path.substring(path.indexOf(\"/upload/\"), path.length));\n        }\n        return path;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/helper.ts","import {Component, ElementRef, Injector, Inject, Renderer, ViewContainerRef} from '@angular/core';\nimport {DataService} from '../../../../../../AppBundle/Resources/public/ts/data-service/data.service';\nimport {TreeViewDataService} from '../../../../../../AppBundle/Resources/public/ts/data-service/tree-view-data.service';\nimport {ActionsService} from '../../../../../../AppBundle/Resources/public/ts/actions/actions.service';\nimport {Helper} from '../../../../../../AppBundle/Resources/public/ts/helper';\nimport {ModalService} from '../../../../../../AppBundle/Resources/public/modal/ts/modal.service';\nimport {NavManagerService} from '../../../../../../AppBundle/Resources/public/ts/nav-manager/nav-manager.service';\nimport {FormService} from '../../../../../../AppBundle/Resources/public/ts/form/form.service';\nimport {TabsComponent, ITabs, LazyLoadData} from '../../../../../../AppBundle/Resources/public/ts/tabs/tabs.component';\n\n/* Import dependencies */\n// Save last templateUrl\nlet tmpTemplateUrl = Helper.getRuntimeVar('templateUrl');\n\n// UserGroupAclMenu\nHelper.setRuntimeVar('templateUrl', _app.dependency['userGroupAclMenu']['route']['edit']['url']);\nimport {TreeViewFormAclExtensionModule} from '../../../../../../AppBundle/Resources/public/ts/tree-view/tree-view-form-acl.extension-module';\n\n// UserGroupAclUser\nHelper.setRuntimeVar('templateUrl', _app.dependency['userGroupAclUser']['route']['edit']['url']);\nimport {MainExtensionModule as UserGroupAclUserModule} from '../../../user-group-acl-user/ts/main.extension-module';\n\n// Restore last templateUrl\nHelper.setRuntimeVar('templateUrl', tmpTemplateUrl);\n/* /Import dependencies */\n\n\n@Component({\n    selector: '#js_main',\n    templateUrl: Helper.getGlobalVar('route') + 'admin/user-group-acl/detail-tabs'\n})\nexport class MainComponent extends TabsComponent implements ITabs\n{\n    protected _dependenciesData: any[];\n\n    constructor(\n        elementRef: ElementRef,\n        renderer: Renderer,\n        @Inject('Provider') provider: any,\n        @Inject('HelperService') helperService: any,\n        navManagerService: NavManagerService,\n        protected _modalService: ModalService,\n        protected viewContainerRef: ViewContainerRef\n    ) {\n        super(\n            elementRef,\n            renderer,\n            provider,\n            helperService,\n            navManagerService\n        );\n\n        this._modalService.init(viewContainerRef);\n        this._dependenciesData = this._helperService.getGlobalVar('dependency');\n    }\n    \n    /**\n     * Get navigation data (needed data to lazy load container)\n     * @param index (index to load)\n     * @returns NavData\n     */\n    public getNavData(index: number): LazyLoadData\n    {\n        switch (index) {\n            case 0:\n                return {\n                    module: TreeViewFormAclExtensionModule,\n                    component: 'TreeViewFormComponent',\n                    dataProvider: this._dependenciesData['userGroupAclMenu']\n                };\n            case 1:\n                return {\n                    module: UserGroupAclUserModule,\n                    component: 'MainComponent',\n                    dataProvider: this._dependenciesData['userGroupAclUser']\n                }\n        }\n\n        return null;\n    }\n\n    /**\n     * Get nav providers (to lazy load components in container with dependency injection)\n     * @param index (index to load)\n     * @param data (data to resolve all providers)\n     * @returns {Array}\n     */\n    public getNavProviders(index: number, data = null): any\n    {\n        let providers = [];\n\n        switch (index) {\n            case 0:\n                providers = [\n                    {provide: 'DataService', useClass: TreeViewDataService},\n                    {provide: 'Provider', useValue: this._helperService.getTreeViewProvider(data)}\n                ];\n                break;\n            case 1:\n                providers = [\n                    {provide: 'DataService', useClass: DataService},\n                    FormService,\n                    {provide: 'Provider', useValue: this._helperService.getDataBoxProvider(data)},\n                    {provide: 'AutoCompleteProviders', useValue: {\n                        userObj: {\n                            urlConf: (Helper.getGlobalVar('route') + 'admin/user/conf'),\n                            urlChoicesParams: '/1',\n                            control: 'save'\n                        }\n                    }}\n                ];\n                break;\n        }\n\n        providers = providers.concat([\n            ActionsService,\n            {provide: 'Popups', useValue: null},\n            {provide: 'DataServiceProvider', useValue: this._helperService.getDataServiceProvider(data)},\n            {provide: 'ActionsServiceProvider', useValue: this._helperService.getActionsServiceProvider(data)}\n        ]);\n\n        return providers;\n    }\n\n    /**\n     * Lifecycle callback\n     */\n    ngAfterViewInit()\n    {\n        super.ngAfterViewInit();\n\n        // Open the first tab\n        this._navManagerService.navTo(0);\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AdminBundle/Resources/public/user-group-acl/detail/ts/main.component.ts","import {Injectable, Inject, EventEmitter} from '@angular/core';\nimport {DomSanitizer} from '@angular/platform-browser';\nimport {PostService} from '../post.service';\nimport {DataService, DataServiceProvider} from './data.service';\n\n// Re-exports\nexport {DataServiceProvider};\n\n\n/**\n * This class handles with data in tree-view context.\n * Tree-view are a different objects array structure (hierarchical) than a regular DataService.\n */\n@Injectable()\nexport class TreeViewDataService extends DataService\n{\n    // Index in _provider.objects that contents the partial _objectsProvider of _provider.objects\n    // where the object is housed\n    protected _objectsProviderIndex: number = null;\n\n    constructor(\n        postService: PostService,\n        @Inject('HelperService') helperService: any,\n        @Inject('DataServiceProvider') provider: DataServiceProvider,\n        sanitizer: DomSanitizer\n    ) {\n        super(\n            postService,\n            helperService,\n            provider,\n            sanitizer\n        );\n    }\n\n    /**\n     * Get object index\n     * @returns any\n     */\n    public getObjectIndex(): any\n    {\n        return {'objIndex': this._objectIndex, 'parentNodeIndex': this._objectsProviderIndex};\n    }\n\n    /**\n     * Select object\n     * @param index\n     * @returns {Promise}\n     */\n    public selectObject(index: any): Promise<any>\n    {\n        let that = this,\n            objIndex = (index ? index['objIndex'] : null),\n            parentNodeIndex = (index ? index['parentNodeIndex'] : null);\n\n        return new Promise(function(resolve, reject) {\n            // Set only if object is different\n            if((objIndex != that._objectIndex) || (parentNodeIndex != that._objectsProviderIndex)) {\n                let objectsProvider = that._provider.objects[parentNodeIndex];\n\n                that._postService.post(\n                    that._provider.route['get']['url'] + '/' + objectsProvider[objIndex]['id'],\n                    that.getRequestData()\n                ).then(\n                    data => {\n                        // The index of original object that was selected\n                        that._objectIndex = objIndex;\n                        that._objectsProviderIndex = parentNodeIndex;\n\n                        that.setLocalObject(data.object);\n                        that._normalizedObject = objectsProvider[objIndex];\n                        return resolve(true);\n                    },\n                    errors => { console.log(errors); reject(false); });\n            } else {\n                return resolve(true);\n            }\n        });\n    }\n\n    /**\n     * Set object (when the object is changed out of the objects array from _provider,\n     * can be an external order)\n     * @param object\n     * @param index (can be only an index from DataService, or and object from out of service)\n     * @returns any\n     */\n    public setObject(object: any, index: any = null): any\n    {\n        let objIndex = (index\n                ? (index['objIndex']\n                    ? index['objIndex'] // From out of service\n                    : index // From DataService\n                )\n                : null // Not defined\n        );\n\n        if (object && object['id']) { // Ignore new objects (no id defined)\n            let oldParentNodeIndex = (index\n                    ? (index['parentNodeIndex']\n                        ? index['parentNodeIndex'] // From out of service\n                        : this._objectsProviderIndex // From DataService\n                    )\n                    : null // Not defined\n            );\n            let newParentNodeIndex = (object[this._provider.extraData['treeView']['parentNodeField']] || 0);\n\n            // Create a new array entry for parent node, if not exist yet\n            if (!(newParentNodeIndex in this._provider.objects)) {\n                this._provider.objects[newParentNodeIndex] = [];\n            }\n\n            // Remove from old parent node\n            if ((oldParentNodeIndex != null) && (oldParentNodeIndex != newParentNodeIndex)) {\n                this._objectsProvider = this._provider.objects[oldParentNodeIndex];\n                this.pullFromObjects(objIndex);\n                this._provider.objects[newParentNodeIndex].unshift(object); // Add new entry in new parent node\n                objIndex = 0; // Index of new entry in parent (to be marked as edited)\n            }\n\n            this._objectsProviderIndex = newParentNodeIndex;\n            this._objectsProvider = this._provider.objects[newParentNodeIndex];\n\n        } else {\n            this._objectsProviderIndex = null;\n        }\n\n        super.setObject(object, objIndex);\n\n        return this;\n    }\n\n    /**\n     * Normalize objects to show in template\n     * Detect fields that needs to be rendered to view/template\n     * @param objects\n     * @param fields\n     * @returns any\n     */\n    protected normalizeObjectsToTemplate(objects: any = null, fields: any[] = null): any\n    {\n        objects = (objects || this._provider.objects);\n\n        // Object with nodes\n        if (typeof objects == 'object') {\n            for (let objNodes of objects) {\n                super.normalizeObjectsToTemplate(objNodes, fields);\n            }\n        } else { // Sample array of objects\n            super.normalizeObjectsToTemplate(objects, fields);\n        }\n\n        return this;\n    }\n\n    /**\n     * New object (call this function to create a new object)\n     * @param index\n     * @returns {Promise}\n     */\n    public newObject(index: any = null): Promise<any> {\n        let objIndex = (index ? index['objIndex'] : null),\n            parentNodeIndex = (index ? index['parentNodeIndex'] : null);\n\n        this._objectsProvider = ((parentNodeIndex != null) ? this._provider.objects[parentNodeIndex] : null);\n\n        return super.newObject(objIndex);\n    }\n\n    /**\n     * Delete object.\n     * @param index\n     * @returns {Promise}\n     */\n    public delete(index: any): Promise<any>\n    {\n        let objIndex = (index ? index['objIndex'] : null),\n            parentNodeIndex = (index ? index['parentNodeIndex'] : null);\n\n        this._objectsProvider = ((parentNodeIndex != null) ? this._provider.objects[parentNodeIndex] : null);\n\n        return super.delete(objIndex);\n    }\n\n    /**\n     * Detail object.\n     * @param index\n     */\n    public detail(index: any = null): void\n    {\n        let objIndex = (index ? index['objIndex'] : this._objectIndex),\n            parentNodeIndex = (index ? index['parentNodeIndex'] : this._objectsProviderIndex);\n\n        this._objectsProvider = ((parentNodeIndex != null) ? this._provider.objects[parentNodeIndex] : null);\n\n        super.detail(objIndex);\n\n        return;\n    }\n\n    /**\n     * Set objects\n     * @param objects\n     * @param isMerge (if true merge objects, otherwise replace them)\n     * @returns any\n     */\n    public setObjects(objects: any, isMerge: boolean = false): any\n    {\n        objects = (objects || {});\n\n        this.normalizeObjectsToTemplate(objects);\n\n        this.resetObjects();\n\n        for (let objNodesIndex in objects) {\n            this._objectsProvider = [];\n            this.pushToObjects(objects[objNodesIndex]);\n            this._provider.objects[objNodesIndex] = this._objectsProvider;\n        }\n\n        this.newObject().then( // Reset object, index and all information of object can be changed\n            data => {},\n            errors => { console.log(errors); }\n        );\n\n        // Emmit changes\n        this._onObjectsChangeEmitter.emit(objects);\n\n        return this;\n    }\n\n    /**\n     * Reset objects\n     * @returns {DataService}\n     */\n    protected resetObjects() {\n        super.resetObjects();\n        this._provider.objects = {};\n        return this;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/data-service/tree-view-data.service.ts","import {Injectable, ElementRef, Inject, Injector, Renderer, EventEmitter} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {DataService} from '../data-service/data.service';\nimport {ModalService} from '../../modal/ts/modal.service';\nimport {Helper} from '../helper';\n\n/**\n * Interface to be implemented by parent component\n */\nexport interface IForm {\n    /**\n     * ElementRef to handle with DOM\n     */\n    _elementRef: ElementRef; // For component that not extends the popup\n}\n\n\n@Injectable()\nexport class FormService\n{\n    // Local variables\n    protected _component: any; // Parent component that uses and implement this service\n    protected _originalObject: any = {}; // Original object to compare changes and reset object in DataService\n    protected _originalNormalizedObject: any = {}; // Original normalized object to compare changes and reset object in form\n    protected _object: any = {}; // Object used by form\n    protected _onObjectChangeSubscription: any; // To get notify about changes on object over the service\n    protected _$form = null; // DOM form\n    protected _form: FormGroup; // Angular Form\n    protected _errors: any = {}; // Form errors validation\n    // Controls if the form is on \"save\" mode (waiting to finish the save process). It's useful to control the\n    // save action (avoid multiples clicks on button) and to recognize the object change after saved by DataService.\n    protected _isOnSave: boolean = false;\n\n    // Subscribed for FieldTypes\n    private _onObjectChangeEmitter: EventEmitter<any>; // When the object change\n\n    constructor(\n        protected _modalService: ModalService,\n        formBuilder: FormBuilder,\n        @Inject('DataService') protected _dataService: any,\n        @Inject('HelperService') protected _helperService: any\n    ) {\n        this._onObjectChangeEmitter = new EventEmitter();\n\n        // Object change event subscription\n        this._onObjectChangeSubscription = this._dataService.getOnObjectChangeEmitter()\n            .subscribe(object => this.onObjectChangeSubscription(object));\n\n        // Set object\n        this.setObject(this._dataService.getObject());\n\n        // Form build\n        let formControls = {},\n            fields = (this._dataService.getFields('form') || []).concat(\n                this._helperService.objectKeys(this._dataService.getProviderExtraDataAttr('fields'))\n            );\n        for (let field of fields) {\n            formControls[field] = [this._object[field] || null];\n        }\n        this._form = formBuilder.group(formControls);\n    }\n\n    /**\n     * Initialization of service.\n     * This method should be called in \"ngOnInit\" method of parent component,\n     * so the template has been rendered.\n     * @param component (parent component)\n     * @returns {FormService}\n     */\n    public init(component: any): FormService\n    {\n        // Local variables\n        this._component = component;\n        this._$form = $(component._elementRef.nativeElement).find('form');\n\n        return this;\n    }\n\n    /**\n     * Get form object emitter to tell all subscribers about changes\n     * @returns {EventEmitter<any>}\n     */\n    public getOnObjectChangeEmitter() {\n        return this._onObjectChangeEmitter;\n    }\n\n    /**\n     * On object change subscription. Handle with object changes in DataService.\n     * @param object\n     */\n    public onObjectChangeSubscription(object: any): void\n    {\n        // Set object only if is different\n        if (object != this._originalObject) {\n            if (this._isOnSave) {\n                // Form is waiting for save process, this is the saved object,\n                // it's not necessary any confirmation, if you need more security in this process, add a token.\n                this.setObject(object);\n                return;\n            }\n\n            // Regular change in object\n            this.confirmAndSetObject(object).then(\n                data => { return; },\n                errors => { return; }\n            );\n        }\n    }\n\n    /**\n     * Confirm and set object. Check for object changes and confirm with the user to discard them, then set\n     * the object according with the ser response.\n     * @param object\n     * @returns {Promise}\n     */\n    public confirmAndSetObject(object: any): Promise<any>\n    {\n        let that = this;\n\n        return new Promise(function(resolve, reject) {\n            // Current form object has changes from user?\n            if(that.hasChanges()) {\n                // Dialog message\n                return that._modalService.dialog().then(\n                    hasConfirm => {\n                        if (hasConfirm) {\n                            that.setObject(object);\n                            return resolve(true);\n                        } else {\n                            // Keep the object in DataService\n                            that._dataService.setObject(that._originalObject);\n                            return reject(false);\n                        }\n                    },\n                    errors => { console.log(errors); return reject(false); }\n                );\n            } else {\n                that.setObject(object);\n                return resolve(true);\n            }\n        });\n    }\n\n    /**\n     * Set object\n     * @param object\n     * @returns {FormService}\n     */\n    public setObject(object: any): FormService\n    {\n        // Set only if is a different object\n        if (object != this._originalObject) {\n            // Keep the original object from dataService\n            this._originalObject = object;\n            this._isOnSave = false; // Waiting mode for save process ends here, after update the original object.\n\n            // Normalize object to form\n            this._originalNormalizedObject = Helper.cloneObject(this._originalObject, true);\n            this.normalizeObject(this._originalNormalizedObject);\n\n            // Update form object\n            this._object = Helper.cloneObject(this._originalNormalizedObject, true);\n\n            // Reset errors\n            this._errors = {};\n\n            this._onObjectChangeEmitter.emit(this._object); // Object as changed to the original, notify subscribers\n        }\n        return this;\n    }\n\n    /**\n     * Normalize objects to form\n     * Detect fields that needs to be normalized\n     * @param object\n     * @param fields\n     * @returns {FormService}\n     */\n    protected normalizeObject(object, fields: any = null): FormService\n    {\n        fields = (fields || this._dataService.getProviderAttr('fields')['form']);\n\n        if(object && fields) {\n            let fieldsMetadata = this._dataService.getProviderAttr('fields')['metadata'];\n\n            for (let field of fields) {\n                let fieldMetadata = fieldsMetadata[field];\n\n                switch (fieldMetadata['type']) {\n                    case 'date':\n                        object[field] = this.normalizeValue(object[field], fieldMetadata['type']);\n                        break;\n                }\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Normalize value to form\n     * @param value\n     * @param type\n     * @returns any\n     */\n    protected normalizeValue(value, type): any\n    {\n        switch (type) {\n            case 'date':\n                if (value && (typeof value == 'string')) {\n                    let dateArr = value.split(\"-\");\n                    return {\n                        year: parseInt(dateArr[0]),\n                        month: parseInt(dateArr[1]),\n                        day: parseInt(dateArr[2])\n                    };\n                }\n                return value;\n        }\n    }\n\n    /**\n     * Get object\n     * @returns any\n     */\n    public getObject(): any\n    {\n        return this._object;\n    }\n\n    /**\n     * Check if the object has changes from user\n     * @returns boolean\n     */\n    public hasChanges(): boolean\n    {\n        return !this._helperService.isEqualObject(this._object, this._originalNormalizedObject);\n    }\n\n    /**\n     * Get form\n     * @returns any\n     */\n    public getForm(): any\n    {\n        return this._form;\n    }\n\n    /**\n     * Set errors\n     * @param errors\n     * @returns {FormService}\n     */\n    public setErrors(errors: any): FormService\n    {\n        this._errors = (errors || {});\n        return this;\n    }\n\n    /**\n     * Get errors\n     * @returns any\n     */\n    public getErrors(): any\n    {\n        return this._errors;\n    }\n\n    /**\n     * Set form field value\n     * @param field\n     * @param value\n     */\n    public setFormFieldValue(field: string, value: any): void\n    {\n        if (value && (field in this._object)) {\n            this._object[field] = value;\n        }\n    }\n\n    /**\n     * Get view object (normalized object in DataService)\n     * @returns {any|{}}\n     */\n    public getViewObject(): any\n    {\n        return (this._dataService.getNormalizedObject() || {});\n    }\n\n    /**\n     * Save form. Handle submit form.\n     * This method should be called from child component.\n     * @param route (optional route to overrides default route)\n     * @param forceSubmit (force form to submit even if object has no changes)\n     * @param hasValidation\n     * @returns {Promise}\n     */\n    public save(route: string = null, forceSubmit = false, hasValidation: boolean = true): Promise<any>\n    {\n        let that = this;\n\n        return new Promise(function(resolve, reject) {\n            if (that._isOnSave) {\n                // Form is already in save process\n                return reject(false);\n            }\n\n            // Put form in \"save\" mode\n            that._isOnSave = true;\n\n            // Current form object has changes from user?\n            if(forceSubmit || !that._object['id'] || that.hasChanges()) {\n\n                // Validate form\n                if (hasValidation) {\n                    that._errors = {};\n                    for (let control in that._form.controls) {\n                        if (!that._form.controls[control].valid) {\n                            that._errors[control] = ['Required'];\n                        }\n                    }\n                    if (that._helperService.objectLength(that._errors) > 0) {\n                        that._isOnSave = false;\n                        return reject(false);\n                    }\n                }\n\n                // Get form data\n                let data = that._$form.serialize();\n                let id = that._object['id'] ? that._object['id'] : null;\n\n                // Save form\n                that._dataService.save(data, id, route).then(\n                    object => {\n                        // Update form after save with saved object\n                        that.setObject(object);\n                        return resolve(true);\n                    },\n                    errors => {\n                        if (errors) { that._errors = errors; }\n                        that._isOnSave = false;\n                        return reject(errors);\n                    }\n                );\n            } else {\n                that._isOnSave = false;\n                return resolve(true);\n            }\n        });\n    }\n\n    /**\n     * Save action.\n     * This method should be called from view/template.\n     * @param $event\n     */\n    public saveAction($event: any = null): void\n    {\n        if ($event) { $event.preventDefault(); }\n        this.save().then(\n            data => { return; },\n            errors => { return; }\n        );\n    }\n\n    /**\n     * Save and enter to detail action.\n     * This method should be called from view/template.\n     * @param $event\n     */\n    public saveAndEnterAction($event: any = null): void\n    {\n        if ($event) { $event.preventDefault(); }\n\n        let that = this;\n\n        this.save().then(\n            data => {\n                this._dataService.detail();\n                return;\n            },\n            errors => { return; }\n        );\n    }\n\n    /**\n     * Save and add a new entry.\n     * This method should be called from view/template.\n     * @param $event\n     */\n    public saveAndNewAction($event: any = null): void\n    {\n        if ($event) { $event.preventDefault(); }\n        this.save().then(\n            data => {\n                this._dataService.newObject();\n                return;\n            },\n            errors => { return; }\n        );\n    }\n\n    /**\n     * Reset object.\n     * This method should be called from child component.\n     * @param hasConfirm (launch confirm to user if object has unsaved changes)\n     * @returns {Promise}\n     */\n    public reset(hasConfirm: boolean = true): Promise<any>\n    {\n        let that = this;\n\n        return new Promise(function(resolve, reject) {\n            if(that.hasChanges()) {\n                if (hasConfirm) {\n                    return that.confirmAndSetObject(that._originalNormalizedObject).then(\n                        data => { return resolve(true); },\n                        errors => { return reject(false); }\n                    );\n                } else {\n                    that.setObject(that._originalNormalizedObject);\n                    return resolve(true);\n                }\n            } else {\n                return resolve(true);\n            }\n        });\n    }\n\n    /**\n     * Reset action.\n     * This method should be called from view/template.\n     * @param $event\n     */\n    public resetAction($event: any = null): void\n    {\n        if ($event) { $event.preventDefault(); }\n        this.reset().then(\n            data => { return; },\n            errors => { return; }\n        );\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/form/form.service.ts","import {Component, Optional, ElementRef, Inject, Renderer, QueryList, ViewContainerRef, ViewChildren} from '@angular/core';\nimport {Helper} from './../../../../../AppBundle/Resources/public/ts/helper';\nimport {BaseComponent} from './../../../../../AppBundle/Resources/public/ts/base/base.component';\nimport {NavManagerService, INavManager as ITabs, LazyLoadData} from '../nav-manager/nav-manager.service';\n\n// Reexports\nexport {ITabs, LazyLoadData};\n\n\n@Component({\n    selector: '.js_tabs',\n    templateUrl: Helper.getRuntimeVar('templateUrl')\n})\nexport abstract class TabsComponent extends BaseComponent {\n    // For NavManagerService\n    @ViewChildren('js_lazyLoadContainer', {read: ViewContainerRef}) lazyLoadViewContainerRefQL: QueryList<ViewContainerRef>;\n    \n    constructor(\n        elementRef: ElementRef,\n        renderer: Renderer,\n        @Optional() @Inject('Provider') provider: any,\n        @Inject('HelperService') protected _helperService: any,\n        protected _navManagerService: NavManagerService\n    ) {\n        super(\n            elementRef,\n            renderer,\n            provider || null\n        );\n    }\n\n    /**\n     * Lifecycle callback\n     */\n    ngAfterViewInit()\n    {\n        // Initializes the children navigation manager service\n        this._navManagerService.init(this, this.lazyLoadViewContainerRefQL);\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/tabs/tabs.component.ts","import {Component, ElementRef, Renderer} from '@angular/core';\nimport {BaseProvider} from './base-provider';\n\n// Re-exports\nexport {BaseProvider}\n\n\n/**\n * Used only as base component to be extended for others components\n */\n// Component\n@Component({\n    selector: '.js_base',\n    template: ''\n})\nexport abstract class BaseComponent {\n    constructor(\n        protected _elementRef: ElementRef,\n        protected _renderer: Renderer,\n        // This provider can becomes any provider defined by your child\n        // (don't need the \"inject\" because it's a static class, so will be provider by children components)\n        protected _provider: BaseProvider\n    ) {\n        // Set defaults\n        if (!this._provider) {\n            this._provider = [];\n        }\n\n        // Set main class\n        let mainClass = this.getProviderExtraDataAttr('class');\n        if (mainClass) {\n            this._renderer.setElementClass(\n                this._elementRef.nativeElement,\n                mainClass,\n                true\n            );\n        }\n    }\n\n    /**\n     * Get provider attribute\n     * @param attribute\n     * @returns {any|null}\n     */\n    protected getProviderAttr(attribute: string): any\n    {\n        return this._provider[attribute] || null;\n    }\n\n    /**\n     * Get provider extra data attribute\n     * @param attribute\n     * @returns {any|null}\n     */\n    public getProviderExtraDataAttr(attribute: string): any\n    {\n        return (\n            (this._provider['extraData'] && this._provider['extraData'][attribute])\n                ? this._provider['extraData'][attribute]\n                : null\n        );\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/base/base.component.ts","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {SearchModule} from '../search/search.module';\nimport {ExpanderModule} from '../expander/expander.module';\nimport {TreeViewFormComponent} from './tree-view-form.component';\nimport {TreeViewNodeComponent} from './tree-view-node.component';\nimport {TreeViewControlFormTypeAclComponent} from './controls/tree-view-control-form-type-acl.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        SearchModule,\n        ExpanderModule\n    ],\n    declarations: [\n        TreeViewFormComponent,\n        TreeViewNodeComponent,\n        TreeViewControlFormTypeAclComponent\n    ],\n    exports: [TreeViewFormComponent]\n})\nexport class TreeViewFormAclExtensionModule {}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/tree-view/tree-view-form-acl.extension-module.ts","import {Component, Inject, Injector, ViewContainerRef, Renderer} from '@angular/core';\nimport {TreeViewDataService as DataService} from '../data-service/tree-view-data.service';\nimport {ActionsService} from '../actions/actions.service';\nimport {Popup, Popups} from '../data-box/data-box.component';\nimport {ModalService} from '../../modal/ts/modal.service';\nimport {TreeViewComponent, TreeViewProvider} from './tree-view.component';\nimport {Helper} from '../helper.ts';\n\n// Re-exports\nexport {TreeViewProvider}\n\n\n@Component({\n    selector: '.js_treeViewForm',\n    templateUrl: Helper.getRuntimeVar('templateUrl')\n})\nexport class TreeViewFormComponent extends TreeViewComponent\n{\n    protected _$form = null; // Object form\n    protected _nodes: any; // Copy of objects to control user changes\n    protected _onObjectsChangeSubscription: any; // To get notify about changes on objects over the service\n\n    constructor(\n        viewContainerRef: ViewContainerRef,\n        renderer: Renderer,\n        @Inject('Provider') provider: TreeViewProvider,\n        @Inject('DataService') dataService: any,\n        actionsService: ActionsService,\n        modalService: ModalService,\n        @Inject('Popups') popups: Popups | Popup,\n        injector: Injector,\n        @Inject('HelperService') protected _helperService: any\n    ) {\n        // Call parent\n        super(\n            viewContainerRef,\n            renderer,\n            provider,\n            dataService,\n            actionsService,\n            modalService,\n            popups,\n            injector\n        );\n        this.setNodes();\n        this._onObjectsChangeSubscription = this._dataService.getOnObjectsChangeEmitter()\n            .subscribe(objects => this.setNodes(objects));\n    }\n\n    /**\n     * Get nodes\n     * @param index\n     * @returns {*|null}\n     */\n    public getNodes(index = null): any\n    {\n        if (index === null) {\n            return this._nodes;\n        }\n        return this._nodes[index] || null;\n    }\n\n    /**\n     * Set nodes\n     * @returns {TreeViewFormComponent}\n     * @param objects\n     */\n    protected setNodes(objects = null): TreeViewFormComponent\n    {\n        objects = (objects ? objects : this._dataService.getProviderAttr('objects'));\n        this._nodes = {};\n\n        for (let objsKey in objects) {\n            this._nodes[objsKey] = [];\n            for (let objKey in objects[objsKey]) {\n                // Clone objects, otherwise wen the object is in edition, the original object is changed also\n                // (the reference is the same)\n                this._nodes[objsKey].push(this._helperService.cloneObject(objects[objsKey][objKey]));\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Save object. Handle submit form.\n     * This method should be called from child component.\n     * @returns {Promise}\n     */\n    protected save(): Promise<any>\n    {\n        let that = this;\n\n        return new Promise(function(resolve, reject) {\n            // Current form object has changes from user?\n            if(!Helper.isEqualObject(that._nodes, that._dataService.getProviderAttr('objects'))) {\n                // Get form data\n                let formData = that._$form.serialize();\n\n                // Save form\n                return that._dataService.save(formData);\n            }\n            return resolve(true);\n        });\n    }\n\n    /**\n     * Save action.\n     * This method should be called from view/template.\n     * @param $event\n     * @param closePopup\n     */\n    public saveAction($event: any = null, closePopup = false): void\n    {\n        if ($event) { $event.preventDefault(); }\n        this.save().then(\n            data => { return; },\n            errors => { console.log(errors); return; }\n        );\n    }\n\n    /**\n     * Reset form. This method should be called from child component.\n     * @returns {Promise<T>}\n     */\n    protected reset(): Promise<any>\n    {\n        let that = this;\n\n        return new Promise(function(resolve, reject) {\n            // Current form object has changes from user?\n            if (!that._helperService.isEqualObject(that._nodes, that._dataService.getProviderAttr('objects'))\n                && (that._helperService.objectLength(that._nodes) > 0) // {} != [] But doesn't make sense to ask the user!\n            ) {\n                // Dialog message\n                return that._modalService.dialog().then(\n                    hasConfirm => {\n                        if (hasConfirm) {\n                            that.setNodes();\n                            return resolve(true);\n                        } else {\n                            return reject(false);\n                        }\n                    },\n                    errors => { console.log(errors); return reject(false); }\n                );\n            } else {\n                return resolve(true);\n            }\n        });\n    }\n\n    /**\n     * Reset action. This method should be called from view/template.\n     * @param $event\n     */\n    protected resetAction($event: any = null): void\n    {\n        if ($event) { $event.preventDefault(); }\n        this.reset().then(\n            data => { return; },\n            errors => { console.log(errors); return; }\n        );\n    }\n\n    /**\n     * Lifecycle callback\n     */\n    ngOnInit()\n    {\n        this._$form = $(this._viewContainerRef.element.nativeElement).find('form');\n    }\n\n    /**\n     * Lifecycle callback\n     */\n    ngOnDestroy()\n    {\n        this._onObjectsChangeSubscription.unsubscribe();\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/tree-view/tree-view-form.component.ts","import {Component, Inject, Injector, ViewContainerRef, Renderer} from '@angular/core';\nimport {TreeViewDataService as DataService} from '../data-service/tree-view-data.service';\nimport {ActionsService} from '../actions/actions.service';\nimport {DataBoxComponent, Popups, Popup} from '../data-box/data-box.component';\nimport {ModalService} from '../../modal/ts/modal.service';\nimport {Helper} from '../helper.ts';\nimport {TreeViewProvider} from './tree-view-provider';\n\n// Re-exports\nexport {TreeViewProvider};\n\n\n@Component({\n    selector: '.js_treeView',\n    templateUrl: Helper.getGlobalVar('route') + 'template/default/tree-view'\n})\nexport class TreeViewComponent extends DataBoxComponent\n{\n    protected _parentComponent: TreeViewComponent;\n    protected _expanded: any;\n\n    constructor(\n        viewContainerRef: ViewContainerRef,\n        renderer: Renderer,\n        @Inject('Provider') provider: TreeViewProvider,\n        @Inject('DataService') dataService: any,\n        actionsService: ActionsService,\n        modalService: ModalService,\n        @Inject('Popups') popups: Popups | Popup,\n        injector: Injector\n    ) {\n        // Call parent\n        super(\n            viewContainerRef,\n            renderer,\n            provider,\n            dataService,\n            actionsService,\n            modalService,\n            popups,\n            injector\n        );\n\n        this._parentComponent = this;\n        this._expanded = {};\n    }\n\n    /**\n     * Get nodes\n     * @param index\n     * @returns {*|null}\n     */\n    protected getNodes(index = null): any\n    {\n        if (index === null) {\n            return this._dataService.getProviderAttr('objects');\n        }\n        return (\n            (this._dataService.getProviderAttr('objects')[index]\n            && (this._dataService.getProviderAttr('objects')[index].length > 0))\n                ? this._dataService.getProviderAttr('objects')[index]\n                : null\n        );\n    }\n\n    /**\n     * Toggle expanded\n     * @param index\n     */\n    protected toggleExpanded(index: number): void\n    {\n        this._expanded[index] = (this._expanded[index] ? false : true);\n    }\n\n    /**\n     * Get icon\n     * @param object\n     * @returns {any}\n     */\n    protected getIcon(object: any): string\n    {\n        let iconField = this.getProviderAttr('iconField');\n\n        if(iconField && object[iconField]) {\n            let iconFieldMap = (this.getProviderAttr('iconFieldMap') || {});\n            return (iconFieldMap[object[iconField]] || object[iconField]);\n        }\n        return (this.getProviderAttr('iconDefault') || 'fa-minus');\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/tree-view/tree-view.component.ts","import {Component, Inject, Injector, ReflectiveInjector, ViewContainerRef, Renderer} from '@angular/core';\nimport {DataBoxExtensionComponent, DataBoxProvider, Popup, Popups, PopupTypes} from './data-box.extension-component';\nimport {ModalService} from '../../modal/ts/modal.service';\nimport {DataService, OrderTypes} from '../data-service/data.service';\nimport {Helper} from '../helper';\nimport {ActionsService} from \"../actions/actions.service\";\n\n// Reexports\nexport {DataBoxProvider, Popup, Popups, PopupTypes};\n\n\n// Component\n@Component({\n    selector: '.js_dataBox',\n    templateUrl: Helper.getGlobalVar('route') + 'template/default/data-box'\n})\nexport class DataBoxComponent extends DataBoxExtensionComponent\n{\n    constructor(\n        viewContainerRef: ViewContainerRef,\n        renderer: Renderer,\n        @Inject('Provider') provider: DataBoxProvider,\n        @Inject('DataService') dataService: any,\n        actionsService: ActionsService,\n        modalService: ModalService,\n        @Inject('Popups') popups: Popups | Popup,\n        injector: Injector\n    ) {\n        // Call parent\n        super();\n        super.initDataBoxExtensionComponent(\n            viewContainerRef,\n            renderer,\n            provider,\n            dataService,\n            actionsService,\n            modalService,\n            popups,\n            injector\n        );\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/data-box/data-box.component.ts","import {Component, Inject, Injector, ReflectiveInjector, ViewContainerRef, Renderer} from '@angular/core';\nimport {DataBoxProvider as DataBoxProvider} from './data-box-provider';\nimport {ModalService, Popup} from '../../modal/ts/modal.service';\nimport {DataService, OrderTypes} from '../data-service/data.service';\nimport {Helper} from '../helper';\nimport {BoxExtensionComponent} from '../box/box.extension-component';\nimport {ActionsService} from \"../actions/actions.service\";\n\n// Reexports\nexport {Popup, DataBoxProvider};\n\n\n// Popup Types\nexport var PopupTypes = {\n    edit: 'edit',\n    add: 'add'\n};\n// Popups interface (array of popups)\nexport interface Popups {\n    [type: string]: Popup\n}\n\n\n// Component\n@Component({\n    selector: '.js_dataBox',\n    template: ''\n})\nexport abstract class DataBoxExtensionComponent extends BoxExtensionComponent {\n    // Constructor vars\n    protected _viewContainerRef: ViewContainerRef;\n    protected _dataService: any;\n    protected _actionsService: ActionsService;\n    protected _modalService: ModalService;\n    protected _popups: Popups | Popup;\n    protected _injector: Injector;\n\n    protected checkAll: boolean = false; // Control check all action\n\n    constructor() { super(); }\n\n    /**\n     * Initialization of component (replace the original constructor to avoid angular injection inheritance bug)\n     * @param viewContainerRef\n     * @param renderer\n     * @param provider\n     * @param dataService\n     * @param actionsService\n     * @param modalService\n     * @param popups\n     * @param injector\n     */\n    public initDataBoxExtensionComponent(\n        viewContainerRef: ViewContainerRef,\n        renderer: Renderer,\n        provider: DataBoxProvider,\n        dataService: any,\n        actionsService: ActionsService,\n        modalService: ModalService,\n        // You can provide a popup by action:\n        // provide('Popups', {useValue: {\n        //     add: Popup,\n        //     edit: Popup\n        // }})\n        // Or a general popup for all actions:\n        // provide('Popups', {useValue: Popup})\n        popups: Popups | Popup, // Can be a list of popups by action, or only a popup\n        // used to provide the correct injector to the popups\n        injector: Injector\n    ) {\n        // Parent init (construct)\n        super.initBoxExtensionComponent(\n            viewContainerRef.element,\n            renderer,\n            provider\n        );\n\n        // Constructor vars\n        this._viewContainerRef = viewContainerRef;\n        this._dataService = dataService;\n        this._actionsService = actionsService;\n        this._modalService = modalService;\n        this._popups = popups;\n        this._injector = injector;\n\n        this._modalService.init(this._viewContainerRef);\n    }\n\n    /**\n     * Get column alignment.\n     * @param field\n     * @returns {any}\n     */\n    protected getColAlign(field: string): string\n    {\n        switch (this._dataService.getFields('metadata')[field].type) {\n            case 'number':\n            case 'percentage':\n            case 'monetary':\n            case 'date':\n            case 'datetime':\n                return 'txt-align-r';\n            case 'boolean':\n            case 'icon':\n            case 'img':\n            case 'status':\n                return 'txt-align-c';\n            default:\n                return 'txt-align-l';\n        }\n    }\n\n    /**\n     * Trigger action\n     * @param $event\n     * @param action (can be provided by $event or directly in the call)\n     * @param data (can be provided by $event or directly in the call)\n     */\n    protected triggerAction($event: any, action: string = null, data: any = null): void\n    {\n        if ($event) { $event.preventDefault(); }\n\n        // Action to call\n        action = (action || $event.target.getAttribute(\"data-action\"));\n\n        if (action) {\n            // Data to send as parameter to action\n            if (data == null) {\n                data = ($event.target.getAttribute(\"data-value\"));\n            }\n\n            // Call function\n            let callback = (action + 'Action');\n            if ($.isFunction(this[callback])) {\n                if ((data != null) && (typeof data != 'undefined')) { // Can be 0 or ''\n                    this[callback]($event, data);\n                } else {\n                    this[callback]($event);\n                }\n            }\n        }\n    }\n\n    /**\n     * Edit action\n     * @param $event\n     * @param data\n     */\n    public editAction($event: any, data: any): void\n    {\n        if ($event) { $event.preventDefault(); }\n\n        // Check ACL\n        if (!this._actionsService.getActionAttr('edit', 'isEnabled')) {\n            return;\n        }\n\n        let that = this;\n        this._dataService.selectObject(data).then(function(data) {\n            that.openPopup(PopupTypes.edit);\n        });\n    }\n\n    /**\n     * Add action\n     * @param $event\n     */\n    public addAction($event:any = null): void\n    {\n        if ($event) { $event.preventDefault(); }\n\n        this._dataService.newObject();\n        this.openPopup(PopupTypes.add);\n    }\n\n    /**\n     * Copy action. Create a new object from another object\n     * @param $event\n     * @param data\n     */\n    public copyAction($event:any = null, data: any): void\n    {\n        if ($event) { $event.preventDefault(); }\n\n        let that = this;\n        this._dataService.newObject(data).then(\n            data => {\n                that.openPopup(PopupTypes.edit);\n            },\n            errors => { console.log(errors); }\n        );\n    }\n\n    /**\n     * Delete action.\n     * @param $event\n     * @param data\n     */\n    public deleteAction($event: any, data: any): void\n    {\n        if ($event) { $event.preventDefault(); }\n\n        let that = this;\n\n        // Dialog message\n        this._modalService.dialog('Are you sure to remove?').then(\n            hasConfirm => {\n                if (hasConfirm) {\n                    that._dataService.delete(data).then(\n                        data => { return; },\n                        errors => { return; }\n                    );\n                } else {\n                    return;\n                }\n            },\n            errors => {\n                console.log(errors);\n            }\n        );\n    }\n\n    /**\n     * Order up action.\n     * @param $event\n     * @param data\n     */\n    public orderUpAction($event: any, data: any): void\n    {\n        if ($event) { $event.preventDefault(); }\n        this._dataService.order(data, OrderTypes.up);\n    }\n\n    /**\n     * Order down action.\n     * @param $event\n     * @param data\n     */\n    public orderDownAction($event: any, data: any): void\n    {\n        if ($event) { $event.preventDefault(); }\n        this._dataService.order(data, OrderTypes.down);\n    }\n\n    /**\n     * Delete all checked elements action.\n     * @param $event\n     */\n    public deleteAllAction($event: any): void\n    {\n        if (!$event) { return; }\n        $event.preventDefault();\n\n        let $form = $($event.currentTarget).parents('.ibox').find('.ibox-content form');\n        let data = $form.serializeArray();\n\n        if(data.length) {\n            // Dialog message\n            this._modalService.dialog().then(\n                hasConfirm => {\n                    if (hasConfirm) {\n                        this._dataService.deleteArray(data);\n                    } else {\n                        return;\n                    }\n                },\n                errors => {\n                    console.log(errors);\n                }\n            );\n        }\n    }\n\n    /**\n     * Detail action.\n     * @param $event\n     * @param data\n     */\n    public detailAction($event: any, data: any): void\n    {\n        if ($event) { $event.preventDefault(); }\n        this._dataService.detail(data);\n    }\n\n    /**\n     * Check all action.\n     * @param $event\n     */\n    protected checkAllAction($event: any = null): void\n    {\n        if ($event) { $event.preventDefault(); }\n        this.checkAll = !this.checkAll;\n    }\n\n    /**\n     * Refresh all objects list.\n     * @param $event\n     */\n    public refreshAction($event: any = null): void\n    {\n        if ($event) { $event.preventDefault(); }\n        this._dataService.refresh();\n    }\n\n    /**\n     * Open popup\n     * @param popupType\n     * @returns {DataBoxExtensionComponent}\n     */\n    protected openPopup(popupType = PopupTypes.edit): DataBoxExtensionComponent\n    {\n        // Set edit as default popup type if is not a valid entry\n        popupType = (PopupTypes[popupType] || PopupTypes.edit);\n        let popup: Popup = this._popups[popupType] || this._popups;\n\n        // Open popup\n        this._modalService.popup(popup, this._injector).then(\n            data => { return; },\n            errors => { console.log(errors); return; }\n        );\n\n        return this;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/data-box/data-box.extension-component.ts","import {Component, ElementRef, Renderer} from '@angular/core';\nimport {BaseExtensionComponent} from '../base/base.extension-component';\nimport {BoxProvider} from './box-provider';\n\n// Re-exports\nexport {BoxProvider};\n\n\n/**\n * Box (simple base box)\n */\n@Component({\n    selector: '.js_box',\n    template: ''\n})\nexport abstract class BoxExtensionComponent extends BaseExtensionComponent {\n    // Controls the toggle of the show/hide content.\n    // It starts \"true\" otherwise the content may not be rendered correctly.\n    protected _isExpanded: boolean = true;\n\n    /**\n     * Initialization of component (replace the original constructor to avoid angular injection inheritance bug)\n     * @param elementRef\n     * @param renderer\n     * @param provider\n     */\n    public initBoxExtensionComponent(\n        elementRef: ElementRef,\n        renderer: Renderer,\n        provider: BoxProvider\n    ) {\n        super.initBaseExtensionComponent(\n            elementRef,\n            renderer,\n            provider\n        );\n    }\n\n    /**\n     * Expander action. Used by expanded directive output.\n     * @param isExpanded (value returned by the expander directive on change)\n     */\n    protected expanderAction(isExpanded: boolean): void\n    {\n        this._isExpanded = isExpanded;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/box/box.extension-component.ts","import {Component, Input} from '@angular/core';\nimport {TreeViewComponent} from './tree-view.component';\nimport {TreeViewFormComponent} from './tree-view-form.component';\n\n// Component\n@Component({\n    selector: 'js_treeViewNode',\n    template: `\n    <li *ngFor=\"let obj of nodes; let objIndex = index\">\n        <a class=\"no-user-select\"\n           *ngIf=\"parentComponent.getNodes(obj['id'])\"\n           (click)=\"parentComponent.toggleExpanded(obj['id'])\"><i\n                [ngClass]=\"['fa', (parentComponent._expanded[obj['id']] ? 'fa-angle-down' : 'fa-angle-right')]\"></i><i\n                    [ngClass]=\"['fa', parentComponent.getIcon(obj)]\"></i><span>{{obj['name']}}</span></a>\n        <span *ngIf=\"!parentComponent.getNodes(obj['id'])\"><i\n                    [ngClass]=\"['fa', parentComponent.getIcon(obj)]\"></i><span>{{obj['name']}}</span></span>\n        <js_treeViewControl [parentComponent]=\"parentComponent\" [objectIndex]=\"objIndex\" [nodesIndex]=\"nodesIndex\"></js_treeViewControl>\n        <ul *ngIf=\"parentComponent.getNodes(obj['id']) && parentComponent._expanded[obj['id']]\">\n            <js_treeViewNode [nodes]=\"parentComponent.getNodes(obj['id'])\"\n                             [nodesIndex]=\"obj['id']\"\n                             [parentComponent]=\"parentComponent\"></js_treeViewNode>\n        </ul>\n    </li>\n    `\n})\nexport class TreeViewNodeComponent\n{\n    @Input() nodes: any;\n    @Input() nodesIndex: number;\n    @Input() parentComponent: TreeViewComponent | TreeViewFormComponent;\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/tree-view/tree-view-node.component.ts","import {Component, Input, Inject} from '@angular/core';\nimport {TreeViewFormComponent} from '../tree-view-form.component';\nimport {TreeViewDataService as DataService} from '../../data-service/tree-view-data.service';\n\n// Component\n@Component({\n    selector: 'js_treeViewControl',\n    template: `\n    <div *ngIf=\"_object.hasOwnProperty('acl')\"\n         class=\"actions no-user-select horizontal-group-box\"\n         (mouseover)=\"setCandidateAcl($event)\" (mouseout)=\"resetCandidateAcl()\" (click)=\"setAcl($event)\">\n        <a [class.active]=\"_candidateAcl == 0\"\n           data-value=\"0\"\n           title=\"No access\"\n           class=\"fa fa-ban -r-divider\"></a>\n        <a [class.active]=\"_candidateAcl > 0\"\n           data-value=\"1\"\n           title=\"Read only\"\n           class=\"fa fa-eye\"></a>\n        <a [class.active]=\"_candidateAcl > 1\"\n           data-value=\"2\"\n           title=\"Read and edit\"\n           class=\"fa fa-pencil\"></a>\n        <a [class.active]=\"_candidateAcl > 3\"\n           data-value=\"4\"\n           title=\"Read, edit and add\"\n           class=\"fa fa-plus\"></a>\n        <a [class.active]=\"_candidateAcl > 7\"\n           data-value=\"8\"\n           title=\"Read, edit, add and remove\"\n           class=\"fa fa-times\"></a>\n        <input type=\"hidden\" name=\"acl[{{_object['id']}}]\" value=\"{{_object['acl']}}\">\n    </div>\n    `\n})\nexport class TreeViewControlFormTypeAclComponent\n{\n    @Input() objectIndex: any;\n    @Input() nodesIndex: number;\n    @Input() parentComponent: TreeViewFormComponent;\n\n    protected _object: any;\n    protected _candidateAcl: number;\n\n    constructor(\n        @Inject('DataService') protected _dataService: any\n    ) {}\n\n    /**\n     * Reset candidate acl\n     */\n    protected resetCandidateAcl(): void\n    {\n        this._candidateAcl = (this._object['acl'] || 0);\n    }\n\n    /**\n     * Set candidate acl\n     ** @param $event\n     */\n    protected setCandidateAcl($event): void\n    {\n        let value = $event.target.getAttribute(\"data-value\");\n        this._candidateAcl = value;\n    }\n\n    /**\n     * Set acl\n     * @param $event\n     */\n    protected setAcl($event): void\n    {\n        $event.preventDefault();\n\n        let value = $event.target.getAttribute(\"data-value\");\n        this._object['acl'] = value;\n    }\n\n    /**\n     * Lifecycle callback\n     */\n    ngOnInit()\n    {\n        this._object = this.parentComponent.getNodes(this.nodesIndex)[this.objectIndex];\n        this.resetCandidateAcl();\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/tree-view/controls/tree-view-control-form-type-acl.component.ts","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {FieldTypesExtensionModule} from '../../../../../AppBundle/Resources/public/ts/form/field-types/field-types.extension-module';\nimport {SearchModule} from '../../../../../AppBundle/Resources/public/ts/search/search.module';\nimport {ExpanderModule} from '../../../../../AppBundle/Resources/public/ts/expander/expander.module';\nimport {MainComponent} from './main.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        FieldTypesExtensionModule,\n        SearchModule,\n        ExpanderModule\n    ],\n    declarations: [\n        MainComponent\n    ],\n    exports: [MainComponent]\n})\nexport class MainExtensionModule {}\n\n\n// WEBPACK FOOTER //\n// ./src/AdminBundle/Resources/public/user-group-acl-user/ts/main.extension-module.ts","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {FieldTypeAutoCompleteComponent} from './field-type-auto-complete.component';\nimport {FieldTypePasswordComponent} from './password.component';\nimport {FieldTypeMultiCheckboxDirective} from './field-type-multi-checkbox.directive';\nimport {FieldTypeHtmlSelectDirective} from './field-type-html-select.directive';\nimport {FieldTypeDatePickerDirective} from './field-type-date-picker.directive';\n\n\n@NgModule({\n    imports: [CommonModule, FormsModule],\n    declarations: [\n        FieldTypeAutoCompleteComponent,\n        FieldTypePasswordComponent,\n        FieldTypeMultiCheckboxDirective,\n        FieldTypeHtmlSelectDirective,\n        FieldTypeDatePickerDirective\n    ],\n    exports: [\n        FieldTypeAutoCompleteComponent,\n        FieldTypePasswordComponent,\n        FieldTypeMultiCheckboxDirective,\n        FieldTypeHtmlSelectDirective,\n        FieldTypeDatePickerDirective\n    ]\n})\nexport class FieldTypesExtensionModule {}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/form/field-types/field-types.extension-module.ts","import {Component, Inject, Injector, ReflectiveInjector, Input, Host} from '@angular/core';\nimport {DataService} from '../../data-service/data.service';\nimport {ModalService} from '../../../modal/ts/modal.service';\nimport {PostService} from '../../post.service';\nimport {FormService} from '../../../../../../AppBundle/Resources/public/ts/form/form.service';\nimport {PopupTypes, Popups, Popup} from '../../data-box/data-box.component';\n\n/**\n * Multiple AutoComplete instances can be released together,\n * so we need to be able to define multiple AutoComplete Providers in the same context.\n * Each entry of AutoCompleteProviders is one specific provider for one specific AutoComplete instance.\n */\nexport interface AutoCompleteProviders {\n     [field: string]: {\n         urlConf: string, // To get dependency conf\n         urlChoicesParams?: string, // Parameters to add to choices url\n         control?: string, // Control to use ('save', 'edit', 'none')\n         popups?: Popups | Popup, // Popups to add or edit objects from dependency (necessary when control = edit)\n         // Used only by FieldTypeAutoCompleteComponent to avoid create new instances of classes (services, etc.),\n         // get again the conf from the server, and create new injectors for the same component.\n         // Once created it is saved to use in the next few\n         childInjector?: any,\n     }\n }\n\n\n@Component({\n    selector: 'js_autoComplete',\n    template: `\n    <div class=\"auto-complete\">\n        <div class=\"input-group\">\n            <span class=\"control\">\n                <input class=\"form-control\"\n                       (click)=\"onInputClick($event)\"\n                       (input)=\"onEnterKey($event)\"\n                       [ngModel]=\"_label\"\n                       [class.error]=\"_formService.getErrors()[field] && (_formService.getErrors()[field].length > 0)\"\n                       type=\"text\">\n                <a (click)=\"onControlClick($event)\"><i class=\"fa fa-angle-down\"></i></a>\n            </span>\n            <span class=\"input-group-btn\" *ngIf=\"_controlMode\">\n                <button (click)=\"triggerAction($event)\"\n                        class=\"btn btn-primary\"\n                        type=\"button\"><i class=\"fa\"\n                                         [class.fa-check]=\"_controlMode == 'save'\"\n                                         [class.fa-plus]=\"_controlMode == 'add'\"\n                                         [class.fa-pencil]=\"_controlMode == 'edit'\"></i></button>\n            </span>\n        </div>\n        <div class=\"choices\">\n            <ul [hidden]=\"_isHidden\"\n                (click)=\"onChoiceClick($event)\">\n                <template [ngIf]=\"selfReference\"><template ngFor let-choice [ngForOf]=\"_choices\" let-choiceIndex=\"index\">\n                    <li *ngIf=\"choice['id'] != _object['id']\"\n                        [attr.data-index]=\"choiceIndex\">{{choice['label']}}</li>\n                </template></template>\n                <template [ngIf]=\"!selfReference\">\n                    <li *ngFor=\"let choice of _choices; let choiceIndex = index\"\n                        [attr.data-index]=\"choiceIndex\">{{choice['label']}}</li>\n                </template>\n                <li *ngIf=\"_childCandidateSearch && _childCandidateSearch.hasMore\"\n                    (click)=\"getMoreObjects($event)\"\n                    class=\"-pagination\"\n                    title=\"Load more results...\"><span>...</span></li>\n            </ul>\n        </div>\n    </div>\n    `,\n    host: {\n        '(document:click)': 'onDocumentClick($event)',\n    }\n})\nexport class FieldTypeAutoCompleteComponent {\n    @Input() field: string; // Field to handle object and to get the respective data from AutoCompleteProviders\n    @Input() selfReference: boolean;\n\n    private _onObjectChangeSubscription: any; // When the object change in formService\n    private _onChildObjectsChangeSubscription: any; // When the object change in dataService (pagination)\n\n    protected _provider: any;\n    protected _object: any; // From object\n    protected _controlMode: string;\n    protected _isHidden: boolean = true;\n    protected _lastSelectedChoice: {id: number, label: string} = {id: null, label: ''};\n    protected _label: string;\n    protected _fieldInView: string; // Field that represents the object in template/view, to use as label of selected choice\n    protected _choices: any[] = [];\n    protected _search: {term: string, lastTerm: string} = {term: '', lastTerm: null};\n\n    // Dependency data\n    protected _childInjector: Injector;\n    protected _childDataServicePopup: DataService; // Handle with add and edit object in popup\n    protected _childDataServiceChoices: DataService; // Handle with choices\n    protected _childCandidateSearch: any = null;\n\n    constructor(\n        protected _postService: PostService,\n        protected _modalService: ModalService,\n        @Inject('DataService') protected _dataService: any,\n        protected _formService: FormService,\n        protected _injector: Injector,\n        @Inject('AutoCompleteProviders') protected _autoCompleteProviders: any,\n        @Inject('HelperService') protected _helperService: any\n    ) {\n        // Object change event subscription\n        this._onObjectChangeSubscription = this._formService.getOnObjectChangeEmitter()\n            .subscribe(object => this.reset());\n    }\n\n    /**\n     * Reset object\n     * @returns {FieldTypeAutoCompleteComponent}\n     */\n    reset(): FieldTypeAutoCompleteComponent\n    {\n        this._object = this._formService.getObject();\n\n        let value = this._object[this.field],\n            normalizedValue = '';\n\n        if (value) {\n            normalizedValue = ((this._fieldInView\n                && this._dataService.getNormalizedObject()\n                && this._dataService.getNormalizedObject()[this._fieldInView])\n                    ? this._dataService.getNormalizedObject()[this._fieldInView]\n                    : value\n            );\n        }\n\n        this._lastSelectedChoice = {id: value, label: normalizedValue};\n        this.setLabel();\n\n        return this;\n    }\n\n    /**\n     * Reset choices\n     * @returns {FieldTypeAutoCompleteComponent}\n     */\n    resetChoices(): FieldTypeAutoCompleteComponent\n    {\n        this._choices = (this._childDataServiceChoices.getProviderAttr('objects') || []);\n        this._isHidden = !this.hasChoices();\n\n        return this;\n    }\n\n    /**\n     * Host event\n     * @param $event\n     */\n    protected onDocumentClick($event): void\n    {\n        this._isHidden = true;\n    }\n\n    /**\n     * onInputClick event (when enter in input).\n     * @param $event\n     */\n    protected onInputClick($event): void\n    {\n        $event.preventDefault();\n        $event.stopPropagation();\n\n        this._object[this.field] = null;\n        this._isHidden = !this.hasChoices();\n        this.setLabel();\n        this.setControlMode();\n    }\n\n    /**\n     * On enter key (pagination)\n     * @param $event\n     */\n    protected onEnterKey($event) {\n        this._search.term = $event.target.value;\n\n        if ((this._search.term != this._search.lastTerm)\n            && (this._search.term.length % 3 === 0) // Only submit with multiples of three\n        ) {\n            this._childCandidateSearch['criteria'] = [{\n                'field': 'name',\n                'expr': 'lrlike',\n                'value': this._search.term\n            }];\n            this._childDataServiceChoices.choices();\n            this._search.lastTerm = this._search.term;\n        }\n    }\n\n    /**\n     * onControlClick (arrow of select control)\n     * @param $event\n     */\n    protected onControlClick($event): void\n    {\n        $event.preventDefault();\n        $event.stopPropagation();\n\n        if (this.hasChoices()) {\n            this._isHidden = !this._isHidden;\n        } else {\n            this._childDataServiceChoices.choices();\n        }\n    }\n\n    /**\n     * onChoiceClick event\n     * @param $event\n     */\n    protected onChoiceClick($event): void\n    {\n        $event.preventDefault();\n\n        let $target = $($event.target),\n            choiceIndex = $target.data('index');\n\n        if (typeof choiceIndex != 'undefined') { // Can be 0\n            let choice = this._choices[choiceIndex];\n\n            if (choice && (this._object[this.field] != choice['id'])) {\n                this._object[this.field] = choice['id'];\n                this._lastSelectedChoice = {id: choice.id, label: choice.label};\n                this.setLabel();\n                this.setControlMode();\n            }\n        }\n    }\n\n    /**\n     * Get more objects (pagination)\n     * @param $event\n     */\n    protected getMoreObjects($event) {\n        $event.preventDefault();\n        $event.stopPropagation();\n\n        this._childDataServiceChoices.choices();\n    }\n\n    /**\n     * Trigger action\n     * @param $event\n     */\n    protected triggerAction($event: any = null): void\n    {\n        if ($event) { $event.preventDefault(); }\n\n        switch (this._controlMode) {\n            case 'save':\n                this._formService.saveAndNewAction(); // Save and add a new object\n                break;\n            case 'edit':\n            case 'add':\n                this.openPopup(this._controlMode);\n                break;\n        }\n    }\n\n    /**\n     * Open popup\n     * @param popupType\n     * @returns {FieldTypeAutoCompleteComponent}\n     */\n    protected openPopup(popupType = PopupTypes.edit): FieldTypeAutoCompleteComponent\n    {\n        let that = this;\n\n        // Inject object to edit in child DataService\n        if (this._object[this.field]) {\n            // Simulate object\n            let object = {id: this._object[this.field]};\n            this._childDataServicePopup.setObjects([object]);\n            this._childDataServicePopup.selectObject(0).then(\n                data => {\n                    that.loadPopup(popupType);\n                    return this;\n                },\n                errors => { console.log(errors); return this; }\n            );\n        } else {\n            // Create a new object in child DataService\n            this._childDataServicePopup.newObject().then(\n                data => { that.loadPopup(popupType); return this; },\n                errors => { console.log(errors); return this; }\n            );\n        }\n\n        return this;\n    }\n\n    /**\n     * Load popup\n     * @param popupType\n     * @returns {FieldTypeAutoCompleteComponent}\n     */\n    protected loadPopup(popupType = PopupTypes.edit): FieldTypeAutoCompleteComponent\n    {\n        popupType = (PopupTypes[popupType] || PopupTypes.edit);\n        let popup: Popup = (this._provider.popups[popupType] || this._provider.popups);\n\n        this._modalService.popup(popup, this._childInjector).then(\n            data => { return; },\n            errors => { console.log(errors); return; }\n        );\n\n        return this;\n    }\n\n    /**\n     * Set control mode\n     * @returns {FieldTypeAutoCompleteComponent}\n     */\n    protected setControlMode(): FieldTypeAutoCompleteComponent\n    {\n        switch (this._provider.control) {\n            case 'edit':\n                if (this._object[this.field]) {\n                    this._controlMode = 'edit';\n                } else {\n                    this._controlMode = 'add';\n                }\n                break;\n            case 'save':\n                this._controlMode = this._provider.control;\n                break;\n            default:\n                this._controlMode = null;\n        }\n\n        return this;\n    }\n\n    /**\n     * Set input label\n     * @returns {FieldTypeAutoCompleteComponent}\n     */\n    public setLabel(): FieldTypeAutoCompleteComponent\n    {\n        if (this._object[this.field] == this._lastSelectedChoice['id']) {\n            this._label = this._lastSelectedChoice['label'];\n        } else {\n            this._label = this._search.term;\n        }\n\n        return this;\n    }\n\n    /**\n     * check if has choices\n     * @returns {any|boolean}\n     */\n    protected hasChoices(): boolean {\n        return (this._choices && (this._choices.length > 0));\n    }\n\n    /**\n     * Lifecycle callback\n     */\n    ngOnInit()\n    {\n        // Initialize values\n        this._provider = (this._autoCompleteProviders[this.field] || null);\n        this._fieldInView = (this._dataService.getProviderAttr('fields')['metadata'][this.field]['fieldInView'] || null);\n        this.reset();\n        this.setControlMode();\n\n        // Dependency conf previously saved in provider\n        if (this._provider.childInjector) {\n            this._childInjector = this._provider.childInjector;\n            this.init();\n            return;\n        }\n\n        // Dependency conf for first time\n        let that = this;\n        that._postService.post(\n            this._provider.urlConf,\n            null\n        ).then(\n            data => {\n                // Notice that both DataService share the same DataServiceProvider! It needs to be fixed.\n                let dataServiceProvider = that._helperService.getDataServiceProvider(data);\n                dataServiceProvider['pin'] = true;\n\n                // Set child injector\n                let resolvedProviders = ReflectiveInjector.resolve([\n                    {provide: 'DataServiceChoices', useClass: DataService},\n                    {provide: 'DataService', useClass: DataService},\n                    {provide: 'DataServiceProvider', useValue: dataServiceProvider},\n                    {provide: 'Provider', useValue: that._helperService.getDataBoxProvider(data)}\n                ]);\n                that._childInjector = ReflectiveInjector.fromResolvedProviders(resolvedProviders, that._injector);\n                // Save childInjector (check out the context in the provider definition)\n                that._provider.childInjector = that._childInjector;\n\n                that.init();\n\n                // Add parameter to action route\n                if (that._provider.urlChoicesParams) {\n                    that._childDataServiceChoices.setRoute(\n                        'choices',\n                        (that._childDataServiceChoices.getRoute('choices') + that._provider.urlChoicesParams)\n                    );\n                }\n            },\n            errors => { console.log(errors); return; }\n        );\n    }\n\n    /**\n     * Initialize variables and dependencies.\n     * @returns {FieldTypeAutoCompleteComponent}\n     */\n    protected init(): FieldTypeAutoCompleteComponent\n    {\n        this._childDataServicePopup = this._childInjector.get('DataService');\n        this._childDataServiceChoices = this._childInjector.get('DataServiceChoices');\n        this._onChildObjectsChangeSubscription = this._childDataServiceChoices.getOnObjectsChangeEmitter()\n            .subscribe(object => this.resetChoices());\n        this._childCandidateSearch = this._childDataServiceChoices.getCandidateSearch(); // To filter objects\n\n        return this;\n    }\n\n    /**\n     * Lifecycle callback\n     */\n    ngOnDestroy()\n    {\n        this._onObjectChangeSubscription.unsubscribe();\n        this._onChildObjectsChangeSubscription.unsubscribe();\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/form/field-types/field-type-auto-complete.component.ts","import {Component, Input} from '@angular/core';\nimport {FormService} from '../../../../../../AppBundle/Resources/public/ts/form/form.service';\n\n// Component\n@Component({\n    selector: 'js_password',\n    template: `\n    <input (blur)=\"resetAction($event)\"\n           class=\"form-control\"\n           [class.error]=\"_formService.getErrors()[field] && (_formService.getErrors()[field].length > 0)\"\n           type=\"password\"\n           placeholder=\"Password\"\n           [(ngModel)]=\"_fields.password\">\n    <input (keyup)=\"validateAction($event)\"\n           class=\"form-control m-t\"\n           [class.error]=\"_formService.getErrors()[field] && (_formService.getErrors()[field].length > 0)\"\n           type=\"password\"\n           placeholder=\"Confirm password\"\n           [(ngModel)]=\"_fields.confirm\">\n    `\n})\nexport class FieldTypePasswordComponent {\n    @Input() field: string;\n\n    protected _fields = {password: null, confirm: null}\n\n    constructor(\n        protected _formService: FormService\n    ) {}\n\n    /**\n     * Validate fields\n     * @param $event\n     */\n    protected validateAction($event: any = null): void\n    {\n        let isValid = (this._fields.password == this._fields.confirm);\n        this._formService.getObject()[this.field] = (isValid ? this._fields.password : null);\n        this._formService.getErrors()[this.field] = (isValid ? null : [\"Password confirmation does not match\"]);\n    }\n\n    /**\n     * Reset\n     * @param $event\n     */\n    protected resetAction($event: any = null): void\n    {\n        if (this._fields.password != this._fields.confirm) {\n            this._fields.confirm = null;\n            this.validateAction(null);\n        }\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/form/field-types/password.component.ts","import {Directive, ElementRef, HostListener, Input} from '@angular/core';\nimport {FormService} from '../form.service';\n\n/**\n * Handles with multiple checkbox select control\n */\n@Directive({\n    selector: '[multiCheckbox]'\n})\nexport class FieldTypeMultiCheckboxDirective {\n\n    protected _onObjectChangeSubscription: any; // To get notify about changes on object over the FormService\n    protected _controlObj: any;// Control (object field value) object where the select values are kept\n\n    constructor(\n        protected _elementRef: ElementRef,\n        protected _formService: FormService\n    ) {\n        // Object change event subscription\n        this._onObjectChangeSubscription = this._formService.getOnObjectChangeEmitter()\n            .subscribe(object => this.reset(object));\n    }\n\n    @Input('multiCheckbox') field: string;\n\n    @HostListener('click', ['$event']) onMouseClick($event) {\n        let value = $event.target.value;\n\n        if (value) {\n            if (value) {\n                if (value in this._controlObj) {\n                    delete this._controlObj[value]; // Remove\n                } else {\n                    this._controlObj[value] = value; // Add\n                }\n            }\n        }\n    }\n\n    /**\n     * Reset object\n     * @param object\n     * @returns {FieldTypeMultiCheckboxDirective}\n     */\n    reset(object: any = null): FieldTypeMultiCheckboxDirective\n    {\n        this._controlObj = this._formService.getObject()[this.field];\n\n        // Init the controlObj (when creates a new object)\n        if (!this._controlObj) {\n            this._controlObj = {};\n        }\n\n        // Set \"selected\" property\n        let $elements: any = $(this._elementRef.nativeElement).find('input');\n        if ($elements.length > 0) {\n            for (let el of $elements) {\n                let $el = $(el);\n                $el.prop('checked', ($el.val() in this._controlObj));\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Lifecycle callback\n     */\n    ngOnInit()\n    {\n        this.reset();\n    }\n\n    /**\n     * Lifecycle callback\n     */\n    ngOnDestroy()\n    {\n        this._onObjectChangeSubscription.unsubscribe();\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/form/field-types/field-type-multi-checkbox.directive.ts","import {Directive, ElementRef, HostListener, Input, Host, Inject} from '@angular/core';\nimport {FormService} from '../form.service';\n\n/**\n * Handles with html select box\n */\n@Directive({\n    selector: '[htmlSelect]',\n    host: {\n        '(document:click)': 'onDocumentClick($event)',\n    }\n})\nexport class FieldTypeHtmlSelectDirective {\n    private _onObjectChangeSubscription: any; // When the object change in formService\n\n    protected _$choices: any;\n    protected _$label: any;\n    protected _fieldInView: string; // Field that represents the object in template/view, to use as label of selected choice\n\n    constructor(\n        protected _elementRef: ElementRef,\n        protected _formService: FormService,\n        @Inject('DataService') protected _dataService: any\n    ) {\n        // Object change event subscription\n        this._onObjectChangeSubscription = this._formService.getOnObjectChangeEmitter()\n            .subscribe(object => this.reset());\n    }\n\n    @Input('htmlSelect') field: string;\n\n    @HostListener('click', ['$event']) onMouseClick($event) {\n        $event.preventDefault();\n        $event.stopPropagation();\n\n        this._$choices.toggle();\n\n        let $target = $($event.target),\n            value = $target.data('value');\n\n        if (value) {\n            this._formService.getObject()[this.field] = value;\n            this._$label.html($target.html());\n        }\n    }\n\n    /**\n     * Reset\n     * @returns {FieldTypeHtmlSelectDirective}\n     */\n    reset(): FieldTypeHtmlSelectDirective\n    {\n        let value = (this._formService.getObject()[this.field]),\n            normalizedValue = '';\n\n        if (value) {\n            normalizedValue = ((this._fieldInView\n                && this._dataService.getNormalizedObject()\n                && this._dataService.getNormalizedObject()[this._fieldInView])\n                    ? this._dataService.getNormalizedObject()[this._fieldInView]\n                    : value\n            );\n        }\n\n        this._$label.html(normalizedValue);\n\n        return this;\n    }\n\n    /**\n     * Host event\n     * @param $event\n     */\n    protected onDocumentClick($event): void\n    {\n        this._$choices.hide();\n    }\n\n    /**\n     * Lifecycle callback\n     */\n    ngOnInit()\n    {\n        this._$choices = $(this._elementRef.nativeElement).find('.js_choices');\n        this._$label = $(this._elementRef.nativeElement).find('.js_label');\n\n        this._$choices.hide();\n\n        this._fieldInView = (this._dataService.getProviderAttr('fields')['metadata'][this.field]['fieldInView'] || null);\n\n        this.reset();\n    }\n\n    /**\n     * Lifecycle callback\n     */\n    ngOnDestroy()\n    {\n        this._onObjectChangeSubscription.unsubscribe();\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/form/field-types/field-type-html-select.directive.ts","import {Directive, Input, Inject, ElementRef, Host} from '@angular/core';\nimport {FormService} from '../../../../../../AppBundle/Resources/public/ts/form/form.service';\n\n\n// Interface for rule\ninterface Rule {\n    expr: string, // <min, max, range>\n    value: string, // Field to link the rule or index to get data ranges\n    allowSkip?: boolean // Can be controlled by \"_skipRulesControl\"\n}\n\n\n@Directive({\n    selector: '[datePicker]',\n    host: {\n        '(document:click)': 'onDocumentClick($event)',\n    }\n})\nexport class FieldTypeDatePickerDirective {\n    @Input('datePicker') field: string; // Field in object\n    @Input('control') control: any; // DataPicker control\n\n    private _onObjectChangeSubscription: any; // When the object change in formService\n    protected _fieldMetadata: any;\n    // Control/Field in form that determines if rules should be ignored (it can be a form checkbox)\n    protected _skipRulesControl: any;\n    // Determines if the skip rules control value is inverted (using negation \"!\")\n    protected _skipRulesControlInverseValue: boolean = false;\n\n    constructor(\n        protected _elementRef: ElementRef,\n        protected _formService: FormService,\n        @Inject('DataService') protected _dataService: any\n    ) {\n        // Object change event subscription\n        this._onObjectChangeSubscription = this._formService.getOnObjectChangeEmitter()\n            .subscribe(object => this.reset());\n    }\n\n    /**\n     * Reset\n     */\n    protected reset()\n    {\n        this.setControlConf();\n    }\n\n    /**\n     * Host event\n     * @param $event\n     */\n    protected onDocumentClick($event): void\n    {\n        // It can't be used, because prevent all events (checkbox, etc.)\n        //$event.preventDefault();\n\n        // The click is inside of this data picker\n        if (this._elementRef.nativeElement.contains($event.target)) {\n            let isDropDown = ($($event.target).parents('.dropdown-menu').length > 0);\n\n            // Let run the default behavior\n            if (isDropDown) { return; }\n\n            this.setControlConf(); // Set/Refresh conf (data picker will be opened or closed)\n            this.control.toggle(); // Toggle data picker drop-down\n        } else {\n            // The click is outside of this data picker (close it)\n            this.control.close();\n        }\n    }\n\n    /**\n     * Set/Refresh control configuration\n     */\n    protected setControlConf() {\n        // Apply rules\n        if (this._fieldMetadata['typeDetail'] && this._fieldMetadata['typeDetail']['rules']) {\n            let skipRules = ((this._skipRulesControl\n                && (this._skipRulesControl in (this._formService.getObject() || {})))\n                    ? (this._skipRulesControlInverseValue\n                        ? !this._formService.getObject()[this._skipRulesControl]\n                        : this._formService.getObject()[this._skipRulesControl]\n                    )\n                    : false\n            );\n\n            for (let rule of this._fieldMetadata['typeDetail']['rules']) {\n                switch (rule['expr']) {\n                    case 'range':\n                        if (skipRules && rule['allowSkip']) {\n                            // Skip rule\n                            this.control['markDisabled'] = null;\n                            break;\n                        }\n\n                        // Limit available dates to ranges\n                        let dateRanges = (this._dataService.getProviderAttr('localData')[rule['value']] || []);\n                        // Function to check if date is valid (is in range)\n                        this.control['markDisabled'] = (date: any) => {\n                            let dateToCheck = new Date(date.year, date.month - 1, date.day);\n                            for (let dateRange of dateRanges) {\n                                let dateFrom = new Date(dateRange['startDate']),\n                                    dateTo = new Date(dateRange['endDate']);\n                                if ((dateToCheck.getTime() >= dateFrom.getTime())\n                                    && (dateToCheck.getTime() <= dateTo.getTime())\n                                ) {\n                                    return false;\n                                }\n                            }\n                            return true;\n                        };\n                        break;\n                    case 'min':\n                    case 'max':\n                        if (skipRules && rule['allowSkip']) {\n                            // Skip rule\n                            this.control[rule['expr'] + 'Date'] = null;\n                            break;\n                        }\n\n                        this.control[rule['expr'] + 'Date'] = this._formService.getObject()[rule['value']];\n                        break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Lifecycle callback\n     */\n    ngOnInit()\n    {\n        this._fieldMetadata = this._dataService.getProviderAttr('fields')['metadata'][this.field];\n\n        this._skipRulesControl = ((this._fieldMetadata['typeDetail']\n            && this._fieldMetadata['typeDetail']['skipRulesControl'])\n                ? this._fieldMetadata['typeDetail']['skipRulesControl']\n                : null\n        );\n\n        // Check how skip rules value should be used\n        if (this._skipRulesControl && (this._skipRulesControl.substring(0, 1) == '!')) {\n            // Value should be inverse, using negation (!)\n            this._skipRulesControlInverseValue = true;\n            this._skipRulesControl = this._skipRulesControl.substring(1); // Remove operator from control name\n        }\n\n        this.reset();\n    }\n\n    /**\n     * Lifecycle callback\n     */\n    ngOnDestroy()\n    {\n        this._onObjectChangeSubscription.unsubscribe();\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AppBundle/Resources/public/ts/form/field-types/field-type-date-picker.directive.ts","import {Component, ElementRef, Injector, Inject, Renderer, ViewContainerRef} from '@angular/core';\nimport {DataService} from '../../../../../AppBundle/Resources/public/ts/data-service/data.service';\nimport {ActionsService} from '../../../../../AppBundle/Resources/public/ts/actions/actions.service';\nimport {Helper} from '../../../../../AppBundle/Resources/public/ts/helper';\nimport {ModalService} from '../../../../../AppBundle/Resources/public/modal/ts/modal.service';\nimport {FormService, IForm} from '../../../../../AppBundle/Resources/public/ts/form/form.service';\nimport {DataBoxComponent, DataBoxProvider, Popups, Popup} from '../../../../../AppBundle/Resources/public/ts/data-box/data-box.component';\n\n\n@Component({\n    selector: '.js_main',\n    templateUrl: Helper.getGlobalVar('route') + 'admin/user-group-acl-user/edit/0'\n})\nexport class MainComponent extends DataBoxComponent implements IForm {\n\n    constructor(\n        viewContainerRef: ViewContainerRef,\n        renderer: Renderer,\n        @Inject('Provider') provider: DataBoxProvider,\n        @Inject('DataService') dataService: any,\n        actionsService: ActionsService,\n        modalService: ModalService,\n        @Inject('Popups') popups: Popups | Popup,\n        injector: Injector,\n        @Inject('HelperService') protected _helperService: any,\n        public _elementRef: ElementRef,\n        protected _formService: FormService\n    ) {\n        super(\n            viewContainerRef,\n            renderer,\n            provider,\n            dataService,\n            actionsService,\n            modalService,\n            popups,\n            injector\n        );\n    }\n\n    /**\n     * Lifecycle callback\n     */\n    ngAfterViewInit()\n    {\n        this._formService.init(this);\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/AdminBundle/Resources/public/user-group-acl-user/ts/main.component.ts"],"sourceRoot":""}