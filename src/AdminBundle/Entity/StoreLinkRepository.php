<?php

namespace AdminBundle\Entity;

use AppBundle\Entity\BaseEntityRepository;

/**
 * StoreLinkRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StoreLinkRepository extends BaseEntityRepository
{
    static protected $metadata = null;

    /**
     * Get field metadata
     * @param $field
     * @param $attribute
     * @param $metadata (uses this metadata instead of local metadata)
     * @param $context ('view'|'form'|'none')
     * @return null
     */
    static public function getFieldMetadata($field, $attribute, $metadata = null, $context = 'none')
    {
        if (!$metadata) {
            $metadata = self::getMetadata();
        }
        return self::getLocalFieldMetadata($field, $attribute, $metadata, $context);
    }

    /**
     * Get local metadata (it needs to be implemented by children to get static variable with local metadata from parent)
     * @return mixed
     */
    protected function getLocalMetadata()
    {
        return $this->getMetadata();
    }

    /**
     * Get entity metadata
     * @return mixed
     */
    static function getMetadata()
    {
        // Process metadata only once
        if (self::$metadata) {
            return self::$metadata;
        }
        return self::$metadata = self::processMetadata(array(
            'id' => array('label' => 'Id', 'type' => 'number', 'acl' => 'read'),
            'storeObj' => array('label' => 'Store', 'type' => 'object', 'acl' => 'read', 'typeDetail' => array(
                'table' => 'store', 'bundle' => 'admin', 'type' => 'none')),
            'appIconObj' => array('label' => 'Icon', 'type' => 'object', 'acl' => 'edit', 'typeDetail' => array(
                'table' => 'app_icon', 'fieldInView' => 'icon', 'bundle' => 'sysadmin', 'type' => 'none',
                'choices' => array('query' => 'getChoicesForLink')), 'isRequired' => false,
                'form' => array('type' => 'html-select')
            ),
            'icon' => array('table' => 'app_icon', 'field' => 'icon', 'label' => 'Icon', 'type' => 'icon',
                'acl' => 'read', 'dependency' => 'appIconObj', 'form' => array('type' => 'none')),
            'name' => array('label' => 'Name / Description', 'type' => 'text', 'acl' => 'edit'),
            'link' => array('label' => 'Link', 'type' => 'link', 'acl' => 'edit'),
            'forDocuments' => array('label' => 'For Documents', 'type' => 'boolean', 'acl' => 'edit'),
            'insertTime' => array('label' => 'Insert Time', 'type' => 'datetime', 'acl' => 'read'),
            'insertUser' => array('label' => 'Insert User', 'type' => 'text', 'acl' => 'read'),
            'isEnabled' => array('label' => 'Enabled', 'type' => 'boolean', 'acl' => 'edit', 'default' => true,
                'view' => array('keepOriginalNormalizer' => true)
            )
        ));
    }

    /**
     * @param $storeObj
     * @return mixed
     */
    public function getForDocumentsByStore($storeObj)
    {
        $output = array();

        $objArr = $this->findBy(array('storeObj' => $storeObj, 'forDocuments' => true, 'isEnabled' => true));

        foreach ($objArr as $obj) {
            $output[] = $obj->__customToString(true, false, true);
        }

        return $output;
    }
}