<?php

namespace BookingBundle\Entity;

use AppBundle\Entity\BaseEntityRepository;

/**
 * BaseBookingServicePriceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BaseBookingServicePriceRepository extends BaseEntityRepository {
    static protected $metadata = null;

    /**
     * Get field metadata
     * @param $field
     * @param $attribute
     * @param $metadata (uses this metadata instead of local metadata)
     * @param $context ('view'|'form'|'none')
     * @return null
     */
    static public function getFieldMetadata($field, $attribute, $metadata = null, $context = 'none')
    {
        if (!$metadata) {
            $metadata = self::getMetadata();
        }
        return self::getLocalFieldMetadata($field, $attribute, $metadata, $context);
    }

    /**
     * Get local metadata (it needs to be implemented by children to get static variable with local metadata from parent)
     * @return mixed
     */
    protected function getLocalMetadata()
    {
        return $this->getMetadata();
    }

    /**
     * Get entity metadata
     * @return mixed
     */
    static function getMetadata()
    {
        // Process metadata only once
        if (self::$metadata) {
            return self::$metadata;
        }
        return self::$metadata = self::processMetadata(array(
            'id' => array('label' => 'Id', 'type' => 'number', 'acl' => 'read'),
            'description' => array('label' => 'Description', 'type' => 'text', 'acl' => 'edit'),
            'postingType' => array('label' => 'Posting Type', 'type' => 'enum', 'acl' => 'edit',
                'typeDetail' => array(
                    'type' => 'text', 'choices' => array(
                        'value' => array(
                            'Debit' => 'DEBIT', 'Credit' => 'CREDIT'
                        )
                    )),
                'form' => array('type' => 'select')
            ),
            'quantity' => array('label' => 'Quantity', 'type' => 'number', 'acl' => 'edit',
                'attr' => array(
                    '(input)' => 'onQuantityEnterKey($event.target.value)',
                    '(focusout)' => 'onQuantityEnterKey($event.target.value)'
                )),
            'costValue' => array('label' => 'Cost', 'type' => 'number', 'acl' => 'edit',
                'attr' => array(
                    '(input)' => 'onCostValueEnterKey($event.target.value)',
                    '(focusout)' => 'onCostValueEnterKey($event.target.value)'
                )),
            'marginMethod' => array('label' => 'Margin Type', 'type' => 'enum', 'acl' => 'edit', 'isRequired' => false,
                'attr' => array('(change)' => 'onMarginMethodChange($event.target.value)'),
                'typeDetail' => array(
                    'type' => 'text', 'choices' => array(
                        'value' => array(
                            '' => '', 'Margin' => 'MARGIN', 'Markup' => 'MARKUP', 'Fixed' => 'FIXED'
                        )
                    )),
                'form' => array('type' => 'select')
            ),
            'marginValue' => array('label' => 'Margin', 'type' => 'number', 'acl' => 'edit',
                'attr' => array(
                    '(input)' => 'onMarginValueEnterKey($event.target.value)',
                    '(focusout)' => 'onMarginValueEnterKey($event.target.value)'
                )),
            'sellValue' => array('label' => 'Sell', 'type' => 'number', 'acl' => 'edit',
                'attr' => array(
                    '(input)' => 'onSellValueEnterKey($event.target.value)',
                    '(focusout)' => 'onSellValueEnterKey($event.target.value)'
                )),
            'totalCost' => array('label' => 'Total Cost', 'type' => 'monetary', 'acl' => 'edit',
                'attr' => array('readonly' => 'readonly'), 'form' => array('type' => 'number'), 'isRequired' => false
            ),
            'totalSell' => array('label' => 'Total Sell', 'type' => 'monetary', 'acl' => 'edit',
                'attr' => array('readonly' => 'readonly'), 'form' => array('type' => 'number'), 'isRequired' => false
            ),
            'totalMargin' => array('label' => 'Margin', 'type' => 'percentage', 'acl' => 'read',
                'form' => array('type' => 'none')),
            'totalMarkup' => array('label' => 'Markup', 'type' => 'percentage', 'acl' => 'read',
                'form' => array('type' => 'none')),
            'totalProfit' => array('label' => 'Profit', 'type' => 'monetary', 'acl' => 'read',
                'form' => array('type' => 'none')),
            'userFieldTyped' => array('label' => 'Field Typed By User', 'type' => 'hidden', 'acl' => 'edit'),
            'insertTime' => array('label' => 'Insert Time', 'type' => 'datetime', 'acl' => 'read'),
            'insertUser' => array('label' => 'Insert User', 'type' => 'text', 'acl' => 'read'),
            'isEnabled' => array('label' => 'Enabled', 'type' => 'boolean', 'acl' => 'edit', 'default' => true)
        ));
    }

    /**
     * Get all objects by date (date inside of interval [startDate, endDate])
     * @param $options (array with queryBuilder options format)
     * @param $date
     * @return mixed
     * ????????????????????????????????????????????????????????????????????????
    public function getByDate($options, $date)
    {
        $options = array_merge_recursive(
            $options,
            array(
                'criteria' => array (
                    array(
                        'field' => 'isEnabled',
                        'expr' => 'eq',
                        'value' => 1
                    )
                ),
                'orderBy' => array(
                    array('field' => 'insertTime', 'value' => 'DESC')
                )
            )
        );

        $localTable = $this->getLocalTable();
        $parameters = count($options['criteria']);

        $qb = $this->queryBuilder($options, false);
        // Used a "reverse between" (field is the value, and values are fields)
        $parameters++;
        $qb->andWhere($qb->expr()->between('?'.$parameters, $localTable.'.startDate', $localTable.'.endDate'));
        $qb->setParameter($parameters, $date);

        return $this->executeQueryBuilder($qb);
    }*/
}