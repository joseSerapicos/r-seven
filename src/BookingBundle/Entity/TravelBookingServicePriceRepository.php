<?php

namespace BookingBundle\Entity;

use AppBundle\Service\HelperService;

/**
 * TravelBookingServicePriceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TravelBookingServicePriceRepository extends BaseBookingServicePriceRepository
{
    /**
     * Get entity metadata
     * @return mixed
     */
    static function getMetadata()
    {
        // Process metadata only once
        if (self::$metadata) {
            return self::$metadata;
        }

        $parentMetadata = parent::getMetadata();

        $localMetadata = self::processMetadata(array(
            'travelBookingServiceObj' => array('label' => 'Travel Booking Service', 'type' => 'object', 'acl' => 'read', 'typeDetail' => array(
                'table' => 'travelBookingService', 'bundle' => 'booking', 'type' => 'none')),
            'bookingService_name' => array('table' => 'travelBookingService', 'field' => 'description', 'label' => '', 'type' => 'text',
                'acl' => 'read', 'dependency' => 'travelBookingServiceObj'),
            'serviceObj' => array('table' => 'travelBookingService', 'label' => 'Service', 'type' => 'object', 'acl' => 'read',
                'dependency' => 'travelBookingServiceObj', 'typeDetail' => array(
                    'table' => 'service', 'bundle' => 'services', 'type' => 'none', 'fieldInView' => 'service_name'),
                'form' => array('type' => 'html-select')
            ),
            'appIconObj' => array('table' => 'service', 'label' => 'nd',
                'type' => 'object', 'acl' => 'read', 'dependency' => 'serviceObj', 'typeDetail' => array(
                    'table' => 'app_icon', 'bundle' => 'sysadmin', 'type' => 'none')
            ),
            'service_icon' => array('table' => 'app_icon', 'field' => 'icon', 'label' => '', 'type' => 'icon',
                'acl' => 'read', 'dependency' => 'appIconObj', 'form' => array('type' => 'none')),
            'service_name' => array('table' => 'service', 'field' => 'name', 'label' => '', 'type' => 'text',
                'acl' => 'read', 'dependency' => 'serviceObj', 'form' => array('type' => 'none')),
            'vatCode_name' => array('table' => 'vatCode', 'field' => 'name', 'label' => 'VAT Code', 'type' => 'text',
                'acl' => 'read', 'dependency' => 'vatCodeObj', 'form' => array('type' => 'none'))
        ));

        return self::$metadata = HelperService::pushIntoArray($parentMetadata, $localMetadata, 'id');
    }

    /**
     * Get Not Invoiced Values By Booking (return a default array of objects for invoice to bill by booking)
     * @param $bookingObj
     * @param $options (array with queryBuilder options format)
     * @return mixeds
     */
    public function getNotInvoicedValuesByBooking($bookingObj, $options = array())
    {
        $localTable = $this->getLocalTable();

        // Entities names
        $bookingEntity = HelperService::getClassName($bookingObj);

        $options = array(
            'fields' => array(
                'id',
                'serviceObj',
                'service_icon',
                'bookingService_name',
                'service_name',
                'description',
                'quantity',
                $localTable . ".postingType AS postingType",
                // Get the total price value minus the value already billed (remain val).
                // Its used total (value without VAT + VAT, because is more exactly to get original values)
                "((CASE WHEN (" . $localTable . ".postingType = 'DEBIT') "
                . "THEN (" . $localTable . ".subTotalSell + " . $localTable . ".totalVatSell) "
                . "ELSE ((" . $localTable . ".subTotalSell + " . $localTable . ".totalVatSell) * -1) END) "
                . " - "
                . "(CASE WHEN (clientDocumentType.operation IS NOT NULL) THEN (SUM(CASE WHEN (clientDocumentType.operation = 'DEBIT') "
                . "THEN (clientCurrentAccountDetail.subTotal + clientCurrentAccountDetail.totalVat) "
                . "ELSE ((clientCurrentAccountDetail.subTotal + clientCurrentAccountDetail.totalVat) * -1) END)) ELSE (0) END)) AS notInvoicedValue"
            ),
            'criteria' => array_merge(
                (isset($options['criteria']) ? $options['criteria'] : array()),
                array (
                    array(
                        'field' => 'isEnabled',
                        'expr' => 'eq',
                        'value' => true
                    )
                )
            )
        );

        // Get query builder
        $qb = $this->queryBuilder($options, false);

        // Get booking client current account detail
        $qb->leftJoin('BookingBundle\Entity\\' . $bookingEntity . 'ClientCurrentAccountDetail',
            'bookingClientCurrentAccountDetail',
            'WITH',
            ('bookingClientCurrentAccountDetail.' . $localTable . 'Obj = ' . $localTable . '.id')
        );

        // Get client current account detail
        $qb->leftJoin('bookingClientCurrentAccountDetail.clientCurrentAccountDetailObj',
            'clientCurrentAccountDetail',
            'WITH',
            'clientCurrentAccountDetail.isEnabled = 1'
        );

        // Get client current account
        $qb->leftJoin('clientCurrentAccountDetail.clientCurrentAccountObj',
            'clientCurrentAccount',
            'WITH',
            'clientCurrentAccount.isEnabled = 1'
        );

        // Get document type
        $qb->leftJoin('clientCurrentAccount.clientDocumentTypeObj',
            'clientDocumentType'
        );

        // Group by id for "SUM"
        $qb->groupBy($localTable . '.id');

        // Remove registries already invoiced
        $qb->having("(postingType = 'DEBIT') AND (notInvoicedValue > 0)");
        $qb->orHaving("(postingType = 'CREDIT') AND (notInvoicedValue < 0)");

        return $this->executeQueryBuilder($qb);
    }
}