<?php

namespace BookingBundle\Entity;

use AppBundle\Entity\BaseEntityRepository;
use AppBundle\Service\HelperService;

/**
 * TravelBookingClientDocumentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TravelBookingClientDocumentRepository extends BaseEntityRepository
{
    static protected $metadata = null;

    /**
     * Get field metadata
     * @param $field
     * @param $attribute
     * @param $metadata (uses this metadata instead of local metadata)
     * @param $context ('view'|'form'|'none')
     * @return null
     */
    static public function getFieldMetadata($field, $attribute, $metadata = null, $context = 'none')
    {
        if (!$metadata) {
            $metadata = self::getMetadata();
        }
        return self::getLocalFieldMetadata($field, $attribute, $metadata, $context);
    }

    /**
     * Get local metadata (it needs to be implemented by children to get static variable with local metadata from parent)
     * @return mixed
     */
    protected function getLocalMetadata()
    {
        return $this->getMetadata();
    }

    /**
     * Get entity metadata
     * @return mixed
     */
    static function getMetadata()
    {
        // Process metadata only once
        if (self::$metadata) {
            return self::$metadata;
        }
        return self::$metadata = self::processMetadata(array(
            'id' => array('label' => 'Id', 'type' => 'none', 'acl' => 'read'),
            'travelBookingObj' => array('label' => 'Travel Booking', 'type' => 'object', 'acl' => 'read', 'typeDetail' => array(
                'table' => 'travelBooking', 'bundle' => 'booking', 'type' => 'none')),
            // Separated by steps for wizard
            'clientDocumentObj' => array('label' => 'Client Current Account', 'type' => 'object', 'acl' => 'read',
                'typeDetail' => array(
                    'table' => 'clientDocument', 'field' => 'id', 'bundle' => 'accounting', 'type' => 'none',
                    'metadata' => array('method' => 'merge', 'pushAfterField' => 'id')
                ),
                // Form Type Class defined at runtime according with the wizard step number
                // (%formTypeStep% will be correctly replaced)
                'form' => array('type' => 'embed', 'typeClass' => 'ClientDocumentStep%formTypeStep%')
            ),
            'insertTime' => array('label' => 'Insert Time', 'type' => 'datetime', 'acl' => 'read', 'form' => array('type' => 'none')),
            'insertUser' => array('label' => 'Insert User', 'type' => 'text', 'acl' => 'read', 'form' => array('type' => 'none')),
            'isEnabled' => array('label' => 'Enabled', 'type' => 'none', 'acl' => 'edit', 'default' => true)
        ));
    }

    /**
     * Set invoice status to booking
     * @param $bookingObj
     * @return mixeds
     */
    public function setBookingInvoiceStatus($bookingObj)
    {
        $localTable = $this->getLocalTable();

        // Entities names
        $bookingEntity = HelperService::getClassName($bookingObj);
        $bookingTable = lcfirst($bookingEntity);
        $bookingObjName = ($bookingTable . 'Obj');

        $options = array(
            'fields' => array(
                'clientDocumentObj',
                '(booking.subTotalSell + booking.totalVatSell) AS total',
                // Get the total invoiced.
                // Its used total (value without VAT + VAT, because is more exactly to get original values)
                "(CASE WHEN (documentType.operation IS NOT NULL) THEN (SUM(CASE WHEN (documentType.operation = 'DEBIT') "
                . "THEN (document.subTotal + document.totalVat) "
                . "ELSE ((document.subTotal + document.totalVat) * -1) END)) ELSE (0) END) AS totalInvoiced"
            ),
            'criteria' => array (
                array(
                    'field' => 'isEnabled',
                    'expr' => 'eq',
                    'value' => true
                )
            )
        );

        // Get query builder
        $qb = $this->queryBuilder($options, false);

        // Get booking
        $qb->innerJoin($localTable . "." . $bookingObjName,
            'booking',
            'WITH',
            ('booking.id = ' . $bookingObj->getId())
        );

        // Get client current account
        $qb->innerJoin($localTable . '.clientDocumentObj',
            'document',
            'WITH',
            'document.isEnabled = 1'
        );

        // Get document type
        $qb->innerJoin('clientDocument.clientDocumentTypeObj',
            'documentType',
            'WITH',
            "documentType.type = 'INVOICE'" // Only invoice documents are used
        );

        $result = $this->executeQueryBuilder($qb);
        $result = reset($result);

        switch ($result['totalInvoiced']) {
            case 0:
                $bookingObj->setInvoiceStatus("NO");
                break;
            case $result['total']:
                $bookingObj->setInvoiceStatus("YES");
                break;
            default:
                $bookingObj->setInvoiceStatus("PARTIAL");
        }

        return $bookingObj;
    }

    /**
     * Get Not Received Values By Booking
     * @param $bookingObj
     * @param $entity
     * @param $options (array with queryBuilder options format)
     * @return mixeds
     */
    public function getNotReceivedValuesByBooking($bookingObj, $entity, $options = array())
    {
        $localTable = $this->getLocalTable();

        // Entities names
        $bookingEntity = HelperService::getClassName($bookingObj);
        $bookingTable = lcfirst($bookingEntity);

        $options = array(
            'fields' => array(
                'id',
                'clientDocumentType_name',
                'code',
                'entity_avatar',
                'entity_name',
                'date',
                'dueDate',
                // Get the total value of document minus the total received of document
                "((clientDocument.subTotal + clientDocument.totalVat) "
                . " - "
                . "(CASE WHEN (clientDocumentReceiptSettlement.id IS NOT NULL) THEN (SUM(clientDocumentReceiptSettlement.value)) "
                . "ELSE (0) END)) AS total"
            ),
            'criteria' => array_merge(
                (isset($options['criteria']) ? $options['criteria'] : array()),
                array (
                    array(
                        'field' => 'isEnabled',
                        'expr' => 'eq',
                        'value' => true
                    ),
                    array(
                        'field' => ($bookingTable . 'Obj'),
                        'expr' => 'eq',
                        'value' => $bookingObj
                    ),
                    array(
                        'field' => 'entityObj',
                        'expr' => 'eq',
                        'value' => $entity
                    ),
                    array(
                        'field' => 'clientDocumentType.operation',
                        'expr' => 'eq',
                        'value' => 'DEBIT'
                    ),
                )
            )
        );

        // Get query builder
        $qb = $this->queryBuilder($options, false);

        // Get booking client current account detail
        $qb->leftJoin('AccountingBundle\Entity\ClientDocumentReceiptSettlement',
            'clientDocumentReceiptSettlement',
            'WITH',
            ('clientDocumentReceiptSettlement.invoiceClientDocumentObj = clientDocument.id')
        );

        // Group by id for "SUM"
        $qb->groupBy($localTable . '.id');

        // Remove registries already invoiced
        $qb->having("(total > 0)");

        return $this->executeQueryBuilder($qb);
    }
}