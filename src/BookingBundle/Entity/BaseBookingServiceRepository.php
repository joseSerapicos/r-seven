<?php

namespace BookingBundle\Entity;

use AppBundle\Entity\BasePriceResumeRepository;
use AppBundle\Service\HelperService;

/**
 * BookingServiceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BaseBookingServiceRepository extends BasePriceResumeRepository
{
    /**
     * Overrides parent
     * @return mixed
     */
    static function getMetadata()
    {
        // Process metadata only once
        if (self::$metadata) {
            return self::$metadata;
        }

        $parentMetadata = parent::getMetadata();

        $localMetadata = self::$metadata = self::processMetadata(array(
            'serviceObj' => array('label' => 'Service', 'type' => 'object', 'acl' => 'edit',
                'typeDetail' => array(
                    'table' => 'service', 'bundle' => 'services', 'type' => 'none', 'fieldInView' => 'name'),
                'form' => array('type' => 'html-select')
            ),
            'appIconObj' => array('table' => 'service', 'label' => 'nd',
                'type' => 'object', 'acl' => 'read', 'dependency' => 'serviceObj', 'typeDetail' => array(
                    'table' => 'app_icon', 'bundle' => 'sysadmin', 'type' => 'none')
            ),
            'icon' => array('table' => 'app_icon', 'label' => 'Icon', 'type' => 'icon',
                'acl' => 'read', 'dependency' => 'appIconObj'),
            'name' => array('table' => 'service', 'label' => 'Name', 'type' => 'text',
                'acl' => 'read', 'dependency' => 'serviceObj'),
            'type' => array('table' => 'service', 'label' => '', 'type' => 'fake',
                'acl' => 'read', 'dependency' => 'serviceObj', 'form' => array('type' => 'none')),
            'isEnabledAvailability' => array('table' => 'service', 'label' => '', 'type' => 'fake',
                'acl' => 'read', 'dependency' => 'serviceObj', 'form' => array('type' => 'none')),
            'isAutoAvailability' => array('label' => 'Auto Availability', 'type' => 'boolean', 'acl' => 'edit'),
            'isEnabledAllot' => array('table' => 'service', 'label' => '', 'type' => 'fake',
                'acl' => 'read', 'dependency' => 'serviceObj', 'form' => array('type' => 'none')),
            'isAutoAllot' => array('label' => 'Auto Allot', 'type' => 'boolean', 'acl' => 'edit'),
            'isEnabledPrice' => array('table' => 'service', 'label' => '', 'type' => 'fake',
                'acl' => 'read', 'dependency' => 'serviceObj', 'form' => array('type' => 'none')),
            'description' => array('label' => 'Description', 'type' => 'text', 'acl' => 'edit'),
            'supplierObj' => array('label' => 'Supplier', 'type' => 'object', 'acl' => 'edit',
                'typeDetail' => array(
                    'table' => 'supplier', 'bundle' => 'entities', 'type' => 'none', 'fieldInView' => 'supplier_name'),
                'isRequired' => false,
                'form' => array('type' => 'auto-complete')
            ),
            'entityObj' => array('table' => 'supplier', 'field' => 'entityObj', 'label' => 'nd',
                'type' => 'object', 'acl' => 'read', 'dependency' => 'supplierObj', 'typeDetail' => array(
                    'table' => 'entity', 'tableAlias' => 'entity', 'bundle' => 'entities', 'type' => 'none')
            ),
            'supplier_name' => array('table' => 'entity', 'field' => 'name', 'label' => 'Supplier',
                'type' => 'text', 'acl' => 'read', 'dependency' => 'entityObj', 'form' => array('type' => 'none')),
            'reference' => array('label' => 'Reference', 'type' => 'text', 'acl' => 'edit'),
            'startDate' => array('label' => 'Start Date', 'type' => 'date', 'acl' => 'read'),
            // Fake field to control the startDate in edit mode (can't be edited if is auto allot or auto availability)
            'startDateManual' => array('label' => 'Start Date', 'type' => 'date', 'acl' => 'edit',
                'view' => array(
                    'type' => 'none', 'typeDetail' => array(
                        'rules' => array(
                            array('expr' => 'max', 'value' => 'endDateManual', 'allowSkip' => false),
                            array('expr' => 'range', 'value' => 'availability', 'allowSkip' => true),
                        ),
                        'skipRulesControl' => '!isAutoAvailability'
                    )
                ),
                'form' => array('isMapped' => false)
            ),
            'endDate' => array('label' => 'End Date', 'type' => 'date', 'acl' => 'read'),
            // Fake field to control the endDate in edit mode (can't be edited if is auto allot or auto availability)
            'endDateManual' => array('label' => 'End Date', 'type' => 'date', 'acl' => 'edit',
                'view' => array(
                    'type' => 'none', 'typeDetail' => array(
                        'rules' => array(
                            array('expr' => 'min', 'value' => 'startDateManual', 'allowSkip' => false),
                            array('expr' => 'range', 'value' => 'availability', 'allowSkip' => true),
                        ),
                        'skipRulesControl' => '!isAutoAvailability'
                    )
                ),
                'form' => array('isMapped' => false)
            ),
            'quantity' => array('label' => 'Quantity', 'type' => 'number', 'acl' => 'read'),
            // Fake field to control the quantity in edit mode (can't be edited if is auto allot)
            'quantityManual' => array('label' => 'Quantity', 'type' => 'number', 'acl' => 'edit',
                'view' => array('type' => 'none'),
                'form' => array('isMapped' => false)
            ),
            'confirmationStatus' => array('label' => 'Confirmation', 'type' => 'status', 'acl' => 'read'),
            // Fake field to skip the auto confirmation status
            'confirmationStatusManual' => array('field' => 'confirmationStatus', 'label' => 'Confirmation',
                'type' => 'enum', 'acl' => 'edit',
                'typeDetail' => array(
                    'type' => 'none', 'fieldInView' => 'confirmationStatus', 'choices' => array(
                        'value' => array(
                            '<span class="status -danger"></span>' => 'NO',
                            '<span class="status -warning"></span>' => 'PARTIAL',
                            '<span class="status -primary"></span>' => 'YES'
                        )
                    )
                ),
                'form' => array('type' => 'html-select', 'isMapped' => false),
                'view' => array('type' => 'none')
            ),
            'priority' => array('label' => 'Priority', 'type' => 'none', 'acl' => 'read')
        ));

        return self::$metadata = HelperService::pushIntoArray($parentMetadata, $localMetadata, 'id');
    }

    /**
     * Set totals to service booking (from booking service price objects)
     * @param $bookingServiceObj
     * @return mixed
     */
    public function setTotals($bookingServiceObj)
    {
        // Entities names
        $BookingServiceEntity = HelperService::getClassName($bookingServiceObj);
        $bookingServiceEntity = lcfirst($BookingServiceEntity);
        $BookingServicePriceEntity = ($BookingServiceEntity . "Price");
        $bookingServicePriceEntity = lcfirst($BookingServicePriceEntity);

        $options = array(
            'fields' => array(
                "SUM(CASE WHEN (" . $bookingServicePriceEntity . ".postingType = 'DEBIT') THEN " . $bookingServicePriceEntity . ".subTotalCost ELSE (" . $bookingServicePriceEntity . ".subTotalCost * -1) END) AS subTotalCost",
                "SUM(CASE WHEN (" . $bookingServicePriceEntity . ".postingType = 'DEBIT') THEN " . $bookingServicePriceEntity . ".subTotalSell ELSE (" . $bookingServicePriceEntity . ".subTotalSell * -1) END) AS subTotalSell",
                "SUM(CASE WHEN (" . $bookingServicePriceEntity . ".postingType = 'DEBIT') THEN " . $bookingServicePriceEntity . ".totalVatCost ELSE (" . $bookingServicePriceEntity . ".totalVatCost * -1) END) AS totalVatCost",
                "SUM(CASE WHEN (" . $bookingServicePriceEntity . ".postingType = 'DEBIT') THEN " . $bookingServicePriceEntity . ".totalVatSell ELSE (" . $bookingServicePriceEntity . ".totalVatSell * -1) END) AS totalVatSell"
            ),
            'criteria' => array (
                array(
                    'field' => 'id',
                    'expr' => 'eq',
                    'value' => $bookingServiceObj->getId()
                )
            )
        );

        $qb = $this->queryBuilder($options, false);

        $qb->innerJoin('BookingBundle\Entity\\' . $BookingServicePriceEntity,
            $bookingServicePriceEntity,
            'WITH',
            ($bookingServicePriceEntity . '.' . $bookingServiceEntity . 'Obj = ' . $bookingServiceEntity . '.id AND ' . $bookingServicePriceEntity . '.isEnabled = 1')
        );

        $totals = $this->executeQueryBuilder($qb);
        $totals = reset($totals); // First element of array
        $bookingServiceObj->setSubTotalCost($totals['subTotalCost']);
        $bookingServiceObj->setSubTotalSell($totals['subTotalSell']);
        $bookingServiceObj->setTotalVatCost($totals['totalVatCost']);
        $bookingServiceObj->setTotalVatSell($totals['totalVatSell']);

        return $bookingServiceObj;
    }

    /**
     * Set totals to booking (from booking service objects)
     * @param $bookingObj
     * @return mixeds
     */
    public function setBookingTotals($bookingObj)
    {
        $localTable = $this->getLocalTable();

        // Entities names
        $BookingEntity = HelperService::getClassName($bookingObj);
        $bookingEntity = lcfirst($BookingEntity);

        $options = array(
            'fields' => array(
                "SUM(".$localTable.".subTotalCost) AS subTotalCost",
                "SUM(".$localTable.".subTotalSell) AS subTotalSell",
                "SUM(".$localTable.".totalVatCost) AS totalVatCost",
                "SUM(".$localTable.".totalVatSell) AS totalVatSell"
            ),
            'criteria' => array (
                array(
                    'field' => 'isEnabled',
                    'expr' => 'eq',
                    'value' => true
                ),
                array(
                    'field' => ($bookingEntity . 'Obj'),
                    'expr' => 'eq',
                    'value' => $bookingObj
                )
            )
        );

        $totals = $this->queryBuilder($options, true);
        $totals = reset($totals); // First element of array
        $bookingObj->setSubTotalCost($totals['subTotalCost']);
        $bookingObj->setSubTotalSell($totals['subTotalSell']);
        $bookingObj->setTotalVatCost($totals['totalVatCost']);
        $bookingObj->setTotalVatSell($totals['totalVatSell']);

        return $bookingObj;
    }

    /**
     * Set confirmation to booking (from booking service objects)
     * @param $bookingObj
     * @return mixeds
     */
    public function setBookingConfirmation($bookingObj)
    {
        $localTable = $this->getLocalTable();

        // Entities names
        $BookingEntity = HelperService::getClassName($bookingObj);
        $bookingEntity = lcfirst($BookingEntity);

        $options = array(
            'fields' => array(
                "DISTINCT(" . $localTable . ".confirmationStatus) AS confirmationStatus"
            ),
            'criteria' => array (
                array(
                    'field' => 'isEnabled',
                    'expr' => 'eq',
                    'value' => true
                ),
                array(
                    'field' => ($bookingEntity . 'Obj'),
                    'expr' => 'eq',
                    'value' => $bookingObj
                )
            )
        );

        $confirmationStatus = $this->queryBuilder($options, true);
        $confirmationStatus = array_column($confirmationStatus, 'confirmationStatus', 'confirmationStatus');

        switch (count($confirmationStatus)) {
            case 0:
                $bookingObj->setConfirmationStatus("YES");
                break;
            case 1:
                $bookingObj->setConfirmationStatus(reset($confirmationStatus));
                break;
            default:
                $bookingObj->setConfirmationStatus("PARTIAL");
        }

        return $bookingObj;
    }

    /**
     * Set dates to booking (from booking service objects)
     * @param $bookingObj
     * @return mixed
     */
    public function setBookingDates($bookingObj)
    {
        $localTable = $this->getLocalTable();

        // Entities names
        $BookingEntity = HelperService::getClassName($bookingObj);
        $bookingEntity = lcfirst($BookingEntity);

        $options = array(
            'fields' => array(
                "MIN(" . $localTable . ".startDate) AS startDate",
                "Max(" . $localTable . ".endDate) AS endDate",
            ),
            'criteria' => array (
                array(
                    'field' => 'isEnabled',
                    'expr' => 'eq',
                    'value' => true
                ),
                array(
                    'field' => ($bookingEntity . 'Obj'),
                    'expr' => 'eq',
                    'value' => $bookingObj
                )
            )
        );

        $dates = $this->queryBuilder($options, true);
        $dates = reset($dates); // First (and unique) array element

        $bookingObj->setStartDate(new \DateTime($dates['startDate']))
            ->setEndDate(new \DateTime($dates['endDate']));

        return $bookingObj;
    }
}