<?php

namespace BookingBundle\Entity;

use AppBundle\Entity\BaseEntityRepository;
use AppBundle\Service\HelperService;

/**
 * BookingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BaseBookingRepository extends BaseEntityRepository
{
    static protected $metadata = null;

    /**
     * Get field metadata
     * @param $field
     * @param $attribute
     * @param $metadata (uses this metadata instead of local metadata)
     * @param $context ('view'|'form'|'none')
     * @return null
     */
    static public function getFieldMetadata($field, $attribute, $metadata = null, $context = 'none')
    {
        if (!$metadata) {
            $metadata = self::getMetadata();
        }
        return self::getLocalFieldMetadata($field, $attribute, $metadata, $context);
    }

    /**
     * Get local metadata (it needs to be implemented by children to get static variable with local metadata from parent)
     * @return mixed
     */
    protected function getLocalMetadata()
    {
        return $this->getMetadata();
    }

    /**
     * Get entity metadata
     * @return mixed
     */
    static function getMetadata()
    {
        // Process metadata only once
        if (self::$metadata) {
            return self::$metadata;
        }
        return self::$metadata = self::processMetadata(array(
            'id' => array('label' => 'Id', 'type' => 'number', 'acl' => 'read'),
            'code' => array('label' => 'Code', 'type' => 'code', 'acl' => 'read'),
            'storeObj' => array('label' => 'Store', 'type' => 'object', 'acl' => 'read', 'typeDetail' => array(
                'table' => 'store', 'bundle' => 'admin', 'type' => 'none')),
            'userObj' => array('label' => 'User/Operator', 'type' => 'object', 'acl' => 'edit', 'typeDetail' => array(
                'table' => 'user', 'bundle' => 'admin', 'type' => 'none',
                'choices' => array('query' => 'getChoicesWithLoggedUser')), 'isRequired' => false,
                'default' => HelperService::getGlobalVar('loggedUserId'),
                'form' => array('type' => 'select')
            ),
            'operator_entityObj' => array('table' => 'user', 'field' => 'entityObj', 'label' => 'nd',
                'type' => 'object', 'acl' => 'read', 'dependency' => 'userObj', 'typeDetail' => array(
                    'table' => 'entity', 'tableAlias' => 'entity_operator', 'bundle' => 'entities', 'type' => 'none')
            ),
            'operator_name' => array('table' => 'user', 'field' => 'username', 'label' => 'Operator Name',
                'type' => 'text', 'acl' => 'read', 'dependency' => 'userObj', 'form' => array('type' => 'none')),
            'operator_avatar' => array('table' => 'entity_operator', 'field' => 'avatar', 'label' => 'Operator',
                'type' => 'avatar', 'acl' => 'read', 'dependency' => 'operator_entityObj',
                'form' => array('type' => 'none')),
            'clientObj' => array('label' => 'Client', 'type' => 'object', 'acl' => 'edit',
                'typeDetail' => array(
                    'table' => 'client', 'fieldInView' => 'client_name', 'bundle' => 'entities', 'type' => 'none'),
                'form' => array('type' => 'auto-complete')
            ),
            'client_entityObj' => array('table' => 'client', 'field' => 'entityObj', 'label' => 'nd',
                'type' => 'object', 'acl' => 'read', 'dependency' => 'clientObj', 'typeDetail' => array(
                    'table' => 'entity', 'tableAlias' => 'entity_client', 'bundle' => 'entities', 'type' => 'none')
            ),
            'client_name' => array('table' => 'entity_client', 'field' => 'name', 'label' => 'Client Name',
                'type' => 'text', 'acl' => 'read', 'dependency' => 'client_entityObj', 'form' => array('type' => 'none')),
            'client_avatar' => array('table' => 'entity_client', 'field' => 'avatar', 'label' => 'Client',
                'type' => 'avatar', 'acl' => 'read', 'dependency' => 'client_entityObj', 'form' => array('type' => 'none')),
            'startDate' => array('label' => 'Start Date', 'type' => 'date', 'acl' => 'read'),
            'endDate' => array('label' => 'End Date', 'type' => 'date', 'acl' => 'read'),
            'totalCost' => array('label' => 'Cost', 'type' => 'monetary', 'acl' => 'read'),
            'totalSell' => array('label' => 'Sell', 'type' => 'monetary', 'acl' => 'read'),
            'totalMargin' => array('label' => 'Margin', 'type' => 'percentage', 'acl' => 'read'),
            'totalMarkup' => array('label' => 'Markup', 'type' => 'percentage', 'acl' => 'read'),
            'totalProfit' => array('label' => 'Profit', 'type' => 'monetary', 'acl' => 'read'),
            'invoiceStatus' => array('label' => 'Invoice', 'type' => 'enum', 'acl' => 'read',
                'typeDetail' => array(
                    'type' => 'status', 'choices' => array(
                        'value' => array(
                            'No' => 'NO', 'Partial' => 'PARTIAL', 'Yes' => 'YES'
                        )
                    )
                ),
                'form' => array('type' => 'select')
            ),
            'confirmationStatus' => array('label' => 'Confirmation', 'type' => 'enum', 'acl' => 'read',
                'typeDetail' => array(
                    'type' => 'status', 'choices' => array(
                        'value' => array(
                            'No' => 'NO', 'Partial' => 'PARTIAL', 'Yes' => 'YES'
                        )
                    )),
                'form' => array('type' => 'select')
            ),
            'insertTime' => array('label' => 'Insert Time', 'type' => 'datetime', 'acl' => 'read'),
            'insertUser' => array('label' => 'Insert User', 'type' => 'text', 'acl' => 'read'),
            'isEnabled' => array('label' => 'Enabled', 'type' => 'boolean', 'acl' => 'edit', 'default' => true),
        ));
    }
}