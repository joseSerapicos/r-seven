<?php

namespace Bck\BookingBundle\Entity;

use AppBundle\Entity\BasePriceResumeRepository;
use AppBundle\Service\HelperService;

/**
 * BookingServiceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BookingServiceRepository extends BasePriceResumeRepository
{
    static protected $metadata = null;

    /**
     * Get field metadata
     * @param $field
     * @param $attribute
     * @param $metadata (uses this metadata instead of local metadata)
     * @param $context ('view'|'form'|'none')
     * @return null
     */
    static public function getFieldMetadata($field, $attribute, $metadata = null, $context = 'none')
    {
        if (!$metadata) {
            $metadata = self::getMetadata();
        }
        return self::getLocalFieldMetadata($field, $attribute, $metadata, $context);
    }

    /**
     * Get local metadata (it needs to be implemented by children to get static variable with local metadata from parent)
     * @return mixed
     */
    protected function getLocalMetadata()
    {
        return $this->getMetadata();
    }

    /**
     * Overrides parent
     * @return mixed
     */
    static function getMetadata()
    {
        // Process metadata only once
        if (self::$metadata) {
            return self::$metadata;
        }

        $parentMetadata = parent::getMetadata();
        //$localTable = lcfirst(substr(strrchr(get_called_class(), '\\'), 1, -10));
        $langPrefix = HelperService::getGlobalVar('langPrefix');
        $name_lang = 'name_'.$langPrefix;

        $localMetadata = self::$metadata = self::processMetadata(array(
            'bookingObj' => array('label' => '', 'type' => 'object', 'acl' => 'read', 'typeDetail' => array(
                'table' => 'booking', 'bundlePrefix' => 'bck', 'bundle' => 'booking', 'type' => 'none')),
            'serviceObj' => array('label' => 'Service', 'type' => 'object', 'acl' => 'edit',
                'typeDetail' => array(
                    'table' => 'service', 'bundlePrefix' => 'bck', 'bundle' => 'services', 'type' => 'none'//, 'fieldInView' => 'name',
                    // The booking service form filed by the user, only can handle with RegularServices.
                    //'choices' => array('query' => 'getChoicesForBookingService') // Used the DataBox
                ),
                'form' => array('type' => 'hidden-entity')
            ),
            'vatCodeObj' => array('label' => 'VAT Code', 'type' => 'object', 'acl' => 'read', 'dependency' => 'serviceObj',
                'typeDetail' => array('table' => 'vatCode', 'bundlePrefix' => 'bck', 'bundle' => 'accounting', 'type' => 'none')
            ),
            'vatCode_percentage' => array('table' => 'vatCode', 'field' => 'percentage', 'label' => 'VAT Percentage', 'type' => 'percentage',
                'acl' => 'read', 'dependency' => 'vatCodeObj', 'form' => array('type' => 'none')),
            'vatCode_name' => array('table' => 'vatCode', 'field' => 'name', 'label' => 'VAT Code', 'type' => 'text',
                'acl' => 'read', 'dependency' => 'vatCodeObj', 'form' => array('type' => 'none')),
            'appIconObj' => array('table' => 'service', 'label' => 'nd',
                'type' => 'object', 'acl' => 'read', 'dependency' => 'serviceObj', 'typeDetail' => array(
                    'table' => 'app_icon', 'bundlePrefix' => 'bck', 'bundle' => 'sysadmin', 'type' => 'none')
            ),
            'icon' => array('table' => 'app_icon', 'label' => 'Icon', 'type' => 'icon',
                'acl' => 'read', 'isDefault' => true, 'dependency' => 'appIconObj', 'form' => array('type' => 'none')),
            'name' => array('table' => 'service', 'label' => 'Name', 'type' => 'text',
                'acl' => 'read', 'isDefault' => true, 'dependency' => 'serviceObj'),
            'type' => array('table' => 'service', 'label' => '', 'type' => 'fake',
                'acl' => 'read', 'dependency' => 'serviceObj', 'form' => array('type' => 'none')),
            'thumbnail' => array('table' => 'service', 'label' => 'Thumbnail', 'type' => 'img', 'acl' => 'read',
                'isDefault' => true, 'dependency' => 'serviceObj'),
            'startDate' => array('label' => 'Start Date', 'type' => 'date', 'acl' => 'read', 'isDefault' => true),
            // Fake field to control the startDate in edit mode (can't be edited if is auto allot or auto availability)
            'startDateManual' => array('label' => 'Start Date', 'type' => 'date', 'acl' => 'edit',
                'view' => array(
                    'type' => 'none', 'typeDetail' => array(
                        'rules' => array(
                            array('expr' => 'max', 'value' => 'endDateManual', 'allowSkip' => false),
                            array('expr' => 'range', 'value' => 'availability', 'allowSkip' => true),
                        ),
                        'skipRulesControl' => '!isAutoAvailability'
                    )
                ),
                'form' => array('isMapped' => false)
            ),
            'endDate' => array('label' => 'End Date', 'type' => 'date', 'acl' => 'read'),
            // Fake field to control the endDate in edit mode (can't be edited if is auto allot or auto availability)
            'endDateManual' => array('label' => 'End Date', 'type' => 'date', 'acl' => 'edit',
                'view' => array(
                    'type' => 'none', 'typeDetail' => array(
                        'rules' => array(
                            array('expr' => 'min', 'value' => 'startDateManual', 'allowSkip' => false),
                            array('expr' => 'range', 'value' => 'availability', 'allowSkip' => true),
                        ),
                        'skipRulesControl' => '!isAutoAvailability'
                    )
                ),
                'form' => array('isMapped' => false)
            ),
            'durationDays' => array('label' => 'Duration', 'type' => 'number', 'acl' => 'read', 'isDefault' => true),
            'placeObj' => array('label' => 'From', 'type' => 'object', 'acl' => 'edit',
                'typeDetail' => array(
                    'table' => 'place', 'bundlePrefix' => 'bck', 'bundle' => 'common', 'type' => 'none', 'fieldInView' => 'place_name'),
                'isRequired' => false,
                'form' => array('type' => 'auto-complete')
            ),
            'place_name' => array('table' => 'place', 'field' => $name_lang, 'label' => 'From (Name)', 'type' => 'text',
                'acl' => 'read', 'dependency' => 'placeObj', 'form' => array('type' => 'none'),
                'normalizer' => array('method' => 'getName')
            ),
            'place_iata' => array('table' => 'place', 'field' => 'iataCode', 'label' => 'From', 'type' => 'text',
                'acl' => 'read', 'dependency' => 'placeObj', 'form' => array('type' => 'none')),
            'placeToObj' => array('label' => 'To', 'type' => 'object', 'acl' => 'edit',
                'typeDetail' => array(
                    'table' => 'place', 'tableAlias' => 'place_to', 'bundlePrefix' => 'bck', 'bundle' => 'common', 'type' => 'none',
                    'fieldInView' => 'placeTo_name'),
                'isRequired' => false,
                'form' => array('type' => 'auto-complete')
            ),
            'placeTo_name' => array('table' => 'place_to', 'field' => 'name', 'label' => 'To (Name)', 'type' => 'text',
                'acl' => 'read', 'dependency' => 'placeToObj', 'form' => array('type' => 'none')),
            'placeTo_iata' => array('table' => 'place_to', 'field' => 'iataCode', 'label' => 'To', 'type' => 'text',
                'acl' => 'read', 'dependency' => 'placeToObj', 'form' => array('type' => 'none')),
            'quantity' => array('label' => 'Quantity', 'type' => 'number', 'acl' => 'read', 'isDefault' => true),
            // Fake field to control the quantity in edit mode (can't be edited if is auto allot)
            'quantityManual' => array('label' => 'Quantity', 'type' => 'number', 'acl' => 'edit',
                'view' => array('type' => 'none'),
                'form' => array('isMapped' => false)
            ),
            // It's here for query builder (to get metadata about field)
            'allotTargetServiceObj' => array('label' => 'nd', 'type' => 'object', 'acl' => 'read',
                'typeDetail' => array(
                    'table' => 'service', 'bundlePrefix' => 'bck', 'bundle' => 'services', 'type' => 'none'
                )
            ),
            'confirmationStatus' => array('label' => 'Confirmation', 'type' => 'status', 'acl' => 'read', 'isDefault' => true),
            // Fake field to skip the auto confirmation status
            'confirmationStatusManual' => array('field' => 'confirmationStatus', 'label' => 'Confirmation',
                'type' => 'enum', 'acl' => 'edit',
                'typeDetail' => array(
                    'type' => 'none', 'fieldInView' => 'confirmationStatus', 'choices' => array(
                        'value' => array(
                            '<span class="status -danger"></span>' => 'NO',
                            '<span class="status -warning"></span>' => 'PARTIAL',
                            '<span class="status -primary"></span>' => 'YES'
                        )
                    )
                ),
                'form' => array('type' => 'html-select', 'isMapped' => false),
                'view' => array('type' => 'none')
            ),
            'isEnabledAvailability' => array('table' => 'service', 'label' => '', 'type' => 'fake',
                'acl' => 'read', 'dependency' => 'serviceObj', 'form' => array('type' => 'none')),
            // To control the way how user handles with availability
            'isAutoAvailability' => array('label' => 'Auto Availability', 'type' => 'none', 'acl' => 'edit',
                'isRequired' => false,
                'form' => array('type' => 'boolean', 'isFakeField' => true) // Fake field defined in entity
            ),
            'isEnabledAllot' => array('table' => 'service', 'label' => '', 'type' => 'fake',
                'acl' => 'read', 'dependency' => 'serviceObj', 'form' => array('type' => 'none')),
            // To control the way how user handles with allot
            // (this is not a manual field, is saved in database to control allot)
            'isAutoAllot' => array('label' => 'Auto Allot', 'type' => 'boolean', 'acl' => 'edit', 'isDefault' => true),
            'isEnabledPrice' => array('table' => 'service', 'label' => '', 'type' => 'fake',
                'acl' => 'read', 'dependency' => 'serviceObj', 'form' => array('type' => 'none')),
            // To control the way how user handles with price
            'isAutoPrice' => array('label' => 'Auto Price', 'type' => 'none', 'acl' => 'edit',
                'isRequired' => false,
                'form' => array('type' => 'boolean', 'isFakeField' => true) // Fake field defined in entity
            ),
            'description' => array('label' => 'Description', 'type' => 'text', 'acl' => 'edit', 'isDefault' => true),
            'supplierObj' => array('label' => 'Supplier', 'type' => 'object', 'acl' => 'edit',
                'typeDetail' => array(
                    'table' => 'supplier', 'bundlePrefix' => 'bck', 'bundle' => 'entities', 'type' => 'none', 'fieldInView' => 'supplier_name'),
                'isRequired' => false,
                'form' => array('type' => 'auto-complete')
            ),
            'entityObj' => array('table' => 'supplier', 'field' => 'entityObj', 'label' => 'nd',
                'type' => 'object', 'acl' => 'read', 'dependency' => 'supplierObj', 'typeDetail' => array(
                    'table' => 'entity', 'tableAlias' => 'entity', 'bundlePrefix' => 'bck', 'bundle' => 'entities', 'type' => 'none')
            ),
            'supplier_name' => array('table' => 'entity', 'field' => 'name', 'label' => 'Supplier',
                'type' => 'text', 'acl' => 'read', 'dependency' => 'entityObj', 'form' => array('type' => 'none')),
            'reference' => array('label' => 'Reference', 'type' => 'text', 'acl' => 'edit', 'isDefault' => true),
            // Field used in view to determine grouped service
            'grouperBookingServiceObj' => array('label' => '', 'type' => 'object', 'acl' => 'read',
                'typeDetail' => array(
                    'table' => 'bookingService', 'tableAlias' => 'grouperBookingService',
                    'bundlePrefix' => 'bck', 'bundle' => 'booking', 'type' => 'none'
                )
            ),
            // Field used in view to determine grouper service
            'grouperBookingServicePriceObj' => array('label' => '', 'type' => 'object', 'acl' => 'read',
                'typeDetail' => array(
                    'table' => 'bookingServicePrice', 'bundlePrefix' => 'bck', 'bundle' => 'booking', 'type' => 'none'
                )
            ),
            'priority' => array('label' => 'Priority', 'type' => 'none', 'acl' => 'read'),
            // Handled by cancel action
            'isEnabled' => array('label' => 'Enabled', 'type' => 'boolean', 'acl' => 'read',
                'form' => array('type' => 'none'), 'view' => array('keepOriginalNormalizer' => true)
            )
        ));

        return self::$metadata = HelperService::pushIntoArray($parentMetadata, $localMetadata, 'id');
    }

    /**
     * Set totals to service booking (from booking service price objects)
     * @param $bookingServiceObj
     * @return mixed
     */
    // Disabled, because not contemplate grouping services
    /*public function setTotals($bookingServiceObj)
    {
        $localTable = $this->getLocalTable();

        ////////////////////////////////////
        // Booking Service Price
        ////////////////////////////////////////
        $options = array(
            'fields' => array(
                "SUM(CASE WHEN (bookingServicePrice.postingType = 'DEBIT') THEN bookingServicePrice.subTotalCost ELSE (bookingServicePrice.subTotalCost * -1) END) AS subTotalCost",
                "SUM(CASE WHEN (bookingServicePrice.postingType = 'DEBIT') THEN bookingServicePrice.subTotalSell ELSE (bookingServicePrice.subTotalSell * -1) END) AS subTotalSell",
                "SUM(CASE WHEN (bookingServicePrice.postingType = 'DEBIT') THEN bookingServicePrice.totalVatCost ELSE (bookingServicePrice.totalVatCost * -1) END) AS totalVatCost",
                "SUM(CASE WHEN (bookingServicePrice.postingType = 'DEBIT') THEN bookingServicePrice.totalVatSell ELSE (bookingServicePrice.totalVatSell * -1) END) AS totalVatSell"
            ),
            'criteria' => array(
                array(
                    'field' => 'id',
                    'expr' => 'eq',
                    'value' => $bookingServiceObj->getId()
                )
            )
        );

        $qb = $this->queryBuilder($options, false);

        $qb->innerJoin('Bck\BookingBundle\Entity\BookingServicePrice',
            'bookingServicePrice',
            'WITH',
            ('(bookingServicePrice.bookingServiceObj = ' . $localTable . '.id) AND (bookingServicePrice.isEnabled = 1)')
        );

        $totals = $this->executeQueryBuilder($qb);
        $totals = reset($totals); // First element of array

        $bookingServiceObj->setSubTotalCost($totals['subTotalCost']);
        $bookingServiceObj->setSubTotalSell($totals['subTotalSell']);
        $bookingServiceObj->setTotalVatCost($totals['totalVatCost']);
        $bookingServiceObj->setTotalVatSell($totals['totalVatSell']);

        return $bookingServiceObj;
    }*/

    /**
     * Get busy allot by date
     * @param $serviceObj (object)
     * @param $date
     * @param $allotTargetServiceObj (target service object, to get allot of specific service (like packages))
     * @return mixed
     */
    public function getBusyAllotByDate($serviceObj, $date, $allotTargetServiceObj = null)
    {
        $localTable = $this->getLocalTable();

        // Fields
        $options['fields'] = array(
            "SUM(".$localTable.".quantity) AS busy"
        );

        // Criteria
        $options['criteria'] = array(
            array('field' => 'serviceObj', 'expr' => 'eq', 'value' => $serviceObj),
            array('field' => $date, 'expr' => 'rbetween', 'value' => array('startDate', 'endDate')),
            array('field' => 'isAutoAllot', 'expr' => 'eq', 'value' => 1),
            array('field' => 'confirmationStatus', 'expr' => 'eq', 'value' => 'YES'),
            array('field' => 'isEnabled', 'expr' => 'eq', 'value' => 1)
        );
        if ($allotTargetServiceObj) {
            // Specific allot for $targetServiceObj
            $options['criteria'][] = array('field' => 'allotTargetServiceObj', 'expr' => 'eq', 'value' => $allotTargetServiceObj);
        } else {
            // Regular allot
            $options['criteria'][] = array('field' => 'allotTargetServiceObj', 'expr' => 'isNull', 'value' => null);
        }

        // Get query builder
        $qb = $this->queryBuilder($options, false);

        // Get booking
        $qb->leftJoin($localTable.'.bookingObj',
            'booking',
            'WITH',
            'booking.isEnabled = 1'
        );

        $busyAllot = $this->executeQueryBuilder($qb);
        $busyAllot = reset($busyAllot); // Get first element
        return (empty($busyAllot['busy']) ? 0 : $busyAllot['busy']);
    }

    /**
     * Set places to booking object (from booking service objects)
     * This function needs to be here, so we can get directly the object to set in bookingObj
     * @param $bookingObj
     * @return mixed
     */
    public function setBookingPlaces($bookingObj)
    {
        $localTable = $this->getLocalTable();

        $options = array(
            'criteria' => array(
                array(
                    'field' => 'bookingObj',
                    'expr' => 'eq',
                    'value' => $bookingObj->getId()
                ),
                array(
                    'field' => 'placeObj',
                    'expr' => 'isNotNull',
                    'value' => null
                ),
                array(
                    'field' => 'isEnabled',
                    'expr' => 'eq',
                    'value' => true
                )
            ),
            'orderBy' => array(
                array('field' => 'bookingService.priority', 'value' => 'ASC'),
                array('field' => 'bookingService.startDate', 'value' => 'ASC')
            )
        );

        // Get query builder
        $placesObsArr = $this->queryBuilder($options, true, 'getResult');

        if (is_array($placesObsArr) && (count($placesObsArr) > 0)) {
            $firstPlaceObj = reset($placesObsArr);
            $lastPlaceObj = end($placesObsArr);

            // First place, usually where travel starts, the origin
            $bookingObj->setPlaceObj($firstPlaceObj->getPlaceObj());
            // Last place, usually where travel ends, the last destination (here the placeToObj should be the origin again)
            $bookingObj->setPlaceToObj($lastPlaceObj->getPlaceObj());

            if ($bookingObj->getPlaceObj() == $bookingObj->getPlaceToObj()) {
                // If origin and destination are the same, can occurs that there are only one service of travel,
                // so the placeTo is used
                $bookingObj->setPlaceToObj($lastPlaceObj->getPlaceToObj());
            }
        } else {
            $bookingObj->setPlaceObj(null);
            $bookingObj->setPlaceToObj(null);
        }

        return $bookingObj;
    }
}