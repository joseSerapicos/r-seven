<?php

namespace Bck\BookingBundle\Entity;

use AppBundle\Entity\BasePriceResumeRepository;
use AppBundle\Service\HelperService;

/**
 * BookingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BookingRepository extends BasePriceResumeRepository
{
    static protected $metadata = null;

    /**
     * Get field metadata
     * @param $field
     * @param $attribute
     * @param $metadata (uses this metadata instead of local metadata)
     * @param $context ('view'|'form'|'none')
     * @return null
     */
    static public function getFieldMetadata($field, $attribute, $metadata = null, $context = 'none')
    {
        if (!$metadata) {
            $metadata = self::getMetadata();
        }
        return self::getLocalFieldMetadata($field, $attribute, $metadata, $context);
    }

    /**
     * Get local metadata (it needs to be implemented by children to get static variable with local metadata from parent)
     * @return mixed
     */
    protected function getLocalMetadata()
    {
        return $this->getMetadata();
    }

    /**
     * Overrides parent
     * @return mixed
     */
    static function getMetadata()
    {
        // Process metadata only once
        if (self::$metadata) {
            return self::$metadata;
        }

        $localTable = lcfirst(substr(strrchr(get_called_class(), '\\'), 1, -10));
        $langPrefix = HelperService::getGlobalVar('langPrefix');
        $name_lang = 'name_'.$langPrefix;
        $parentMetadata = parent::getMetadata();

        $localMetadata = self::$metadata = self::processMetadata(array(
            // NOTE: This field is not used in view nor in form, but it's necessary to get the object from session
            // storage otherwise the fields is not reset and Entity Manager does not recognize them.
            'moduleMenuObj' => array('label' => '', 'type' => 'object', 'acl' => 'read', 'typeDetail' => array(
                'table' => 'moduleMenu', 'bundlePrefix' => 'bck', 'bundle' => 'admin', 'type' => 'none')),
            'code' => array('label' => 'Code', 'field' => 'CONCAT('.$localTable.'.codePrefix, '.$localTable.'.codeNumber)',
                'table' => '', 'type' => 'code', 'acl' => 'read', 'isDefault' => true,
                'normalizer' => array('method' => 'getCode')
            ),
            'storeObj' => array('label' => 'Store', 'type' => 'object', 'acl' => 'read', 'typeDetail' => array(
                'table' => 'store', 'bundlePrefix' => 'bck', 'bundle' => 'admin', 'type' => 'none')),
            // Disabled 02/03/2018
            /*'store_name' => array('table' => 'store', 'field' => 'name', 'label' => 'Store', 'type' => 'text',
                'acl' => 'read', 'dependency' => 'storeObj', 'form' => array('type' => 'none')),*/
            'userObj' => array('label' => 'User/Operator', 'type' => 'object', 'acl' => 'edit', 'typeDetail' => array(
                'table' => 'user', 'bundlePrefix' => '', 'bundle' => 'login', 'type' => 'none',
                'choices' => array('query' => 'getChoicesWithLoggedUser')), 'isRequired' => false,
                'default' => HelperService::getGlobalVar('loggedUserId'),
                'form' => array('type' => 'select')
            ),
            'operator_entityObj' => array('table' => 'user', 'field' => 'entityObj', 'label' => 'nd',
                'type' => 'object', 'acl' => 'read', 'dependency' => 'userObj', 'typeDetail' => array(
                    'table' => 'entity', 'tableAlias' => 'entity_operator', 'bundlePrefix' => 'bck', 'bundle' => 'entities', 'type' => 'none')
            ),
            'operator_avatar' => array('table' => 'entity_operator', 'field' => 'avatar', 'label' => 'Operator',
                'type' => 'avatar', 'acl' => 'read', 'isDefault' => true, 'dependency' => 'operator_entityObj',
                'typeDetail' => array('fieldInView' => 'operator_name'),
                'form' => array('type' => 'none')),
            'operator_name' => array('table' => 'user', 'field' => 'username', 'label' => 'Operator Name',
                'type' => 'text', 'acl' => 'read', 'dependency' => 'userObj', 'form' => array('type' => 'none')),
            'clientObj' => array('label' => 'Client', 'type' => 'object', 'acl' => 'edit',
                'typeDetail' => array(
                    'table' => 'client', 'fieldInView' => 'client_name', 'bundlePrefix' => 'bck', 'bundle' => 'entities', 'type' => 'none'),
                'form' => array('type' => 'auto-complete')
            ),
            'client_entityObj' => array('table' => 'client', 'field' => 'entityObj', 'label' => 'nd',
                'type' => 'object', 'acl' => 'read', 'dependency' => 'clientObj', 'typeDetail' => array(
                    'table' => 'entity', 'tableAlias' => 'entity_client', 'bundlePrefix' => 'bck', 'bundle' => 'entities', 'type' => 'none')
            ),
            'client_avatar' => array('table' => 'entity_client', 'field' => 'avatar', 'label' => 'Client',
                'type' => 'avatar', 'acl' => 'read', 'isDefault' => true, 'dependency' => 'client_entityObj',
                'typeDetail' => array('fieldInView' => 'client_name'),
                'form' => array('type' => 'none')
            ),
            'client_name' => array('table' => 'entity_client', 'field' => 'name', 'label' => 'Client Name',
                'type' => 'text', 'acl' => 'read', 'dependency' => 'client_entityObj', 'form' => array('type' => 'none')
            ),
            'bookingPaxObj' => array('label' => 'Booking Pax', 'type' => 'object', 'acl' => 'read',
                'typeDetail' => array(
                    'table' => 'bookingPax', 'bundlePrefix' => 'bck', 'bundle' => 'booking', 'type' => 'none'),
                'form' => array('type' => 'fake')
            ),
            'clientIsPax' => array('label' => 'Client is Pax', 'type' => 'none', 'acl' => 'edit',
                'isRequired' => false, 'default' => true,
                'form' => array('type' => 'boolean', 'isMapped' => false)
            ),
            'startDate' => array('label' => 'Start Date', 'type' => 'date', 'acl' => 'read', 'isDefault' => true),
            'endDate' => array('label' => 'End Date', 'type' => 'date', 'acl' => 'read', 'isDefault' => true),
            'placeObj' => array('label' => 'From', 'type' => 'object', 'acl' => 'read',
                'typeDetail' => array(
                    'table' => 'place', 'bundlePrefix' => 'bck', 'bundle' => 'common', 'type' => 'none')
            ),
            'place_name' => array('table' => 'place', 'field' => $name_lang, 'label' => 'From (Name)', 'type' => 'text',
                'acl' => 'read', 'dependency' => 'placeObj', 'form' => array('type' => 'none'), 'isDefault' => true,
                'normalizer' => array('method' => 'getName')
            ),
            'place_iata' => array('table' => 'place', 'field' => 'iataCode', 'label' => 'From', 'type' => 'text',
                'acl' => 'read', 'dependency' => 'placeObj', 'form' => array('type' => 'none')),
            'placeToObj' => array('label' => 'To', 'type' => 'object', 'acl' => 'read',
                'typeDetail' => array(
                    'table' => 'place', 'tableAlias' => 'place_to', 'bundlePrefix' => 'bck', 'bundle' => 'common', 'type' => 'none')
            ),
            'placeTo_name' => array('table' => 'place_to', 'field' => $name_lang, 'label' => 'To (Name)', 'type' => 'text',
                'acl' => 'read', 'dependency' => 'placeToObj', 'form' => array('type' => 'none'), 'isDefault' => true),
            'placeTo_iata' => array('table' => 'place_to', 'field' => 'iataCode', 'label' => 'To', 'type' => 'text',
                'acl' => 'read', 'dependency' => 'placeToObj', 'form' => array('type' => 'none')),
            'invoiceStatus' => array('label' => 'Invoiced', 'type' => 'enum', 'acl' => 'read', 'isDefault' => true,
                'typeDetail' => array(
                    'type' => 'status', 'choices' => array(
                        'value' => array(
                            'No' => 'NO', 'Partial' => 'PARTIAL', 'Yes' => 'YES'
                        )
                    )
                ),
                'form' => array('type' => 'select')
            ),
            'confirmationStatus' => array('label' => 'Confirmed', 'type' => 'enum', 'acl' => 'read', 'isDefault' => true,
                'typeDetail' => array(
                    'type' => 'status', 'choices' => array(
                        'value' => array(
                            'No' => 'NO', 'Partial' => 'PARTIAL', 'Yes' => 'YES'
                        )
                    )),
                'form' => array('type' => 'select')
            )
        ));

        return self::$metadata = HelperService::pushIntoArray($parentMetadata, $localMetadata, 'placeTo_iata', true);
    }

    /**
     * Set invoice status to booking
     * @param $bookingObj
     * @return mixeds
     */
    public function setInvoiceStatus($bookingObj)
    {
        $localTable = $this->getLocalTable();

        $options = array(
            'fields' => array(
                '(' . $localTable . '.subTotalSell + ' . $localTable . '.totalVatSell) AS total',
                // Get the total invoiced.
                // Its used total (value without VAT + VAT, because is more exactly to get original values)
                "SUM(CASE WHEN (documentType.operation IS NOT NULL) THEN (CASE WHEN (documentType.operation = 'DEBIT') "
                . "THEN (documentDetail.subTotal + documentDetail.totalVat) "
                . "ELSE ((documentDetail.subTotal + documentDetail.totalVat) * -1) END) ELSE (0) END) AS totalInvoiced"
            ),
            'criteria' => array(
                array(
                    'field' => 'id',
                    'expr' => 'eq',
                    'value' => $bookingObj->getId()
                )
            )
        );

        // Get query builder
        $qb = $this->queryBuilder($options, false);

        // Get booking service
        $qb->innerJoin('Bck\BookingBundle\Entity\BookingService',
            'bookingService',
            'WITH',
            'bookingService.bookingObj = ' . $localTable . '.id'
        );

        // Get booking service price
        $qb->innerJoin('Bck\BookingBundle\Entity\BookingServicePrice',
            'bookingServicePrice',
            'WITH',
            'bookingServicePrice.bookingServiceObj = bookingService.id'
        );

        // Get document detail
        $qb->innerJoin('Bck\AccountingBundle\Entity\ClientDocumentInvoiceDetail',
            'documentDetail',
            'WITH',
            'documentDetail.bookingServicePriceObj = bookingServicePrice.id'
        );

        // Get document
        $qb->innerJoin('documentDetail.clientDocumentObj',
            'document',
            'WITH',
            'document.isEnabled = 1'
        );

        // Get document type
        $qb->innerJoin('document.clientDocumentTypeObj',
            'documentType',
            'WITH',
            "documentType.type = 'INVOICE'" // Only invoice documents are used
        );

        $result = $this->executeQueryBuilder($qb);
        $result = reset($result);

        switch ($result['totalInvoiced']) {
            case 0:
                $bookingObj->setInvoiceStatus("NO");
                break;
            case $result['total']:
                $bookingObj->setInvoiceStatus("YES");
                break;
            default:
                $bookingObj->setInvoiceStatus("PARTIAL");
        }

        return $bookingObj;
    }

    /**
     * Set totals to booking (from booking service objects)
     * @param $bookingObj
     * @return mixeds
     */
    public function setTotals($bookingObj)
    {
        $localTable = $this->getLocalTable();

        // In case of grouped service, the sell values are not sum, because this values are sum in the grouper service
        $options = array(
            'fields' => array(
                "SUM(bookingService.subTotalCost) AS subTotalCost",
                "SUM(CASE WHEN (bookingService.grouperBookingServiceObj IS NULL) THEN (bookingService.subTotalSell) ELSE (0) END) AS subTotalSell",
                "SUM(bookingService.totalVatCost) AS totalVatCost",
                "SUM(CASE WHEN (bookingService.grouperBookingServiceObj IS NULL) THEN (bookingService.totalVatSell) ELSE (0) END) AS totalVatSell"
            ),
            'criteria' => array(
                array(
                    'field' => 'id',
                    'expr' => 'eq',
                    'value' => $bookingObj->getId()
                )
            )
        );

        // Get query builder
        $qb = $this->queryBuilder($options, false);

        // Get booking service
        $qb->innerJoin('Bck\BookingBundle\Entity\BookingService',
            'bookingService',
            'WITH',
            '(bookingService.bookingObj = ' . $localTable . '.id) AND (bookingService.isEnabled = 1)'
        );

        $result = $this->executeQueryBuilder($qb);
        $result = reset($result);

        $bookingObj->setSubTotalCost($result['subTotalCost']);
        $bookingObj->setSubTotalSell($result['subTotalSell']);
        $bookingObj->setTotalVatCost($result['totalVatCost']);
        $bookingObj->setTotalVatSell($result['totalVatSell']);

        return $bookingObj;
    }

    /**
     * Set confirmation status (from booking service objects)
     * @param $bookingObj
     * @return mixeds
     */
    public function setConfirmationStatus($bookingObj)
    {
        $localTable = $this->getLocalTable();

        $options = array(
            'fields' => array(
                "DISTINCT(bookingService.confirmationStatus) AS confirmationStatus"
            ),
            'criteria' => array(
                array(
                    'field' => 'id',
                    'expr' => 'eq',
                    'value' => $bookingObj->getId()
                )
            )
        );

        // Get query builder
        $qb = $this->queryBuilder($options, false);

        // Get booking service
        $qb->innerJoin('Bck\BookingBundle\Entity\BookingService',
            'bookingService',
            'WITH',
            '(bookingService.bookingObj = ' . $localTable . '.id) AND (bookingService.isEnabled = 1)'
        );

        $confirmationStatus = $this->executeQueryBuilder($qb);
        $confirmationStatus = array_column($confirmationStatus, 'confirmationStatus', 'confirmationStatus');

        switch (count($confirmationStatus)) {
            case 0:
                $bookingObj->setConfirmationStatus("YES");
                break;
            case 1:
                $bookingObj->setConfirmationStatus(reset($confirmationStatus));
                break;
            default:
                $bookingObj->setConfirmationStatus("PARTIAL");
        }

        return $bookingObj;
    }

    /**
     * Set dates (from booking service objects)
     * @param $bookingObj
     * @return mixed
     */
    public function setDates($bookingObj)
    {
        $localTable = $this->getLocalTable();

        $options = array(
            'fields' => array(
                "MIN(bookingService.startDate) AS startDate",
                "Max(bookingService.endDate) AS endDate",
            ),
            'criteria' => array(
                array(
                    'field' => 'id',
                    'expr' => 'eq',
                    'value' => $bookingObj->getId()
                )
            )
        );

        // Get query builder
        $qb = $this->queryBuilder($options, false);

        // Get booking service
        $qb->innerJoin('Bck\BookingBundle\Entity\BookingService',
            'bookingService',
            'WITH',
            '(bookingService.bookingObj = ' . $localTable . '.id) AND (bookingService.isEnabled = 1)' // Booking criteria is used here
        );

        $dates = $this->executeQueryBuilder($qb);
        $dates = reset($dates); // First (and unique) array element

        $bookingObj->setStartDate(new \DateTime($dates['startDate']))
            ->setEndDate(new \DateTime($dates['endDate']));

        return $bookingObj;
    }
}