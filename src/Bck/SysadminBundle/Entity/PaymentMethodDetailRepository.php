<?php

namespace Bck\SysadminBundle\Entity;

use AppBundle\Entity\BaseEntityRepository;

/**
 * PaymentMethodDetailRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaymentMethodDetailRepository extends BaseEntityRepository
{
    static protected $metadata = null;

    /**
     * Get field metadata
     * @param $field
     * @param $attribute
     * @param $metadata (uses this metadata instead of local metadata)
     * @param $context ('view'|'form'|'none')
     * @return null
     */
    static public function getFieldMetadata($field, $attribute, $metadata = null, $context = 'none')
    {
        if (!$metadata) {
            $metadata = self::getMetadata();
        }
        return self::getLocalFieldMetadata($field, $attribute, $metadata, $context);
    }

    /**
     * Get local metadata (it needs to be implemented by children to get static variable with local metadata from parent)
     * @return mixed
     */
    protected function getLocalMetadata()
    {
        return $this->getMetadata();
    }

    /**
     * Get entity metadata
     * @return mixed
     */
    static function getMetadata()
    {
        // Process metadata only once
        if (self::$metadata) {
            return self::$metadata;
        }
        return self::$metadata = self::processMetadata(array(
            'id' => array('label' => 'Id', 'type' => 'number', 'acl' => 'read'),
            'appPaymentMethodObj' => array('label' => 'Payment Method', 'type' => 'object', 'acl' => 'read', 'typeDetail' => array(
                'table' => 'app_paymentMethod', 'bundlePrefix' => 'bck', 'bundle' => 'sysadmin', 'field' => 'id', 'type' => 'none')),
            'field' => array('label' => 'Field', 'type' => 'text', 'acl' => 'edit'),
            'type' => array('label' => 'Type', 'type' => 'enum', 'acl' => 'edit',
                'typeDetail' => array(
                    'type' => 'text', 'choices' => array(
                        'value' => array(
                            'Text' => 'TEXT', 'Enum' => 'ENUM'
                        )
                    )),
                'form' => array('type' => 'select')
            ),
            'options' => array('label' => 'Options (json array)', 'type' => 'text', 'acl' => 'edit',
                'placeholder' => '{"id_1": "label_1", "id_n": "label_n"}'),
            'label' => array('label' => 'Label', 'type' => 'text', 'acl' => 'edit'),
            'defaultValue' => array('label' => 'Default Value', 'type' => 'text', 'acl' => 'edit'),
            'insertTime' => array('label' => 'Insert Time', 'type' => 'datetime', 'acl' => 'read', 'form' => array('type' => 'none')),
            'insertUser' => array('label' => 'Insert User', 'type' => 'text', 'acl' => 'read', 'form' => array('type' => 'none')),
            'isEnabled' => array('label' => 'Enabled', 'type' => 'boolean', 'acl' => 'edit', 'default' => true,
                'view' => array('keepOriginalNormalizer' => true)
            )
        ));
    }

    /**
     * Get all objects joined with icon
     * @param $options (array with queryBuilder options format)
     * @return mixed
     */
    public function getAllJoinWithIcon($options)
    {
        $qb = $this->queryBuilder($options, false);

        // Join with module
        if (in_array("appModuleObj", $options['fields'])) {
            // Join with App Icon (to get module icon)
            $qb->leftJoin('Bck\SysadminBundle\Entity\Icon',
                'app_icon',
                'WITH',
                ('app_icon.id = app_module.appIconObj')
            );
        }

        return $this->executeQueryBuilder($qb);
    }
}