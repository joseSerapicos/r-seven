<?php

namespace Bck\AccountingBundle\Entity;

use AppBundle\Entity\BaseEntityRepository;
use AppBundle\Service\HelperService;

/**
 * BaseDocumentReceiptSettlementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
abstract class BaseDocumentReceiptSettlementRepository extends BaseEntityRepository
{
    /**
     * Get Local Entity Context.
     * @return mixed (lowerCamelCase)
     */
    abstract protected function getLocalEntityContext();

    /**
     * Get entity context (it needs to be implemented by children to get the correct context <client, supplier, entity>)
     * @param $isUpperCase
     * @return mixed (lowerCamelCase)
     */
    public function getEntityContext($isUpperCase = false) {
        return ($isUpperCase ? ucfirst($this->getLocalEntityContext()) : $this->getLocalEntityContext());
    }

    /**
     * Get local metadata (it needs to be implemented by children to get static variable with local metadata from parent)
     * @return mixed
     */
    protected function getLocalMetadata()
    {
        return $this->getMetadata();
    }

    /**
     * Get entity metadata
     * @return mixed
     */
    static function getMetadata()
    {
        return self::processMetadata(array(
            'id' => array('label' => 'Id', 'type' => 'none', 'acl' => 'read'),
            'value' => array('label' => 'Value', 'type' => 'number', 'acl' => 'edit'),
            'insertTime' => array('label' => 'Insert Time', 'type' => 'datetime', 'acl' => 'read', 'form' => array('type' => 'none')),
            'insertUser' => array('label' => 'Insert User', 'type' => 'text', 'acl' => 'read', 'form' => array('type' => 'none')),
            'isEnabled' => array('label' => 'Enabled', 'type' => 'boolean', 'acl' => 'edit', 'default' => true,
                'view' => array('keepOriginalNormalizer' => true)
            )
        ));
    }

    /**
     * Get document remain settlement
     * @param $documentObject
     * @return mixed
     */
    public function getDocumentRemainSettlement($documentObject)
    {
        // Validate context
        $entityContext = $this->getEntityContext();
        $entityContextUC = $this->getEntityContext(true);

        // Entities names
        $localTable = $this->getLocalTable();

        $options = array(
            'fields' => array(
                "SUM(" . $localTable . ".value) AS totalSettlement"
            ),
            'criteria' => array (
                array(
                    'field' => ('settlement' . $entityContextUC . 'DocumentObj'),
                    'expr' => 'eq',
                    'value' => $documentObject->getId()
                )
            )
        );

        // Get query builder
        $qb = $this->queryBuilder($options, false);

        // Get document
        $qb->innerJoin($localTable.'.'.$entityContext.'DocumentObj',
            'document',
            'WITH',
            'document.isEnabled = 1'
        );

        $totalSettlement = $this->executeQueryBuilder($qb);
        $totalSettlement = reset($totalSettlement); // First element of array

        return ($documentObject->getTotal() - $totalSettlement['totalSettlement']);
    }

    /**
     * Set document remain settlement
     * @param $documentObject
     * @return mixed
     */
    public function setDocumentRemainSettlement($documentObject)
    {
        $documentObject->setRemainSettlement($this->getDocumentRemainSettlement($documentObject));
        return $documentObject;
    }

    /**
     * Get documents id by booking
     * @param $bookingDocumentsIdArr (array with document id of booking)
     * @return mixed
     */
    public function getDocumentsIdByBooking($bookingDocumentsIdArr)
    {
        if (!is_array($bookingDocumentsIdArr) || (count($bookingDocumentsIdArr) < 1)) {
            return array();
        }

        $entityContext = $this->getEntityContext();
        $entityContextUC = $this->getEntityContext(true);
        $localTable = $this->getLocalTable();

        $options = array(
            'fields' => array(
                'IDENTITY('.$localTable.'.'.$entityContext.'DocumentObj) AS document_id'
            ),
            'criteria' => array(
                array(
                    'field' => 'settlement'.$entityContextUC.'DocumentObj',
                    'expr' => 'IN',
                    'value' => $bookingDocumentsIdArr
                )
            )
        );

        // Get query builder
        $qb = $this->queryBuilder($options, false);

        // Avoid repeated entries caused by joins
        $qb->distinct('document_id');

        return array_column($this->executeQueryBuilder($qb), 'document_id');
    }
}