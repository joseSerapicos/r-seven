<?php

namespace Bck\AdminBundle\Entity;

use AppBundle\Entity\BaseEntityRepository;

/**
 * ModuleMenuRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ModuleMenuRepository extends BaseEntityRepository
{
    static protected $metadata = null;

    /**
     * Get field metadata
     * @param $field
     * @param $attribute
     * @param $metadata (uses this metadata instead of local metadata)
     * @param $context ('view'|'form'|'none')
     * @return null
     */
    static public function getFieldMetadata($field, $attribute, $metadata = null, $context = 'none')
    {
        if (!$metadata) {
            $metadata = self::getMetadata();
        }
        return self::getLocalFieldMetadata($field, $attribute, $metadata, $context);
    }

    /**
     * Get local metadata (it needs to be implemented by children to get static variable with local metadata from parent)
     * @return mixed
     */
    protected function getLocalMetadata()
    {
        return $this->getMetadata();
    }

    /**
     * Get entity metadata
     * @return mixed
     */
    static function getMetadata()
    {
        // Process metadata only once
        if (self::$metadata) {
            return self::$metadata;
        }
        return self::$metadata = self::processMetadata(array(
            'id' => array('label' => 'Id', 'type' => 'number', 'acl' => 'read'),
            'moduleObj' => array('label' => 'Module', 'type' => 'object', 'acl' => 'read', 'typeDetail' => array(
                'table' => 'module', 'bundlePrefix' => 'bck', 'bundle' => 'admin', 'type' => 'none')),
            'appModuleMenuObj' => array('label' => 'App Module Menu', 'type' => 'object', 'acl' => 'edit',
                'typeDetail' => array(
                    'table' => 'app_moduleMenu', 'field' => 'id', 'bundlePrefix' => 'bck', 'bundle' => 'sysadmin', 'type' => 'none',
                    'choices' => array('hasSelfReference' => true)
                ),
                'form' => array('type' => 'radio')
            ),
            'name' => array('label' => 'Name', 'type' => 'text', 'acl' => 'edit'),
            'description' => array('label' => 'Description', 'type' => 'text', 'acl' => 'read', 'table' => 'app_moduleMenu', 'dependency' => 'appModuleMenuObj'),
            'priority' => array('label' => 'Priority', 'type' => 'number', 'acl' => 'edit'),
            'insertTime' => array('label' => 'Insert Time', 'type' => 'datetime', 'acl' => 'read', 'form' => array('type' => 'none')),
            'insertUser' => array('label' => 'Insert User', 'type' => 'text', 'acl' => 'read', 'form' => array('type' => 'none')),
            'isEnabled' => array('label' => 'Enabled', 'type' => 'boolean', 'acl' => 'edit', 'default' => true,
                'view' => array('keepOriginalNormalizer' => true)
            )
        ));
    }

    /**
     * Get all objects joined with UserGroupAclMenu
     * @param $isAdmin
     * @param $userGroupAcl_id
     * @param $loggedUserId
     * @param $loggedUserStore
     * @return mixed
     */
    public function getAllJoinWithUserGroupAclMenu($isAdmin, $userGroupAcl_id, $loggedUserId, $loggedUserStore)
    {
        // Fields
        $options['fields'] = array('id', 'name', 'moduleObj', 'module.id AS module_id', 'module.name AS module_name',
            'app_icon.name AS module_icon', 'userGroupAclMenu.acl AS acl');

        // Criteria
        $options['criteria'] = array(
            array('field' => 'isEnabled', 'expr' => 'eq', 'value' => 1),
            array('field' => 'module.isEnabled', 'expr' => 'eq', 'value' => 1)
        );

        // Order by
        $options['orderBy'] = array(
            array('field' => 'module.priority', 'value' => 'ASC'),
            array('field' => 'priority', 'value' => 'ASC')
        );

        $qb = $this->queryBuilder($options, false);

        // Retrieve only menus that logged user has access
        if (!$isAdmin)
        {
            // Get groups of logged user
            $qb->innerJoin('Bck\AdminBundle\Entity\UserGroupAclUser',
                'userGroupAclUser_loggedUser',
                'WITH',
                ('userGroupAclUser_loggedUser.userObj = ' . $loggedUserId)
            );
            // Filter groups of logged user by store of logged user
            $qb->innerJoin('Bck\AdminBundle\Entity\UserGroupAcl',
                'userGroupAcl_loggedUser',
                'WITH',
                ('userGroupAcl_loggedUser.id = userGroupAclUser_loggedUser.userGroupAclObj AND userGroupAcl_loggedUser.storeObj = ' . $loggedUserStore . ' AND userGroupAcl_loggedUser.isEnabled = 1')
            );
            // Filter menus by ACL of groups of logged user
            $qb->innerJoin('Bck\AdminBundle\Entity\UserGroupAclMenu',
                'userGroupAclMenu_loggedUser',
                'WITH',
                ('userGroupAclMenu_loggedUser.userGroupAclObj = userGroupAcl_loggedUser.id AND userGroupAclMenu_loggedUser.moduleMenuObj = moduleMenu.id AND (userGroupAclMenu_loggedUser.acl > 0)')
            );
        }

        // Join with UserGroupAclMenu
        $qb->leftJoin('Bck\AdminBundle\Entity\UserGroupAclMenu',
            'userGroupAclMenu',
            'WITH',
            ('userGroupAclMenu.userGroupAclObj = ' . $userGroupAcl_id . ' AND userGroupAclMenu.moduleMenuObj = moduleMenu.id')
        );

        // Join with App Menu (to exclude menus that requires admin role, in this case doesn't make sense to set ACL)
        $qb->innerJoin('Bck\SysadminBundle\Entity\ModuleMenu',
            'app_moduleMenu',
            'WITH',
            ("app_moduleMenu.id = moduleMenu.appModuleMenuObj AND app_moduleMenu.requiresAdminRole <> 1")
        );

        // Join with App Module (to get module icon)
        $qb->innerJoin('Bck\SysadminBundle\Entity\Module',
            'app_module',
            'WITH',
            ("app_module.id = module.appModuleObj")
        );

        // Join with App Icon (to get module icon)
        $qb->leftJoin('Bck\SysadminBundle\Entity\Icon',
            'app_icon',
            'WITH',
            ('app_icon.id = app_module.appIconObj')
        );

        // Avoid repeated entries caused by joins
        $qb->distinct('id');

        return $this->executeQueryBuilder($qb);
    }

    /**
     * Get all objects joined with UserGroupAclUser
     * @param $options (array with queryBuilder options format)
     * @param $isAdmin
     * @param $loggedUserId
     * @param $loggedUserStore
     * @return mixed
     */
    public function getAllJoinWithUserGroupAclUser($options, $isAdmin, $loggedUserId, $loggedUserStore)
    {
        // If admin, set max ACL
        if ($isAdmin) {
            // Acl
            if (($key = array_search("userGroupAclMenu.acl AS acl", $options['fields'])) !== false) {
                $options['fields'][$key] = "8 AS acl";
            } elseif (($key = array_search("userGroupAclMenu.acl", $options['fields'])) !== false) {
                $options['fields'][$key] = "8 AS acl";
            } elseif (($key = array_search("acl", $options['fields'])) !== false) {
                $options['fields'][$key] = "8 AS acl";
            }
            // App module menu
            $options['fields'][] = 'appModuleMenuObj';
        }

        $qb = $this->queryBuilder($options, false);

        // Retrieve only menus that logged user has access
        if (!$isAdmin)
        {
            // Get groups of logged user
            $qb->innerJoin('Bck\AdminBundle\Entity\UserGroupAclUser',
                'userGroupAclUser',
                'WITH',
                ('userGroupAclUser.userObj = ' . $loggedUserId)
            );
            // Filter groups of logged user by store of logged user
            $qb->innerJoin('Bck\AdminBundle\Entity\UserGroupAcl',
                'userGroupAcl',
                'WITH',
                ('userGroupAcl.id = userGroupAclUser.userGroupAclObj AND userGroupAcl.storeObj = ' . $loggedUserStore . ' AND userGroupAcl.isEnabled = 1')
            );
            // Filter menus by ACL of groups of logged user
            $qb->innerJoin('Bck\AdminBundle\Entity\UserGroupAclMenu',
                'userGroupAclMenu',
                'WITH',
                ('userGroupAclMenu.userGroupAclObj = userGroupAcl.id AND userGroupAclMenu.moduleMenuObj = moduleMenu.id AND (userGroupAclMenu.acl > 0)')
            );
            // Select Max(acl) for max permission
            $qb->expr()->max('userGroupAclMenu.acl');
            // Join with App Menu (to exclude menus that requires admin role)
            $qb->innerJoin('Bck\SysadminBundle\Entity\ModuleMenu',
                'app_moduleMenu',
                'WITH',
                ("app_moduleMenu.id = moduleMenu.appModuleMenuObj AND app_moduleMenu.requiresAdminRole <> 1")
            );
        }

        // Join with module
        if (in_array("moduleObj", $options['fields'])) {
            // Join with App Module (to get module icon)
            $qb->innerJoin('Bck\SysadminBundle\Entity\Module',
                'app_module',
                'WITH',
                ("app_module.id = module.appModuleObj")
            );

            // Join with App Icon (to get module icon)
            $qb->leftJoin('Bck\SysadminBundle\Entity\Icon',
                'app_icon',
                'WITH',
                ('app_icon.id = app_module.appIconObj')
            );
        }

        // Avoid repeated entries caused by joins
        $qb->distinct('id');

        return $this->executeQueryBuilder($qb);
    }

    /**
     * Get choices for booking settings (booking types, each menu represent a different type).
     * This search assumes that the booking module name is "Booking".
     * @param bool $hasExecute
     * @param string $executeMethod
     * @param $options (array with queryBuilder options format)
     * @return mixed
     */
    public function getChoicesForBookingSetting($hasExecute = true, $executeMethod = 'getResult', $options = array())
    {
        $table = $this->getLocalTable();

        $options = array_merge(
            $options,
            array('criteria' => array(
                array(
                    'field' => 'isEnabled',
                    'expr' => 'eq',
                    'value' => true
                )
            ))
        );

        $qb = $this->queryBuilder($options, false);

        // Filer menus by module named "Booking" in app database

        // Join with module
        $qb->innerJoin($table.'.moduleObj',
            'module'
        );

        // Join with App Module
        $qb->innerJoin('module.appModuleObj',
            'app_module',
            'WITH',
            ("app_module.name = 'Booking'")
        );

        // Join with App Module
        /*$qb->innerJoin('Bck\SysadminBundle\Entity\Module',
            'app_module',
            'WITH',
            ("app_module.id = module.appModuleObj AND app_module.name = 'Booking'")
        );*/

        if ($hasExecute) {
            $result = $this->executeQueryBuilder($qb, $executeMethod);

            if (!is_array($result)) {
                $result = array($result);
            }

            return $result;
        }

        return $qb;
    }
}