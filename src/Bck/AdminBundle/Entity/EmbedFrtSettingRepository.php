<?php

namespace Bck\AdminBundle\Entity;

use AppBundle\Entity\BaseEntityRepository;

/**
 * EmbedFrtSettingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EmbedFrtSettingRepository extends BaseEntityRepository
{
    static protected $metadata = null;

    /**
     * Get field metadata
     * @param $field
     * @param $attribute
     * @param $metadata (uses this metadata instead of local metadata)
     * @param $context ('view'|'form'|'none')
     * @return null
     */
    static public function getFieldMetadata($field, $attribute, $metadata = null, $context = 'none')
    {
        if (!$metadata) {
            $metadata = self::getMetadata();
        }
        return self::getLocalFieldMetadata($field, $attribute, $metadata, $context);
    }

    /**
     * Get local metadata (it needs to be implemented by children to get static variable with local metadata from parent)
     * @return mixed
     */
    protected function getLocalMetadata()
    {
        return $this->getMetadata();
    }

    /**
     * Get entity metadata
     * @return mixed
     */
    static function getMetadata()
    {
        // Process metadata only once
        if (self::$metadata) {
            return self::$metadata;
        }
        return self::$metadata = self::processMetadata(array(
            'id' => array('label' => 'Id', 'type' => 'number', 'acl' => 'read'),
            'storeObj' => array('label' => 'Store', 'type' => 'object', 'acl' => 'edit', 'typeDetail' => array(
                'table' => 'store', 'bundlePrefix' => 'bck', 'bundle' => 'admin', 'type' => 'none'), 'isRequired' => false,
                'form' => array('type' => 'select')
            ),
            'store_name' => array('table' => 'store', 'field' => 'name', 'label' => 'Store', 'type' => 'text',
                'acl' => 'read', 'dependency' => 'storeObj', 'form' => array('type' => 'none')),
            'slogan' => array('label' => 'Slogan', 'type' => 'text', 'acl' => 'edit'),
            'baseUrl' => array('label' => 'Base Url', 'type' => 'text', 'acl' => 'edit'),
            'hasHeader' => array('label' => 'Has Header', 'type' => 'boolean', 'acl' => 'edit', 'default' => false),
            'hasFooter' => array('label' => 'Has Footer', 'type' => 'boolean', 'acl' => 'edit', 'default' => false),
            'headerBgColor' => array('label' => 'Header Background Color', 'type' => 'none', 'acl' => 'edit', 'default' => '#007bff',
                'form' => array('type' => 'color')),
            'bgColor' => array('label' => 'Background Color', 'type' => 'none', 'acl' => 'edit', 'default' => '#FFFFFF',
                'form' => array('type' => 'color')),
            'headerTxtColor' => array('label' => 'Header Text Color', 'type' => 'none', 'acl' => 'edit', 'default' => '#FFFFFF',
                'form' => array('type' => 'color')),
            'txtColor' => array('label' => 'Text Color', 'type' => 'none', 'acl' => 'edit', 'default' => '#404447',
                'form' => array('type' => 'color')),
            'insertTime' => array('label' => 'Insert Time', 'type' => 'datetime', 'acl' => 'read', 'form' => array('type' => 'none')),
            'insertUser' => array('label' => 'Insert User', 'type' => 'text', 'acl' => 'read', 'form' => array('type' => 'none')),
            'isEnabled' => array('label' => 'Enabled', 'type' => 'boolean', 'acl' => 'edit', 'default' => true,
                'view' => array('keepOriginalNormalizer' => true)
            )
        ));
    }

    /**
     * Get base url by store
     * @param $store
     * @param $field
     * @return mixed
     */
    public function getByStore($store = null, $field = null)
    {
        // Get a specific field
        if ($field) {
            $options = array(
                'fields' => array($field),
                'criteria' => array(
                    array('field' => 'isEnabled', 'expr' => 'eq', 'value' => 1),
                    ($store ?
                        array('field' => 'storeObj', 'expr' => 'eq', 'value' => $store) :
                        array('field' => 'storeObj', 'expr' => 'isNull', 'value' => null)
                    )
                )
            );

            $result = $this->queryBuilder($options);

            if (is_array($result) && (count($result)> 0)) {
                return reset($result)[$field];
            }
        }
        // Get the whole object
        else {
            $result = $this->findOneByStoreObj($store);

            if ($result) {
                return $result;
            }
        }

        // If settings for specific store is not defined, try to get generic settings (store = null)
        if ($store !== null) {
            return $this->getByStore(null, $field);
        }

        return null;
    }
}