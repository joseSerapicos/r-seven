<?php

namespace UserBundle\Entity;

use AppBundle\Entity\BaseEntityRepository;

/**
 * UserCalendarRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserCalendarRepository extends BaseEntityRepository {
    static protected $metadata = null;

    /**
     * Get field metadata
     * @param $field
     * @param $attribute
     * @param $metadata (uses this metadata instead of local metadata)
     * @param $context ('view'|'form'|'none')
     * @return null
     */
    static public function getFieldMetadata($field, $attribute, $metadata = null, $context = 'none')
    {
        if (!$metadata) {
            $metadata = self::getMetadata();
        }
        return self::getLocalFieldMetadata($field, $attribute, $metadata, $context);
    }

    /**
     * Get local metadata (it needs to be implemented by children to get static variable with local metadata from parent)
     * @return mixed
     */
    protected function getLocalMetadata()
    {
        return $this->getMetadata();
    }

    /**
     * Get entity metadata
     * @return mixed
     */
    static function getMetadata()
    {
        // Process metadata only once
        if (self::$metadata) {
            return self::$metadata;
        }
        return self::$metadata = self::processMetadata(array(
            'id' => array('label' => 'Id', 'type' => 'number', 'acl' => 'read'),
            'userObj' => array('label' => 'User', 'type' => 'object', 'acl' => 'read', 'typeDetail' => array(
                'table' => 'user', 'bundle' => 'admin', 'type' => 'none')),
            'name' => array('label' => 'Name', 'type' => 'text', 'acl' => 'edit'),
            'description' => array('label' => 'Description', 'type' => 'text', 'acl' => 'edit'),
            'startTime' => array('label' => 'Start Time', 'type' => 'datetime', 'acl' => 'edit', 'typeDetail' => array(
                'expr' => 'max', 'exprField' => 'endTime'
            )),
            'endTime' => array('label' => 'End Time', 'type' => 'datetime', 'acl' => 'edit', 'typeDetail' => array(
                'expr' => 'min', 'exprField' => 'startTime'
            )),
            'color' => array('label' => 'Color', 'type' => 'color', 'acl' => 'edit', 'default' => '#ffffff'),
            'privacy' => array('label' => 'Privacy', 'type' => 'enum', 'acl' => 'edit',
                'typeDetail' => array(
                    'type' => 'text', 'choices' => array(
                        'value' => array(
                            'Private' => 'PRIVATE', 'Shared' => 'SHARED'
                        )
                    )),
                'form' => array('type' => 'radio')
            ),
            'shareToType' => array('label' => 'Share With', 'type' => 'enum', 'acl' => 'edit', 'isRequired' => false,
                'typeDetail' => array(
                    'type' => 'text', 'choices' => array(
                        'value' => array(
                            'All' => 'ALL', 'User' => 'USER', 'Group' => 'USER_GROUP', 'Store' => 'STORE'
                        )
                    )),
                'form' => array('type' => 'select')
            ),
            'shareUserObj' => array('label' => 'User to Share', 'type' => 'object', 'acl' => 'edit', 'typeDetail' => array(
                'table' => 'user', 'bundle' => 'admin', 'type' => 'select'), 'isRequired' => false),
            'userGroupObj' => array('label' => 'Group to Share', 'type' => 'object', 'acl' => 'edit', 'typeDetail' => array(
                'table' => 'userGroup', 'bundle' => 'user', 'type' => 'select'), 'isRequired' => false),
            'storeObj' => array('label' => 'Store to Share', 'type' => 'object', 'acl' => 'edit', 'typeDetail' => array(
                'table' => 'store', 'bundle' => 'admin', 'type' => 'select'), 'isRequired' => false),
            'insertTime' => array('label' => 'Insert Time', 'type' => 'datetime', 'acl' => 'read'),
            'insertUser' => array('label' => 'Insert User', 'type' => 'text', 'acl' => 'read'),
            'isEnabled' => array('label' => 'Enabled', 'type' => 'boolean', 'acl' => 'edit', 'default' => true,
                'view' => array('keepOriginalNormalizer' => true)
            )
        ));
    }

    /**
     * Get objects (regular method to retrieve objects correctly).
     * @param $options (array with queryBuilder options format)
     * @param $isAdmin
     * @param $loggedUserId
     * @return mixed
     */
    public function getLocalObjects($options, $isAdmin, $loggedUserId)
    {
        $qb = $this->queryBuilder($options, false);

        // Add field allowEdit (only allowed if logged user is the owner)
        $qb->addSelect("(CASE WHEN (userCalendar.userObj = " . $loggedUserId . ") THEN true ELSE false END) AS allowEdit");

        if (!$isAdmin) { // Admin has access all stores
            // Filter by store
            /* Already defined in $options
            $qb->leftJoin('AdminBundle\Entity\Store',
                'store'
            );*/
            $qb->leftJoin('AdminBundle\Entity\UserGroupAcl', // Groups Acl of store
                'userGroupAcl',
                'WITH',
                ('userGroupAcl.isEnabled = 1 AND store.isEnabled = 1 AND userGroupAcl.storeObj = store.id')
            );
            $qb->leftJoin('AdminBundle\Entity\UserGroupAclUser', // Groups Acl of logged user
                'userGroupAclUser',
                'WITH',
                ('userGroupAclUser.userGroupAclObj = userGroupAcl.id AND userGroupAclUser.userObj = ' . $loggedUserId)
            );
        }

        // Filter by group
        /* Already defined in $options
        $qb->leftJoin('UserBundle\Entity\UserGroup',
            'userGroup'
        );*/
        $qb->leftJoin('UserBundle\Entity\UserGroupUser', // Groups where logged user belongs
            'userGroupUser',
            'WITH',
            ('userGroupUser.userGroupObj = userGroup.id AND userGroup.isEnabled = 1 AND userGroupUser.userObj = ' . $loggedUserId)
        );

        // Filter all joins by logged user
        $qb->andWhere("(userCalendar.userObj = ".$loggedUserId.")" // Logged user is the owner
            ." OR (userCalendar.shareToType = 'ALL')" // Shared with all users
            ." OR (userCalendar.shareUserObj = ".$loggedUserId.")" // Shared with logged user
            // Shared with the store of logged user (or any store in case of admin)
            .($isAdmin ? " OR (store.id IS NOT NULL)" : " OR (userGroupAclUser.id IS NOT NULL)")
            ." OR (userGroupUser.id IS NOT NULL)" // Shared with the group to which logged user belongs
        );

        // Avoid repeated entries caused by joins
        $qb->distinct('id');

        return $this->executeQueryBuilder($qb);
    }
}