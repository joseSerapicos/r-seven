<?php

namespace ServicesBundle\Entity;

use AppBundle\Entity\BaseEntityRepository;

/**
 * ServiceBonusRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServiceBonusRepository extends BaseEntityRepository {
    static protected $metadata = null;

    /**
     * Get field metadata
     * @param $field
     * @param $attribute
     * @param $metadata (uses this metadata instead of local metadata)
     * @param $context ('view'|'form'|'none')
     * @return null
     */
    static public function getFieldMetadata($field, $attribute, $metadata = null, $context = 'none')
    {
        if (!$metadata) {
            $metadata = self::getMetadata();
        }
        return self::getLocalFieldMetadata($field, $attribute, $metadata, $context);
    }

    /**
     * Get local metadata (it needs to be implemented by children to get static variable with local metadata from parent)
     * @return mixed
     */
    protected function getLocalMetadata()
    {
        return $this->getMetadata();
    }

    /**
     * Get entity metadata
     * @return mixed
     */
    static function getMetadata()
    {
        // Process metadata only once
        if (self::$metadata) {
            return self::$metadata;
        }
        return self::$metadata = self::processMetadata(array(
            'id' => array('label' => 'Id', 'type' => 'number', 'acl' => 'read'),
            'serviceObj' => array('label' => 'Service', 'type' => 'object', 'acl' => 'read', 'typeDetail' => array(
                'table' => 'service', 'bundle' => 'services', 'type' => 'none')),
            'description' => array('label' => 'Description', 'type' => 'text', 'acl' => 'edit'),
            'rule' => array('label' => 'Rule', 'type' => 'enum', 'acl' => 'edit',
                'typeDetail' => array(
                    'type' => 'text', 'choices' => array(
                        'value' => array(
                            'Pax/Quantity' => 'PAX', 'Days' => 'DAYS'
                        )
                    )),
                'form' => array('type' => 'select')
            ),
            'ruleExpr' => array('label' => 'Rule Expression', 'type' => 'enum', 'acl' => 'edit',
                'typeDetail' => array(
                    'type' => 'text', 'choices' => array(
                        'value' => array(
                            '>' => '>', '<' => '<', '=' => '='
                        )
                    )),
                'form' => array('type' => 'select')
            ),
            'ruleValue' => array('label' => 'Rule Value', 'type' => 'number', 'acl' => 'edit'),
            // Field to control how to show the fake field "user_[...]"
            'isVatIncluded' => array('label' => 'VAT included', 'type' => 'none', 'acl' => 'edit', 'default' => true,
                'attr' => array('(change)' => 'onIsVatIncludedChange($event.target.checked)'),
                'form' => array('type' => 'boolean')
            ),
            'bonusServiceObj' => array('label' => 'Bonus Service', 'type' => 'object', 'acl' => 'edit',
                'typeDetail' => array(
                    'table' => 'service', 'tableAlias' => 'bonusService', 'fieldInView' => 'bonusService_name',
                    'bundle' => 'services', 'type' => 'none'
                ), 'form' => array('type' => 'html-select')
            ),
            // Fields to determine VAT percentage
            'bonusVatCodeObj' => array('table' => 'bonusService', 'field' => 'vatCodeObj', 'label' => 'VAT Code',
                'type' => 'object', 'acl' => 'read', 'dependency' => 'bonusServiceObj',
                'typeDetail' => array(
                    'table' => 'vatCode', 'tableAlias' => 'bonusVatCode', 'bundle' => 'accounting', 'type' => 'none'
                )
            ),
            'bonusVatCode_percentage' => array('table' => 'bonusVatCode', 'field' => 'percentage',
                'label' => '', 'type' => 'hidden', 'acl' => 'read', 'dependency' => 'bonusVatCodeObj',
                'form' => array('type' => 'none')
            ),
            'bonusService_name' => array('table' => 'bonusService', 'field' => 'name', 'label' => 'Bonus Service',
                'type' => 'text', 'acl' => 'read', 'dependency' => 'bonusServiceObj', 'form' => array('type' => 'none')),
            'bonusMethod' => array('label' => 'Bonus Method', 'type' => 'enum', 'acl' => 'edit',
                'attr' => array('(change)' => 'onBonusMethodChange($event.target.value)'),
                'typeDetail' => array(
                    'type' => 'text', 'choices' => array(
                        'value' => array(
                            'Percentage' => 'PERCENTAGE', 'Fixed' => 'FIXED'
                        )
                    )
                ),
                'form' => array('type' => 'select')
            ),
            // Original field is hidden
            'bonusValue' => array('label' => 'Bonus Value', 'type' => 'number', 'acl' => 'edit',
                'form' => array('type' => 'hidden')),
            // Fake field for user type the value (with or without VAT), because the original field is always without VAT
            'user_bonusValue' => array('label' => 'Bonus Value', 'type' => 'none', 'acl' => 'edit',
                'attr' => array(
                    '(input)' => 'onBonusValueEnterKey($event.target.value)',
                    '(focusout)' => 'onBonusValueEnterKey($event.target.value)'
                ),
                'form' => array('type' => 'number', 'isMapped' => false),
            ),
            'paxToApplyType' => array('label' => 'Pax/Quantity to Apply', 'type' => 'enum', 'acl' => 'edit',
                'typeDetail' => array(
                    'type' => 'text', 'choices' => array(
                        'value' => array(
                            'All' => 'ALL', 'Fixed' => 'FIXED', 'After' => 'AFTER'
                        )
                    )),
                'form' => array('type' => 'select')
            ),
            'paxToApplyValue' => array('label' => 'Pax to Apply Value', 'type' => 'number', 'acl' => 'edit'),
            'daysToApplyType' => array('label' => 'Days to Apply', 'type' => 'enum', 'acl' => 'edit',
                'typeDetail' => array(
                    'type' => 'text', 'choices' => array(
                        'value' => array(
                            'All' => 'ALL', 'Fixed' => 'FIXED', 'After' => 'AFTER'
                        )
                    )),
                'form' => array('type' => 'select')
            ),
            'daysToApplyValue' => array('label' => 'Days to Apply Value', 'type' => 'number', 'acl' => 'edit'),
            'startDate' => array('label' => 'Start Date', 'type' => 'date', 'acl' => 'edit', 'view' => array(
                'typeDetail' => array('rules' => array(array('expr' => 'max', 'value' => 'endDate')))
            )),
            'endDate' => array('label' => 'End Date', 'type' => 'date', 'acl' => 'edit', 'view' => array(
                'typeDetail' => array('rules' => array(array('expr' => 'min', 'value' => 'startDate')))
            )),
            'targetServiceObj' => array('label' => 'Target', 'type' => 'object', 'acl' => 'edit',
                'typeDetail' => array(
                    'table' => 'service', 'tableAlias' => 'service_target', 'bundle' => 'services', 'type' => 'none',
                    'fieldInView' => 'targetService_name', 'choices' => array('query' => 'getChoicesForServicePrice')),
                'isRequired' => false,
                'form' => array('type' => 'html-select')
            ),
            'targetService_name' => array('table' => 'service_target', 'field' => 'name', 'label' => 'Target',
                'type' => 'text', 'acl' => 'read', 'dependency' => 'targetServiceObj', 'form' => array('type' => 'none')),
            'insertTime' => array('label' => 'Insert Time', 'type' => 'datetime', 'acl' => 'read'),
            'insertUser' => array('label' => 'Insert User', 'type' => 'text', 'acl' => 'read'),
            'isEnabled' => array('label' => 'Enabled', 'type' => 'boolean', 'acl' => 'edit', 'default' => true,
                'view' => array('keepOriginalNormalizer' => true)
            )
        ));
    }
}