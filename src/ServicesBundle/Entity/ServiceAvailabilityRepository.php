<?php

namespace ServicesBundle\Entity;

use AppBundle\Entity\BaseEntityRepository;

/**
 * ServiceAvailabilityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServiceAvailabilityRepository extends BaseEntityRepository {
    static protected $metadata = null;

    /**
     * Get field metadata
     * @param $field
     * @param $attribute
     * @param $metadata (uses this metadata instead of local metadata)
     * @param $context ('view'|'form'|'none')
     * @return null
     */
    static public function getFieldMetadata($field, $attribute, $metadata = null, $context = 'none')
    {
        if (!$metadata) {
            $metadata = self::getMetadata();
        }
        return self::getLocalFieldMetadata($field, $attribute, $metadata, $context);
    }

    /**
     * Get local metadata (it needs to be implemented by children to get static variable with local metadata from parent)
     * @return mixed
     */
    protected function getLocalMetadata()
    {
        return $this->getMetadata();
    }

    /**
     * Get entity metadata
     * @return mixed
     */
    static function getMetadata()
    {
        // Process metadata only once
        if (self::$metadata) {
            return self::$metadata;
        }
        return self::$metadata = self::processMetadata(array(
            'id' => array('label' => 'Id', 'type' => 'number', 'acl' => 'read'),
            'serviceObj' => array('label' => 'Service', 'type' => 'object', 'acl' => 'read', 'typeDetail' => array(
                'table' => 'service', 'bundle' => 'services', 'type' => 'none')),
            'description' => array('label' => 'Description', 'type' => 'text', 'acl' => 'edit'),
            'startDate' => array('label' => 'Start date', 'type' => 'date', 'acl' => 'edit', 'typeDetail' => array(
                'expr' => 'max', 'exprField' => 'endDate'
            )),
            'endDate' => array('label' => 'End date', 'type' => 'date', 'acl' => 'edit', 'typeDetail' => array(
                'expr' => 'min', 'exprField' => 'startDate'
            )),
            'insertTime' => array('label' => 'Insert Time', 'type' => 'datetime', 'acl' => 'read'),
            'insertUser' => array('label' => 'Insert User', 'type' => 'text', 'acl' => 'read'),
            'isEnabled' => array('label' => 'Enabled', 'type' => 'boolean', 'acl' => 'edit', 'default' => true)
        ));
    }

    /**
     * Get current availability
     * @param $serviceObj (object)
     * @return mixed
     */
    public function getCurrentAvailability($serviceObj)
    {
        $currentDate = date("Y-m-d");

        // Fields
        $options['fields'] = array(
            'id',
            "(CASE WHEN (serviceAvailability.startDate < '" . $currentDate . "') THEN '" . $currentDate . "' ELSE serviceAvailability.startDate END) AS startDate",
            'endDate'
        );

        // Criteria
        $options['criteria'] = array(
            array('field' => 'isEnabled', 'expr' => 'eq', 'value' => 1),
            array('field' => 'serviceObj', 'expr' => 'eq', 'value' => $serviceObj),
            array('field' => 'endDate', 'expr' => 'gte', 'value' => $currentDate
            )
        );

        // Order by
        $options['orderBy'] = array(
            array('field' => 'startDate', 'value' => 'ASC')
        );

        $qb = $this->queryBuilder($options, false);

        // Retrieve only availability dates that have allot (if enabled). This simple approach doesn't have assurance
        // because entire ranges is not validate
        if ($serviceObj->getIsEnabledAllot())
        {
            $qb->innerJoin('ServicesBundle\Entity\ServiceAllot',
                'serviceAllot',
                'WITH',
                ('serviceAllot.serviceObj = ' . $serviceObj->getId()
                    . " AND serviceAllot.isEnabled = 1 AND "
                    . ' ((serviceAvailability.startDate BETWEEN serviceAllot.startDate AND serviceAllot.endDate)'
                    . ' OR (serviceAvailability.endDate BETWEEN serviceAllot.startDate AND serviceAllot.endDate))'
                )
            );
        }

        // Retrieve only availability dates that have price (if enabled). This simple approach doesn't have assurance
        // because entire ranges is not validate
        if ($serviceObj->getIsEnabledPrice())
        {
            $qb->innerJoin('ServicesBundle\Entity\ServicePrice',
                'servicePrice',
                'WITH',
                ('servicePrice.serviceObj = ' . $serviceObj->getId()
                    . " AND servicePrice.isEnabled = 1 AND "
                    . ' ((serviceAvailability.startDate BETWEEN servicePrice.startDate AND servicePrice.endDate)'
                    . ' OR (serviceAvailability.endDate BETWEEN servicePrice.startDate AND servicePrice.endDate))'
                )
            );
        }

        // Avoid repeated entries caused by joins
        $qb->distinct('id');

        return $this->executeQueryBuilder($qb);
    }
}