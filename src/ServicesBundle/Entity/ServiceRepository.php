<?php

namespace ServicesBundle\Entity;

use AppBundle\Entity\BaseEntityRepository;

/**
 * ServiceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServiceRepository extends BaseEntityRepository
{
    static protected $metadata = null;

    /**
     * Get field metadata
     * @param $field
     * @param $attribute
     * @param $metadata (uses this metadata instead of local metadata)
     * @param $context ('view'|'form'|'none')
     * @return null
     */
    static public function getFieldMetadata($field, $attribute, $metadata = null, $context = 'none')
    {
        if (!$metadata) {
            $metadata = self::getMetadata();
        }
        return self::getLocalFieldMetadata($field, $attribute, $metadata, $context);
    }

    /**
     * Get local metadata (it needs to be implemented by children to get static variable with local metadata from parent)
     * @return mixed
     */
    protected function getLocalMetadata()
    {
        return $this->getMetadata();
    }

    /**
     * Get entity metadata
     * @return mixed
     */
    static function getMetadata()
    {
        // Process metadata only once
        if (self::$metadata) {
            return self::$metadata;
        }
        return self::$metadata = self::processMetadata(array(
            'id' => array('label' => 'Id', 'type' => 'number', 'acl' => 'read'),
            'thumbnail' => array('label' => 'Thumbnail', 'type' => 'img', 'acl' => 'read'),
            'appIconObj' => array('label' => 'Icon', 'type' => 'object', 'acl' => 'edit', 'typeDetail' => array(
                'table' => 'app_icon', 'fieldInView' => 'icon', 'bundle' => 'sysadmin', 'type' => 'none',
                'choices' => array('query' => 'getChoicesForService')), 'isRequired' => false,
                'form' => array('type' => 'html-select')
            ),
            'icon' => array('table' => 'app_icon', 'field' => 'icon', 'label' => 'Icon', 'type' => 'icon',
                'acl' => 'read', 'dependency' => 'appIconObj', 'form' => array('type' => 'none')),
            'name' => array('label' => 'Name', 'type' => 'text', 'acl' => 'edit'),
            'vatCodeObj' => array('label' => 'VAT Code', 'type' => 'object', 'acl' => 'edit', 'typeDetail' => array(
                'table' => 'vatCode', 'bundle' => 'accounting', 'type' => 'none'),
                'form' => array('type' => 'select')),
            'vatCode_percentage' => array('table' => 'vatCode', 'field' => 'percentage', 'label' => '', 'type' => 'percentage',
                'acl' => 'read', 'dependency' => 'vatCodeObj', 'form' => array('type' => 'none')),
            'vatCode_name' => array('table' => 'vatCode', 'field' => 'name', 'label' => 'VAT Code', 'type' => 'text',
                'acl' => 'read', 'dependency' => 'vatCodeObj', 'form' => array('type' => 'none')),
            'description' => array('label' => 'Description', 'type' => 'text', 'acl' => 'edit'),
            'isEnabledAvailability' => array('label' => 'Enable Availability', 'type' => 'boolean', 'acl' => 'edit'),
            'isEnabledAllot' => array('label' => 'Enable Allot', 'type' => 'boolean', 'acl' => 'edit'),
            'isEnabledPrice' => array('label' => 'Enable Price', 'type' => 'boolean', 'acl' => 'edit'),
            'insertTime' => array('label' => 'Insert Time', 'type' => 'datetime', 'acl' => 'read'),
            'insertUser' => array('label' => 'Insert User', 'type' => 'text', 'acl' => 'read'),
            'isEnabled' => array('label' => 'Enabled', 'type' => 'boolean', 'acl' => 'edit', 'default' => true,
                'view' => array('keepOriginalNormalizer' => true)
            )
        ));
    }


    /**
     * Get choices for booking service
     * The booking service form filed by the user, only can handle with RegularServices.
     * Other type of services (like grouper, package, etc) are handle by automatically processes.
     * @param bool $hasExecute
     * @param string $executeMethod
     * @param $options (array with queryBuilder options format)
     * @return mixed
     */
    public function getChoicesForBookingService($hasExecute = true, $executeMethod = 'getResult', $options = array())
    {
        $localTable = $this->getLocalTable();

        $options = array_merge(
            $options,
            array('criteria' => array(
                array(
                    'field' => 'isEnabled',
                    'expr' => 'eq',
                    'value' => true
                )
            ))
        );

        $qb = $this->queryBuilder($options, false);

        // Filer by regular services
        $qb->innerJoin('ServicesBundle\Entity\RegularService',
            'regularService',
            'WITH',
            ('(regularService.serviceObj = ' . $localTable . '.id) AND (regularService.isEnabled = 1)')
        );

        if ($hasExecute) {
            $result = $this->executeQueryBuilder($qb, $executeMethod);

            if (!is_array($result)) {
                $result = array($result);
            }

            return $result;
        }

        return $qb;
    }

    /**
     * Get choices for service package service
     * @param bool $hasExecute
     * @param string $executeMethod
     * @param $options (array with queryBuilder options format)
     * @return mixed
     */
    public function getChoicesForServicePackageService($hasExecute = true, $executeMethod = 'getResult', $options = array())
    {
        $localTable = $this->getLocalTable();

        $options = array_merge(
            $options,
            array('criteria' => array(
                array(
                    'field' => 'isEnabled',
                    'expr' => 'eq',
                    'value' => true
                )
            ))
        );

        $qb = $this->queryBuilder($options, false);

        // Filer by regular services
        $qb->innerJoin('ServicesBundle\Entity\RegularService',
            'regularService',
            'WITH',
            ('(regularService.serviceObj = ' . $localTable . '.id) AND (regularService.isEnabled = 1)')
        );

        if ($hasExecute) {
            $result = $this->executeQueryBuilder($qb, $executeMethod);

            if (!is_array($result)) {
                $result = array($result);
            }

            return $result;
        }

        return $qb;
    }

    /**
     * Get choices for service price
     * @param bool $hasExecute
     * @param string $executeMethod
     * @param $options (array with queryBuilder options format)
     * @return mixed
     */
    public function getChoicesForServicePrice($hasExecute = true, $executeMethod = 'getResult', $options = array())
    {
        $localTable = $this->getLocalTable();

        $options = array_merge(
            $options,
            array('criteria' => array(
                array(
                    'field' => 'isEnabled',
                    'expr' => 'eq',
                    'value' => true
                )
            ))
        );

        $qb = $this->queryBuilder($options, false);

        // Filer by regular services
        $qb->innerJoin('ServicesBundle\Entity\PackageService',
            'packageService',
            'WITH',
            ('(packageService.serviceObj = ' . $localTable . '.id) AND (packageService.isEnabled = 1)')
        );

        if ($hasExecute) {
            $result = $this->executeQueryBuilder($qb, $executeMethod);

            if (!is_array($result)) {
                $result = array($result);
            }

            return $result;
        }

        return $qb;
    }
}