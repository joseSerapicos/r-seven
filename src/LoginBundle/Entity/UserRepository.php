<?php

namespace LoginBundle\Entity;

use AppBundle\Entity\BaseEntityRepository;
use AppBundle\Service\HelperService;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends BaseEntityRepository {
    static protected $metadata = null;

    /**
     * Get field metadata
     * @param $field
     * @param $attribute
     * @param $metadata (uses this metadata instead of local metadata)
     * @param $context ('view'|'form'|'none')
     * @return null
     */
    static public function getFieldMetadata($field, $attribute, $metadata = null, $context = 'none')
    {
        if (!$metadata) {
            $metadata = self::getMetadata();
        }
        return self::getLocalFieldMetadata($field, $attribute, $metadata, $context);
    }

    /**
     * Get local metadata (it needs to be implemented by children to get static variable with local metadata from parent)
     * @return mixed
     */
    protected function getLocalMetadata()
    {
        return $this->getMetadata();
    }

    /**
     * Get entity metadata
     * @return mixed
     */
    static function getMetadata()
    {
        // Process metadata only once
        if (self::$metadata) { return self::$metadata; }

        $metadata = self::processMetadata(array(
            'id' => array('label' => 'Id', 'type' => 'number', 'acl' => 'read'),
            'entityObj' => array('label' => 'Entity', 'type' => 'object', 'acl' => 'read',
                'typeDetail' => array(
                    'table' => 'entity', 'field' => 'id', 'bundlePrefix' => 'bck', 'bundle' => 'entities', 'type' => 'none',
                    'metadata' => array('method' => 'merge', 'persist' => true, 'pushAfterField' => 'id')
                ),
                'form' => array('type' => 'embed', 'typeClass' => 'EntityNoCode')
            ),
            'username' => array('label' => 'Username', 'type' => 'text', 'acl' => 'edit'),
            'password' => array('label' => 'Password', 'type' => 'none', 'acl' => 'edit', 'form' => array(
                'type' => 'password'
            )),
            'role' => array('label' => 'Role', 'type' => 'enum', 'acl' => 'edit',
                'typeDetail' => array(
                    'type' => 'text', 'choices' => array(
                        'value' => array(
                            'User' => 'ROLE_USER', 'Admin' => 'ROLE_ADMIN'
                        )
                    )),
                'form' => array('type' => 'radio')
            ),
            'appLanguageObj' => array('label' => 'Language', 'type' => 'object', 'acl' => 'edit', 'typeDetail' => array(
                'table' => 'app_language', 'bundlePrefix' => 'bck', 'bundle' => 'sysadmin', 'type' => 'none'),
                'form' => array('type' => 'none')
            ),
            'language' => array('label' => 'Language', 'table' => 'app_language', 'field' => 'name', 'type' => 'text',
                'acl' => 'read', 'dependency' => 'appLanguageObj'
            ),
            'isSent' => array('label' => 'Is Sent', 'type' => 'boolean', 'acl' => 'read',
                'view' => array('keepOriginalNormalizer' => true)
            ),
            'insertTime' => array('label' => 'Insert Time', 'type' => 'datetime', 'acl' => 'read', 'form' => array('type' => 'none')),
            'insertUser' => array('label' => 'Insert User', 'type' => 'text', 'acl' => 'read', 'form' => array('type' => 'none')),
            'isEnabled' => array('label' => 'Enabled', 'type' => 'boolean', 'acl' => 'edit', 'default' => true,
                'view' => array('keepOriginalNormalizer' => true)
            )
        ));

        // This fields are only a consequence of inheritance from Entity:
        //     Code is not used by users
        //     User object it's a self reference used only by Entity to filter refine results
        unset($metadata['code'], $metadata['userObj']);

        return self::$metadata = $metadata;
    }

    /**
     * Get choices. Get objects to use as choices, like select, radio, etc.
     * @param bool $hasExecute
     * @param string $executeMethod
     * @param $options (array with queryBuilder options format)
     * @return array|mixed
     */
    public function getChoices($hasExecute = true, $executeMethod = 'getResult', $options = array())
    {
        $criteria = array(
            array( // Do not retrieve customers nor sysadmin
                'field' => 'role',
                'expr' => 'in',
                'value' => array('ROLE_USER', 'ROLE_ADMIN')
            )
        );

        // Exclude logged user
        $loggedUserId = HelperService::getGlobalVar('loggedUserId');
        if ($loggedUserId) {
            $criteria[] = array(
                'field' => 'id',
                'expr' => 'neq',
                'value' => $loggedUserId
            );
        }

        $options['criteria'] = (empty($options['criteria'])
            ? $criteria
            : array_merge(
                $options['criteria'],
                $criteria
            )
        );

        return parent::getChoices($hasExecute, $executeMethod, $options);
    }

    /**
     * Get choices with logged user. Get objects to use as choices, like select, radio, etc.
     * @param bool $hasExecute
     * @param string $executeMethod
     * @param $options (array with queryBuilder options format)
     * @return mixed
     */
    public function getChoicesWithLoggedUser($hasExecute = true, $executeMethod = 'getResult', $options = array())
    {
        $options = array_merge(
            $options,
            array('criteria' => array(
                array(
                    'field' => 'isEnabled',
                    'expr' => 'eq',
                    'value' => true
                ),
                array( // Do not retrieve customers nor sysadmin
                    'field' => 'role',
                    'expr' => 'in',
                    'value' => array('ROLE_USER', 'ROLE_ADMIN')
                )
            ))
        );

        $qb = $this->queryBuilder($options, false);

        if ($hasExecute) {
            $result = $this->executeQueryBuilder($qb, $executeMethod);

            if (!is_array($result)) {
                $result = array($result);
            }

            return $result;
        }

        return $qb;
    }

    /**
     * @param $username
     * @return mixed
     */
    public function loadUserByUsername($username)
    {
        $qb = $this->queryBuilder(
            array(
                'criteria' => array(
                    array('field' => 'username', 'expr' => 'eq', 'value' => $username),
                    // Not necessary, the clause bellow filters empty and also null values!
                    //array('field' => 'password', 'expr' => 'isNotNull', 'value' => null),
                    array('field' => 'password', 'expr' => 'neq', 'value' => '')
                )
            ),
            false
        );

        // Filter by enabeld entities
        $qb->innerJoin('user.entityObj',
            'entity',
            'WITH',
            'entity.isEnabled = 1'
        );

        return $this->executeQueryBuilder($qb, 'getOneOrNullResult');
    }

    /**
     * Get language prefix by entity
     * @param $entity
     * @return mixed
     */
    public function getLangPrefixByEntity($entity)
    {
        $obj = $this->getOneByEntityObj($entity);

        if ($obj && $obj->getAppLanguageObj()) {
            return $obj->getAppLanguageObj()->getSystemPrefix();
        }

        // Return language of system
        return HelperService::getGlobalVar('systemLangPrefix');
    }
}